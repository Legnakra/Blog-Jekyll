<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-01-27T09:23:23+01:00</updated><id>/feed.xml</id><title type="html">sysmaria</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">VPN de acceso remoto con WireGuard (Windows, Linux, Android)</title><link href="/seguridad/2023/01/12/vpn-c.html" rel="alternate" type="text/html" title="VPN de acceso remoto con WireGuard (Windows, Linux, Android)" /><published>2023-01-12T12:47:17+01:00</published><updated>2023-01-12T12:47:17+01:00</updated><id>/seguridad/2023/01/12/vpn-c</id><content type="html" xml:base="/seguridad/2023/01/12/vpn-c.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En este post vamos a configurar un servidor VPN con WireGuard. WireGuard es un protocolo de túnel de código abierto que se ha convertido en una alternativa a OpenVPN. WireGuard es más rápido, más ligero y más fácil de configurar que OpenVPN.</p>

<h2 id="preparando-el-escenario">Preparando el escenario</h2>

<p>El escenario estará compuesto por tres máquinas clientes:</p>

<ul>
  <li>Cliente 1: Máquina debian 11</li>
  <li>Cliente 2: Máquina windows 10</li>
  <li>Cliente 3: Máquina android 11</li>
</ul>

<p>La máquina servidor será una máquina debian 11, y en este caso será nuestra máquina anfitriona, aunque para las pruebas crearemos otra máquina debian 11 conectada a la red interna de la máquina anfitriona.</p>

<p>El cliente interno se creará con vagrant y le cambiaremos la ruta por defecto para que se conecte a la red interna de la máquina anfitriona.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
    nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
    nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Interno"</span>
    nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
    </span>nodo1.vm.network :private_network,
      :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"vpn1"</span>,
      :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
      :ip <span class="o">=&gt;</span> <span class="s2">"192.168.10.10"</span>,
      :mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
end
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip r del default
ip r add default via 192.168.10.1
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/0.png" alt="0" /></p>

<h2 id="instalando-wireguard">Instalando WireGuard</h2>

<p>Instalamos WireGuard en el servidor y configuramos el bit de forwarding.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>wireguard
<span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Creamos los ficheros de configuración del servidor y generamos las claves.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /etc/wireguard/
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg genkey | <span class="nb">tee </span>serverprivatekey | wg pubkey <span class="o">&gt;</span> serverpublickey
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/1.png" alt="1" /></p>

<p>Tras crear el par de claves, creamos el fichero de configuración del servidor.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano wg0.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Server config</span>
<span class="o">[</span>Interface]
<span class="c">#Direccion IP del servidor</span>
Address <span class="o">=</span> 10.99.99.1
<span class="c">#Clave privada del servidor</span>
PrivateKey <span class="o">=</span> qKbkP/TmF/VNr4rotbACobORgnScgXw6Ku/esS11ZW8<span class="o">=</span>
<span class="c">#Puerto de escucha</span>
ListenPort <span class="o">=</span> 51820
<span class="c">#Reglas IPTables</span>
PostUp <span class="o">=</span> iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> %i <span class="nt">-j</span> ACCEPT<span class="p">;</span> iptables <span class="nt">-A</span> FORWARD <span class="nt">-o</span> %i <span class="nt">-j</span> ACCEPT<span class="p">;</span> iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-o</span> wlp3s0 <span class="nt">-j</span> MASQUERADE
PostDown <span class="o">=</span> iptables <span class="nt">-D</span> FORWARD <span class="nt">-i</span> %i <span class="nt">-j</span> ACCEPT<span class="p">;</span> iptables <span class="nt">-D</span> FORWARD <span class="nt">-o</span> %i <span class="nt">-j</span> ACCEPT<span class="p">;</span> iptables <span class="nt">-t</span> nat <span class="nt">-D</span> POSTROUTING <span class="nt">-o</span> wlp3s0 <span class="nt">-j</span> MASQUERADE
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/2.png" alt="2" /></p>

<p>Terminado esto, activamos la interfaz y comprobamos que funciona.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick up wg0
wg
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/3.png" alt="3" /></p>

<p><img src="/assets/images/vpn/C/4.png" alt="4" /></p>

<h2 id="configurando-el-cliente-externo">Configurando el cliente externo</h2>

<p>Creamos el fichero vagrant para crear al cliente externo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |v|
        v.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
        nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
        nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Externo"</span>
        nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
    </span>end
end
</code></pre></div></div>

<p>Como hemos hecho en la máquina anterior, instalamos WireGuard y generamos las claves.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>wireguard
wg genkey | <span class="nb">tee </span>clientprivatekey | wg pubkey <span class="o">&gt;</span> clientpublickey
</code></pre></div></div>

<p>Creamos el fichero de configuración del cliente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano wg0.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
<span class="c">#Direccion IP del cliente</span>
Address <span class="o">=</span> 10.99.99.2
<span class="c">#Clave privada del cliente</span>
PrivateKey <span class="o">=</span> oPuAciROYYHY8uX6IqU3DcvU/WoybtBn7Y6zFOwOMH8<span class="o">=</span>
<span class="c">#Puerto de escucha</span>
ListenPort <span class="o">=</span> 51820
<span class="c">#Reglas IPTables</span>
PostUp <span class="o">=</span> ip route add 192.168.10.0/24 dev wg0
PostDown <span class="o">=</span> ip route del 192.168.10.0/24 dev wg0

<span class="o">[</span>Peer]
<span class="c">#Clave publica del servidor</span>
PublicKey <span class="o">=</span> T6HZUpF7qb1wEV+nuZGErCwEq/vGO5G7Z/tv/Rq7Izw<span class="o">=</span>
<span class="c">#Direccion IP del servidor</span>
AllowedIPs <span class="o">=</span> 0.0.0.0/0
<span class="c">#Endpoint del servidor</span>
Endpoint <span class="o">=</span> 192.168.1.11:51820
</code></pre></div></div>

<p>Activamos la interfaz y comprobamos que funciona.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick up wg0
wg
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/5.png" alt="5" /></p>

<p><strong>NOTA</strong>: Tras este paso, deberemos agregar la ruta por defecto en el cliente externo para que pueda acceder a la red interna.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Peer]
Publickey <span class="o">=</span> T6HZUpF7qb1wEV+nuZGErCwEq/vGO5G7Z/tv/Rq7Izw<span class="o">=</span>
AllowedIPs <span class="o">=</span> 10.99.99.2/32
PersistentKeepAlive <span class="o">=</span> 25
</code></pre></div></div>

<p>Reiniciamos el servicio y comprobamos que funciona.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick down wg0
wg-quick up wg0
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/6.png" alt="6" /></p>

<p>Y comprobamos que funciona.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/7.png" alt="7" /></p>

<p>Como podemos ver, el cliente externo puede acceder a la red interna.</p>

<p><img src="/assets/images/vpn/C/9.png" alt="9" /></p>

<p><img src="/assets/images/vpn/C/10.png" alt="10" /></p>

<h2 id="configurando-el-cliente-windows">Configurando el cliente Windows</h2>

<p>La configuración en windows es igual que en Linux, solo que en vez de usar el fichero de configuración, usaremos la aplicación WireGuard para Windows, que podremos descargarnos desde su <a href="https://www.wireguard.com/install/">página oficial</a>.</p>

<p>Ya instalado, creamos un túnel vacñio y no tendremos que crear las claves, ya que las generará la aplicación.</p>

<p><img src="/assets/images/vpn/C/11.png" alt="11" /></p>

<p>Terminada la configuración en Windows, nos dirigimos de nuevo en el cliente interno y añadimos un nuevo peer.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Windows</span>
<span class="o">[</span>Peer]
Publickey <span class="o">=</span> <span class="nv">5pZtBRqvn9bceifMZypv1Z3F1CcQNLSGKRCBo1ooiVg</span><span class="o">=</span>
AllowedIPs <span class="o">=</span> 10.99.99.3/32
PersistentKeepAlive <span class="o">=</span> 25
</code></pre></div></div>

<p>Reiniciamos el servicio y comprobamos que funciona.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick down wg0
wg-quick up wg0
</code></pre></div></div>

<p>Tras esto, activamos el tunel en Windows.</p>

<p><img src="/assets/images/vpn/C/12.png" alt="12" /></p>

<p>Si nos dirigimos al servidor, podemos ver como se añade un nuevo peer.</p>

<p><img src="/assets/images/vpn/C/13.png" alt="13" /></p>

<h3 id="comprobaciones">Comprobaciones</h3>

<ul>
  <li>Comprobamos que el cliente windows puede acceder a la red interna.</li>
</ul>

<p><img src="/assets/images/vpn/C/14.png" alt="14" /></p>

<ul>
  <li>Comprobamos que el cliente interno tiene acceso a la red interna.</li>
</ul>

<p><img src="/assets/images/vpn/C/15.png" alt="15" /></p>

<h2 id="cliente-android">Cliente Android</h2>

<p>Descargamos la aplicación WireGuard desde la <a href="https://play.google.com/store/apps/details?id=com.wireguard.android&amp;hl=es&amp;gl=US">Play Store</a>.</p>

<p>En la propia aplicación, nos da tres opciones para crear el tunel:</p>
<ul>
  <li>Importar desde archivo</li>
  <li>Importar desde QR</li>
  <li>Crear desde cero</li>
</ul>

<p>De las tres opciones, he eligido la de <code class="language-plaintext highlighter-rouge">importar desde QR</code>, ya que es la más sencilla. Por ello, nos dirigimos al servidor y ejecutamos el siguiente comando.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg genkey | <span class="nb">tee </span>clientprivatekey | wg pubkey <span class="o">&gt;</span> clientpublickey
</code></pre></div></div>

<p>Generamos el fichero de configuración como lo realizamos con el cliente linux.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano AndroidClient.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
<span class="c">#Direccion IP del cliente</span>
Address <span class="o">=</span> 10.99.99.4
<span class="c">#Clave privada del cliente</span>
PrivateKey <span class="o">=</span>
<span class="c">#Puerto de escucha</span>
ListenPort <span class="o">=</span> 51820

<span class="o">[</span>Peer]
<span class="c">#Clave publica del servidor</span>
Publickey <span class="o">=</span> 
<span class="c">#Direccion IP del servidor</span>
AllowedIPs <span class="o">=</span>
<span class="c">#Endpoint del servidor</span>
Endpoint <span class="o">=</span>
</code></pre></div></div>

<p>Para generar el QR, nos instalaremos el paquete <code class="language-plaintext highlighter-rouge">qrencode</code> y lo ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qrencode <span class="nt">-t</span> ansiutf8 &lt; AndroidClient.conf
</code></pre></div></div>

<p>Escaneamos el QR con la aplicación WireGuard en Android y ya tendremos el tunel configurado. Solo nos quedaría configurar un nuevo bloque peer en el servidor linux.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano wg0.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Peer]
<span class="c">#Clave publica del cliente</span>
Publickey <span class="o">=</span>
<span class="c">#Direccion IP del cliente</span>
AllowedIPs <span class="o">=</span>
<span class="c">#Tiempo de espera</span>
PersistentKeepAlive <span class="o">=</span>
</code></pre></div></div>

<p>Reiniciamos el servicio y comprobamos que funciona.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick down wg0
wg-quick up wg0
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/16.png" alt="16" /></p>

<h2 id="comprobaciones-1">Comprobaciones</h2>

<p>Desde el propio cliente podemos comprobar el funcionamiento de la VPN.</p>

<p><img src="/assets/images/vpn/C/17.png" alt="17" /></p>

<p>Desde el servidor podemos comprobar que el cliente Android se ha conectado correctamente.</p>

<p><img src="/assets/images/vpn/C/18.png" alt="18" /></p>

<h2 id="conclusiones">Conclusiones</h2>

<p>Comparando OpenVPN y WireGuard, podemos ver que WireGuard es mucho más sencillo de configurar y que tiene un rendimiento mucho mejor. Con Wireguard no es necesario que creamos un certificado para cada cliente, ya que solo necesitamos la clave pública del cliente y la clave privada del servidor.</p>

<p>Otro de los puntos a favor de WireGuard es que no es necesario que el servidor tenga una IP pública, ya que podemos usar un servidor con una IP privada y usar un servicio de tunelado como <a href="https://ngrok.com/">ngrok</a> para que el servidor sea accesible desde internet.</p>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Introducción]]></summary></entry><entry><title type="html">VPN site to site con OpenVPN y certificados x509</title><link href="/seguridad/2023/01/11/vpn-b.html" rel="alternate" type="text/html" title="VPN site to site con OpenVPN y certificados x509" /><published>2023-01-11T12:47:17+01:00</published><updated>2023-01-11T12:47:17+01:00</updated><id>/seguridad/2023/01/11/vpn-b</id><content type="html" xml:base="/seguridad/2023/01/11/vpn-b.html"><![CDATA[<h2 id="introducción">Introducción</h2>
<p>En este post vamos a configurar una conexión VPN sitio a sitio entre dos equipos:</p>

<ul>
  <li>Cada equipo estará conectado a dos redes, una de ellas en común</li>
  <li>Para la autenticación de los extremos se usarán obligatoriamente certificados digitales, que se generarán utilizando openssl y se almacenarán en el directorio /etc/openvpn, junto con con los parámetros Diffie-Helman y el certificado de la propia Autoridad de Certificación.</li>
  <li>Se utilizarán direcciones de la red 10.99.99.0/24 para las direcciones virtuales de la VPN.</li>
  <li>Tras el establecimiento de la VPN, una máquina de cada red detrás de cada servidor VPN debe ser capaz de acceder a una máquina del otro extremo.</li>
</ul>

<p><img src="/assets/images/vpn/B/VPN.png" alt="escenario" /></p>

<h2 id="preparando-el-escenario">Preparando el escenario</h2>

<p>Vamos a dividir el escenario en dos, por una parte, un escenario que actuará de servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Servidor"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadavpn"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.30.0.10"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
    config.vm.define :nodo2 <span class="k">do</span> |nodo2|
      nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo2.vm.hostname <span class="o">=</span> <span class="s2">"Cliente"</span>
      nodo2.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadavpn"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.30.0.11"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
  end
</code></pre></div></div>

<p>Y por otra parte, un escenario que actuará de cliente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Servidor2"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadvpn2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.20.0.10"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
    config.vm.define :nodo2 <span class="k">do</span> |nodo2|
      nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo2.vm.hostname <span class="o">=</span> <span class="s2">"Cliente2"</span>
      nodo2.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadvpn2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.20.0.11"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
end
</code></pre></div></div>

<h2 id="configurando-el-servidor">Configurando el servidor</h2>

<p>Lo primero que tendremos que hacer es instalar el servicio openvpn y crearemos el fichero <code class="language-plaintext highlighter-rouge">.vars</code> que contendrá las variables que usaremos en el resto de la configuración:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>openvpn

<span class="nb">cp</span> /usr/share/easy-rsa/vars.example /etc/openvpn/easy-rsa/vars
</code></pre></div></div>

<p>Ahora, vamos a editar el fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/vars</code> y vamos a modificar las siguientes variables:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set_var EASYRSA_REQ_COUNTRY     <span class="s2">"ES"</span>
set_var EASYRSA_REQ_PROVINCE    <span class="s2">"Sevilla"</span>
set_var EASYRSA_REQ_CITY        <span class="s2">"Dos Hermanas"</span>
set_var EASYRSA_REQ_ORG         <span class="s2">"MJAR"</span>
set_var EASYRSA_REQ_EMAIL       <span class="s2">"mariajesus.alloza@outlook.es"</span>
set_var EASYRSA_REQ_OU          <span class="s2">"VPN site to site"</span>
</code></pre></div></div>

<p>Creamos eldirectorio donde almacenaremos la Autoridad Certificadore (CA) y generamos la clave Diffie-Helman:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /usr/share/easy-rsa
./easyrsa init-pki
<span class="nt">---</span>
./easyrsa gen-dh
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/1.png" alt="1" /></p>

<p><img src="/assets/images/vpn/B/2.png" alt="2" /></p>

<p>Terminado esto, construimos la Autoridad certificadora:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa build-ca
<span class="c">#Frase de paso: admin</span>
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/3.png" alt="3" /></p>

<p>El siguiente paso será que, ya teniendo nuestra Autoridad Certificadora, crearemos y firmaremos el certificado para <code class="language-plaintext highlighter-rouge">server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa gen-req server
./easyrsa sign-req server server
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/4.png" alt="4" /></p>

<p><img src="/assets/images/vpn/B/5.png" alt="5" /></p>

<p>Ahora le toca el turno al segundo escenario, y comenzaremos firmando el certificado para <code class="language-plaintext highlighter-rouge">server2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa gen-req server2
./easyrsa sign-req client server2
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/6.png" alt="6" /></p>

<p><img src="/assets/images/vpn/B/7.png" alt="7" /></p>

<p>Copiamos los certificados y claves generadas al directorio <code class="language-plaintext highlighter-rouge">/etc/openvpn/server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Copiamos los ficheros</span>
<span class="nb">cp</span> <span class="nt">-rp</span> /etc/openvpn/easy-rsa/pki<span class="o">{</span>ca.crt,dh.pem,issued/server.crt,private/server.key<span class="o">}</span> /etc/openvpn/server

<span class="c">#Enviamos por scp los ficheros</span>
scp <span class="nt">-r</span> /etc/openvpn/server vagrant@192.168.121.21:
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/8.png" alt="8" /></p>

<p><img src="/assets/images/vpn/B/9.png" alt="9" /></p>

<p>Creamos el fichero de configuración del servidor VPN:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /usr/share/doc/openvpn/examples/sample-config-files/server.conf /etc/openvpn/server/server.conf
</code></pre></div></div>

<p>Y editamos el fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn/server/servidor.conf</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dev tun
ifconfig 10.99.99.1 10.99.99.2
route 172.20.0.0 255.255.255.0
tls-server
ca ca.crt
cert server.crt
key server.key
dh dh.pem
comp-lzo
keepalive 10 120
log /var/log/openvpn/server.log
verb 3
askpass contra.txt
</code></pre></div></div>

<p>Iniciamos el servicio y nos cercioramos de que está activo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> openvpn-server@servidor
systemctl start openvpn-server@servidor
systemctl status openvpn-server@servidor
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/10.png" alt="10" /></p>

<p>Configuramos el bit de forwarding en el servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Y configuramos el cliente del primer escenario cambiando la ruta por defecto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route del default
ip route add default via 172.20.0.20
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/11.png" alt="11" /></p>

<h2 id="configurando-el-cliente">Configurando el cliente</h2>

<p>Ahora le toca el turno a <code class="language-plaintext highlighter-rouge">servidor2</code> y comenzaremos moviendo los ficheros de los certificados y claves generadas al directorio <code class="language-plaintext highlighter-rouge">/etc/openvpn/client</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Copiamos los ficheros</span>
<span class="nb">mv </span>ca.crt /etc/openvpn/client
<span class="nb">mv </span>server2.crt /etc/openvpn/client
<span class="nb">mv </span>server2.key /etc/openvpn/client
</code></pre></div></div>

<p>Creamos el fichero de configuración tomando primero como referencia el fichero de configuración del servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/client/client.conf
</code></pre></div></div>

<p>Y editamos el fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn/client/cliente.conf</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dev tun

remote 192.168.121.115
ifconfig 10.99.99.2 10.99.99.1
route 172.30.0.0 255.255.255.0
tls-client
ca ca.crt
cert server.crt
key server.key
comp-lzo
keepalive 10 120
verb 3
askpass contra2.txt
</code></pre></div></div>

<p>Iniciamos el servicio y nos cercioramos de que está activo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl start openvpn-client@cliente
systemctl status openvpn-client@cliente
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/12.png" alt="12" /></p>

<p>Configuramos el bit de forwarding en el servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Y configuramos el cliente del primer escenario cambiando la ruta por defecto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route del default
ip route add default via 172.20.0.20
</code></pre></div></div>

<h2 id="comprobando-la-conexión">Comprobando la conexión</h2>

<p>Comprobamos que el tunel se ha creado correctamente:</p>

<ul>
  <li>
    <p>Rutas del escenario 1</p>

    <p><img src="/assets/images/vpn/B/13.png" alt="13" /></p>
  </li>
  <li>
    <p>Rutas del escenario 2</p>

    <p><img src="/assets/images/vpn/B/14.png" alt="14" /></p>
  </li>
  <li>
    <p>Conexión desde el cliente del escenario 1</p>

    <p><img src="/assets/images/vpn/B/15.png" alt="15" /></p>
  </li>
  <li>
    <p>Conexión desde el cliente del escenario 2</p>

    <p><img src="/assets/images/vpn/B/16.png" alt="16" /></p>
  </li>
</ul>

<h2 id="conclusiones">Conclusiones</h2>

<p>Una VPN site to site es una solución muy útil para conectar dos redes privadas de forma segura. En este caso, hemos utilizado OpenVPN, pero existen otras soluciones como IPsec, que también son muy interesantes.</p>

<p>En este caso, hemos utilizado dos escenarios, pero también se podría utilizar un solo escenario, con dos clientes conectados a un servidor VPN.</p>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Introducción En este post vamos a configurar una conexión VPN sitio a sitio entre dos equipos:]]></summary></entry><entry><title type="html">Servidor de correo en los servidores de clase</title><link href="/hlc+sri/2023/01/10/correo.html" rel="alternate" type="text/html" title="Servidor de correo en los servidores de clase" /><published>2023-01-10T11:59:07+01:00</published><updated>2023-01-10T11:59:07+01:00</updated><id>/hlc+sri/2023/01/10/correo</id><content type="html" xml:base="/hlc+sri/2023/01/10/correo.html"><![CDATA[<p>En este post, vamos a implementar en nuestro <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a> un servidor de correo.</p>

<p><img src="/assets/images/escenario/escenario.png" alt="Escenario" /></p>

<h1 id="ejercicio-1">Ejercicio 1</h1>

<p>Instalaremos y configuraremos un servidor de correo en <code class="language-plaintext highlighter-rouge">delta</code>. El nombre del sistema de correo será nuestro nombre de dominio <code class="language-plaintext highlighter-rouge">maria.gonzalonazareno.org</code>.</p>

<p>Utilizando la utilidad mail manda un correo desde un usuario del servidor a otro usuario del servidor. El usuario destinatario debe leer el correo con el mismo programa.</p>

<h2 id="preparación-del-escenario">Preparación del escenario</h2>

<ul>
  <li>
    <p>Instalamos el servidor de correo</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>postfix bsd-mailx
</code></pre></div>    </div>
  </li>
  <li>
    <p>Realizamos una prueba de envío de correo</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola"</span> | mail <span class="nt">-s</span> <span class="s2">"Prueba"</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/1.png" alt="1" /></p>
  </li>
</ul>

<h1 id="ejercicio-2">Ejercicio 2</h1>

<p>Configura tu servidor de correo para que use como relay el servidor de correo de nuestra <code class="language-plaintext highlighter-rouge">red babuino-smtp.gonzalonazareno.org</code>. Con la utilidad <code class="language-plaintext highlighter-rouge">mail</code> envía un correo a tu cuenta personal de gmail, hotmail,…</p>

<p>Muestra el log del sistema donde se comprueba que el correo se ha enviado con éxito.</p>

<p>Comprueba las cabeceras del correo que has recibido e indica donde vemos los servidores por los que ha pasado el correo.</p>

<ul>
  <li>
    <p>Nos disponemos a usar el servidor de correo de la red babuino</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/postfix/main.cf
</code></pre></div>    </div>

    <p>Y añadimos la siguiente línea</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  relayhost <span class="o">=</span> babuino-smtp.gonzalonazareno.org
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Reiniciamos el servicio</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl restart postfix
</code></pre></div>    </div>
  </li>
  <li>
    <p>Enviamos un correo a nuestro correo personal</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola"</span> | mail <span class="nt">-s</span> <span class="s2">"Prueba"</span> <span class="nt">-r</span> <span class="s2">"mariajesus.alloza@outlook.es"</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/3.jpg" alt="3" /></p>
  </li>
  <li>
    <p>Comprobamos el log del sistema</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo tail</span> <span class="nt">-f</span> /var/log/mail.log
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Comprobamos las cabeceras del correo que hemos recibido</p>

    <p><img src="/assets/images/correo/5.png" alt="5" /></p>
  </li>
</ul>

<h1 id="ejercicio-3">Ejercicio 3</h1>

<p>En este ejercicio debemos responder desde nuestra cuenta de correo personal al correo que recibimos en el ejercicio anterior. Recuerda que para que todo funcione debemos indicarle al profesor el nombre de tu dominio para que configure de manera adecuada el parámetro <code class="language-plaintext highlighter-rouge">relay_domains</code> en <code class="language-plaintext highlighter-rouge">babuino-smtp</code>. Además debes configurar de manera adecuada el registro MX de tu servidor DNS.</p>

<p>Muestra el log del sistema donde se comprueba que el correo se ha recibido con éxito.</p>

<ul>
  <li>
    <p>Nos logueamos en <code class="language-plaintext highlighter-rouge">alfa</code> y configuramos la regla DNAT para que los emails que lleguen a <code class="language-plaintext highlighter-rouge">babuino-smtp</code> sean redirigidos a <code class="language-plaintext highlighter-rouge">delta</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  post-up iptables <span class="nt">-t</span> nat <span class="nt">-A</span> PREROUTING <span class="nt">-p</span> tcp <span class="nt">--dport</span> 25 <span class="nt">-i</span> ens3 <span class="nt">-j</span> DNAT <span class="nt">--to</span> 192.168.0.3
</code></pre></div>    </div>
  </li>
  <li>
    <p>En el contenedor <code class="language-plaintext highlighter-rouge">charlie</code> configuramos el registro MX de nuestro dominio</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>nano <span class="nt">-cl</span> /var/cache/bind/db.externa.mariajesus.gonzalonazareno.org
 <span class="nt">---</span>
 @       IN      MX  10  alfa.mariajesus.gonzalonazareno.org.
</code></pre></div>    </div>
    <p>Reiniciamos <code class="language-plaintext highlighter-rouge">bind9</code> y ya podemos enviar correos desde <code class="language-plaintext highlighter-rouge">charlie</code> a <code class="language-plaintext highlighter-rouge">delta</code></p>

    <p><img src="/assets/images/correo/6.png" alt="6" /></p>
  </li>
</ul>

<h1 id="ejercicio-extra">Ejercicio Extra</h1>

<p>Vamos a mandarle un correo electrónico al profesor, comprobando que el correo se ha recibido con éxito y puede ser respondido, por lo que la respuesta nos llegará a nuestra cuenta de correo personal.</p>

<h1 id="comprobación">Comprobación</h1>

<ol>
  <li>
    <p>Prueba de funcionamiento del ejercicio1. Se debe mostrar el log para asegurarse que se ha enviado el correo.</p>
  </li>
  <li>
    <p>Muestra las cabeceras del correo recibido en el ejercicio 2 mostrando las cabeceras donde vemos los servidores por los que ha pasado el correo</p>
  </li>
  <li>
    <p>Muestra el log del sistema donde se comprueba que el correo se ha recibido con éxito en el ejercicio 3</p>
  </li>
  <li>
    <p><strong>Ejercicio propuesto por el profesor</strong>:</p>
  </li>
</ol>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[En este post, vamos a implementar en nuestro escenario un servidor de correo.]]></summary></entry><entry><title type="html">Desarrollo y despliegue de una aplicación Java simple</title><link href="/iaw/2023/01/09/java-simple.html" rel="alternate" type="text/html" title="Desarrollo y despliegue de una aplicación Java simple" /><published>2023-01-09T12:47:17+01:00</published><updated>2023-01-09T12:47:17+01:00</updated><id>/iaw/2023/01/09/java-simple</id><content type="html" xml:base="/iaw/2023/01/09/java-simple.html"><![CDATA[<p>En este post vamos a crear una aplicación Java simple y desplegarla en un servidor Tomcat con Maven.</p>

<p><strong>Tomcat</strong> es un servidor web que permite ejecutar aplicaciones Java. En este post vamos a ver como desplegar una aplicación Java en un servidor Tomcat.</p>

<p>Mientras que <strong>Maven</strong> es una herramienta de construcción de software que nos permite gestionar el ciclo de vida de un proyecto Java. En este post vamos a ver como crear un proyecto Java con Maven.</p>

<h2 id="escenario">Escenario</h2>
<ol>
  <li>
    <p>Instala tomcat9 como hemos visto en la documentación.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt <span class="nb">install </span>tomcat9 tomcat9-admin
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configuramos el panel de administración Tomcat-Manager y configúralo para su acceso.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> nano /etc/tomcat9/tomcat-users.xml
</code></pre></div>    </div>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;tomcat-users&gt;</span>
     <span class="nt">&lt;role</span> <span class="na">rolename=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
     <span class="nt">&lt;user</span> <span class="na">username=</span><span class="s">"tomcat"</span> <span class="na">password=</span><span class="s">"s3cret"</span> <span class="na">roles=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
 <span class="nt">&lt;/tomcat-users&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Instala la aplicación maven que nos va a ayudar a compilar aplicaciones java.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt <span class="nb">install </span>maven
</code></pre></div>    </div>
  </li>
  <li>
    <p>A continuación vamos a generar un proyecto, que será el esqueleto de nuestra aplicación Java, para ello ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mvn archetype:generate <span class="nt">-DgroupId</span><span class="o">=</span>com.app.example <span class="nt">-DartifactId</span><span class="o">=</span>java-app <span class="nt">-DarchetypeArtifactId</span><span class="o">=</span>maven-archetype-quickstart <span class="nt">-DinteractiveMode</span><span class="o">=</span><span class="nb">false</span>
</code></pre></div>    </div>

    <p>La estructura de nuestro directorio sería la siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> java-app/
 ├── pom.xml
 └── src
     ├── main
     │   ├── java
     │   │   └── com
     │   │       └── app
     │   │           └── example
     │   │               └── App.java
     │   └── resources
     └── <span class="nb">test</span>
         └── java
             └── com
                 └── app
                     └── example
                         └── AppTest.java
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">java-app/pom.xml</code> para que tenga la siguiente estructura:</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="cp">&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;</span>
     <span class="nt">&lt;project</span> <span class="na">xmlns =</span> <span class="s">"http://maven.apache.org/POM/4.0.0"</span> 
        <span class="na">xmlns:xsi =</span> <span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>

     <span class="na">xsi:schemaLocation =</span> <span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

        <span class="nt">&lt;groupId&gt;</span>com.tutorialspoint<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>hello-world<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>

        <span class="nt">&lt;parent&gt;</span>
           <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
           <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
           <span class="nt">&lt;version&gt;</span>2.3.0.RELEASE<span class="nt">&lt;/version&gt;</span>
           <span class="nt">&lt;relativePath/&gt;</span> 
        <span class="nt">&lt;/parent&gt;</span>

        <span class="nt">&lt;properties&gt;</span>
           <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
           <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
           <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
           <span class="nt">&lt;tomcat.version&gt;</span>9.0.37<span class="nt">&lt;/tomcat.version&gt;</span>
        <span class="nt">&lt;/properties&gt;</span>

        <span class="nt">&lt;dependencies&gt;</span>
           <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
           <span class="nt">&lt;/dependency&gt;</span>
           <span class="nt">&lt;dependency&gt;</span>  
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>  
     	 <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>  
     	 <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>  
           <span class="nt">&lt;/dependency&gt;</span>   
           <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
           <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>

        <span class="nt">&lt;build&gt;</span>
           <span class="nt">&lt;plugins&gt;</span>
              <span class="nt">&lt;plugin&gt;</span>
                 <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                 <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;/plugin&gt;</span>
           <span class="nt">&lt;/plugins&gt;</span>
        <span class="nt">&lt;/build&gt;</span>

     <span class="nt">&lt;/project&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Construimos la aplicación, y para ello modificamos el fichero <code class="language-plaintext highlighter-rouge">src/main/java/com/app/example/App.java</code> para que tenga la siguiente estructura:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">package</span> <span class="nn">com.app.example</span><span class="o">;</span>

 <span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.builder.SpringApplicationBuilder</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.web.servlet.support.SpringBootServletInitializer</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

 <span class="nd">@SpringBootApplication</span>
 <span class="nd">@RestController</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="kd">extends</span> <span class="nc">SpringBootServletInitializer</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">SpringApplicationBuilder</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">SpringApplicationBuilder</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
       <span class="k">return</span> <span class="n">application</span><span class="o">.</span><span class="na">sources</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
       <span class="k">return</span> <span class="s">"&lt;center&gt;Hola mundo!!!&lt;/center&gt;"</span><span class="o">;</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Construimos la aplicación, y para ello ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mvn package
</code></pre></div>    </div>
  </li>
  <li>
    <p>Copiamos el fichero <code class="language-plaintext highlighter-rouge">java-app/target/hello-world-1.war</code> a la carpeta <code class="language-plaintext highlighter-rouge">/var/lib/tomcat9/webapps/</code> y reiniciamos el servicio de tomcat9.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> systemctl restart tomcat9
</code></pre></div>    </div>

    <p><img src="/assets/images/java-simple/1.png" alt="1" /></p>
  </li>
</ol>

<h2 id="comprobación">Comprobación</h2>
<p>Si accedemos a la ip de nuestro servidor, veremos el mensaje <code class="language-plaintext highlighter-rouge">Hola mundo!!!</code> en el navegador.</p>

<p><img src="/assets/images/java-simple/2.png" alt="2" /></p>

<p>Y si accedemos al Tomcat-Manager, veremos que la aplicación se ha desplegado correctamente.</p>

<p><img src="/assets/images/java-simple/3.png" alt="3" /></p>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[En este post vamos a crear una aplicación Java simple y desplegarla en un servidor Tomcat con Maven.]]></summary></entry><entry><title type="html">Acceso remoto con OpenVPN y certificados x509</title><link href="/seguridad/2023/01/09/vpn.html" rel="alternate" type="text/html" title="Acceso remoto con OpenVPN y certificados x509" /><published>2023-01-09T12:47:17+01:00</published><updated>2023-01-09T12:47:17+01:00</updated><id>/seguridad/2023/01/09/vpn</id><content type="html" xml:base="/seguridad/2023/01/09/vpn.html"><![CDATA[<h2 id="qué-es-una-vpn-y-para-qué-sirve">Qué es una VPN y para qué sirve</h2>

<p>Una VPN (Virtual Private Network) es una red privada virtual que permite conectar dos o más redes privadas entre sí a través de una red pública como Internet. Las VPNs son muy útiles para conectar redes privadas a través de Internet de forma segura, ya que los datos que se transmiten a través de una VPN están cifrados y protegidos de forma que sólo los usuarios autorizados pueden acceder a ellos.</p>

<h2 id="acceso-remoto-con-openvpn-y-certificados-x509">Acceso remoto con OpenVPN y certificados x509</h2>

<p>En este apartado vamos a realizar un VPN de acceso remoto con OpenVPN y certificados x509. Para ello vamos a utilizar una máquina virtual en Proxmox con Debian 11.</p>

<h2 id="preparando-el-escenario">Preparando el escenario</h2>

<ol>
  <li>
    <p>Vamos a crear el escenario con 3 máquinas virtuales en Vagrant. Para ello, creamosun directorio y ejecutamos lo siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> vagrant init
</code></pre></div>    </div>

    <p>Se nos creará el fichero Vagrantfile. Añadimos lo siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
     config.vm.provider :libvirt <span class="k">do</span> |libvirt|
         libvirt.memory <span class="o">=</span> 1024
     end
     config.vm.define :nodo1 <span class="k">do</span> |nodo1|
       nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
       nodo1.vm.hostname <span class="o">=</span> <span class="s2">"VPNServer"</span>
       nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
       </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN1"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"192.168.10.10"</span>,
        :mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
       nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"192.168.11.10"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
     config.vm.define :nodo2 <span class="k">do</span> |nodo2|
       nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
       </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
       nodo2.vm.hostname <span class="o">=</span> <span class="s2">"VPNClient1"</span>
       nodo2.vm.network :private_network,
         :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN1"</span>,
         :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
         :ip <span class="o">=&gt;</span> <span class="s2">"192.168.10.11"</span>,
         :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
     config.vm.define :nodo3 <span class="k">do</span> |nodo3|
         nodo3.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
         </span>nodo3.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
         nodo3.vm.hostname <span class="o">=</span> <span class="s2">"VPNClient2"</span>
         nodo3.vm.network :private_network,
           :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN2"</span>,
           :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
           :ip <span class="o">=&gt;</span> <span class="s2">"192.168.11.11"</span>,
           :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
 end
</code></pre></div>    </div>
  </li>
</ol>

<ul>
  <li>
    <p>Instalamos <code class="language-plaintext highlighter-rouge">openvpn</code> en <code class="language-plaintext highlighter-rouge">VPNServer</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>openvpn
</code></pre></div>    </div>

    <p>Y activamos el bit de IP forwarding:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div>    </div>
  </li>
  <li>
    <p>La configuración que aparece en el fichero <code class="language-plaintext highlighter-rouge">/usr/share/easy-rsa</code> al fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cp</span> <span class="nt">-r</span> /usr/share/easy-rsa /etc/openvpn
</code></pre></div>    </div>
  </li>
  <li>
    <p>Nos dirigimos al directorio <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/</code> y ejecutamos en la consola <code class="language-plaintext highlighter-rouge">./easyrsa init-pki</code> para inicializar el PKI.</p>

    <p><img src="/assets/images/vpn/A/1.png" alt="1" /></p>
  </li>
</ul>

<h2 id="creamos-la-clave-privada-y-realizamos-la-firma-de-la-misma">Creamos la clave privada y realizamos la firma de la misma</h2>

<ul>
  <li>
    <p>Ya completado el paso anterior, vamos a generar el certificado de la Autoridad de Certificación (CA) y la clave con la que vamos a firmar los certificados del servidor y los clientes.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ./easyrsa build-ca
    
  <span class="c">#Frase de paso: admin</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/vpn/A/2.png" alt="2" /></p>

    <p><strong>NOTA</strong>: La clave privada la encontraremos en <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/pki/private/ca.key</code> y el certificado en <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/pki/ca.crt</code>.</p>
  </li>
</ul>

<p>Vamos a generar parámetros Diffie-Helman para la autenticación de los extremos de la VPN. Pero, ¿por qué es necesario? El fin de los parámetros Diffie-Helman es evitar que un atacante pueda descifrar los mensajes cifrados en la VPN. Para ello, se generan dos números primos grandes y se calcula el módulo de su producto. Este módulo se envía a los extremos de la VPN, que lo utilizan para generar una clave de sesión.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa gen-dh
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/3.png" alt="3" /></p>

<p>Ahora le toca elturno al certificado y a la clave privada del servidor, teniendo en cuenta que deshabilitaremos la frase de paso. Para ello, ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa build-server-full server nopass
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/4.png" alt="4" /></p>

<p>Ya configurado el servidor, vamos a ponernos manos a la obra y le toca el turno a <code class="language-plaintext highlighter-rouge">VPNClient1</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa build-client-full client1 nopass
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/5.png" alt="5" /></p>

<p>Realizados todos estos pasos, nos quedaría enviar los ficheros de configuración del servidor hacia el cliente. Por ello, (y para no caer en el desastre de no tener localizados los ficheros de configuración) vamos a crear un directorio en el que almacenarlos.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Creamos el directorio</span>
<span class="nb">mkdir</span> /etc/openvpn/VPNClient1

<span class="c">#Copiamos los ficheros</span>
<span class="nb">cp</span> <span class="nt">-rp</span> /etc/openvpn/easy-rsa/pki<span class="o">{</span>ca.crt,issued/VPNClient1.crt,private/VPNClient1.key<span class="o">}</span>

<span class="c">#Cambiamos los propietarios</span>
<span class="nb">chown</span> <span class="nt">-R</span> vagrant: /etc/openvpn/VPNClient1/

<span class="c">#Enviamos por scp los ficheros al cliente</span>
scp <span class="nt">-r</span> /home/vagrant/VPNClient1 vagrant@192.168.10.11:
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/6.png" alt="6" /></p>

<p><img src="/assets/images/vpn/A/7.png" alt="7" /></p>

<p>Nos dirigimos al servidor y creamos el fichero de configuración con el que configuraremos (valga la redundancia), el tunel VPN.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/openvpn/server/server.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Configuracion del servidor</span>

<span class="c">#Puerto de escucha, protocolo y dispositivo</span>
port 1194
proto udp
dev tun

<span class="c">#Autenticacion</span>
ca /etc/openvpn/easy-rsa/pki/ca.crt
cert /etc/openvpn/easy-rsa/pki/issued/server.crt
key /etc/openvpn/easy-rsa/pki/private/server.key
dh /etc/openvpn/easy-rsa/pki/dh.pem

<span class="c">#Topologia de red</span>
topology subnet

server 10.99.99.0 255.255.255.0
ifconfig-pool-persist /var/log/openvpn/ipp.txt

<span class="c">#Ruta hacia el cliente</span>
push <span class="s2">"route 192.168.11.0 255.255.255.0"</span>


keepalive 10 120
cipher AES-256-CBC
persist-key
persist-tun
status /var/log/openvpn/openvpn-status.log
verb 3
explicit-exit-notify 1
</code></pre></div></div>

<p>Tras toda esta configuración, vamos a habilitar el servicio de OpenVPN y a reiniciar el servicio.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> openvpn-server@server
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/8.png" alt="8" /></p>

<h2 id="configuración-del-cliente">Configuración del cliente</h2>

<p>Ahora en nuestro VPNClient1 vamos a configurar el cliente, y empezaríamos instalando el paquete de OpenVPN y traspasamos los ficheros de configuración del servidor.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>openvpn
<span class="nt">---</span>
<span class="nb">mv </span>VPNClient1 /etc/openvpn/client/
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/9.png" alt="9" /></p>

<p>Será necesario que cambiemos el propietario de los ficheros de configuración y, como hicimos en <code class="language-plaintext highlighter-rouge">VPNServer</code>, crearemos el fichero de configuración del cliente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Cambiamos el propietario</span>
<span class="nb">chown </span>root: /etc//openvpn/client/<span class="k">*</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/openvpn/server/client1.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Configuracion del cliente</span>

<span class="c">#Puerto de escucha, protocolo y dispositivo</span>
client
dev tun
proto udp

<span class="c">#Autenticacion</span>
remote 192.168.10.10 1194
resolv-retry infinite
nobind
persist-key
persist-tun

<span class="c">#Autenticacion</span>
ca /etc/openvpn/client/ca.crt
cert /etc/openvpn/client/VPNClient1.crt
key /etc/openvpn/client/VPNClient1.key

<span class="c">#Topologia de red</span>
remote-cert-tls server
cipher AES-256-CBC
verb 3
</code></pre></div></div>

<p>Habilitamos el servicio de OpenVPN y lo reiniciamos.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> openvpn-client@client1
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/10.png" alt="10" /></p>

<p>Como podemos ver en las siguientes imágenes, el tunel está creado y funcionando.</p>

<p><img src="/assets/images/vpn/A/11.png" alt="11" /></p>

<p>Por último, vamos a cambiar la ruta por defecto de nuestro cliente interno para que pueda usar el servidor como puerta de enlace.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route del default
ip route add default via 192.168.11.10
</code></pre></div></div>

<p>En las imágenes siguientes podemos ver que el cliente tiene acceso a Internet, y el servidor tiene acceso a la red interna del cliente.</p>

<p><img src="/assets/images/vpn/A/12.png" alt="12" /></p>

<h2 id="conclusiones">Conclusiones</h2>

<p>En este ejercicio hemos configurado un servidor OpenVPN, y hemos creado un cliente que se conecta a él. El cliente tiene acceso a Internet, y el servidor tiene acceso a la red interna del cliente.</p>

<p>Es importante destacar que, en este ejercicio, hemos utilizado certificados digitales para la autenticación de los extremos. Esto es debido a que, en la práctica, es la forma más segura de autenticar los extremos de la VPN.</p>

<p>También es importante destacar que, en este ejercicio, hemos utilizado una topología de red en subredes, en la que cada extremo de la VPN tiene una dirección IP propia. Esto es debido a que es la forma más segura de configurar la VPN.</p>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Qué es una VPN y para qué sirve]]></summary></entry><entry><title type="html">Despliegue de aplicaciones Java</title><link href="/iaw/2023/01/09/java-cms.html" rel="alternate" type="text/html" title="Despliegue de aplicaciones Java" /><published>2023-01-09T12:47:17+01:00</published><updated>2023-01-09T12:47:17+01:00</updated><id>/iaw/2023/01/09/java-cms</id><content type="html" xml:base="/iaw/2023/01/09/java-cms.html"><![CDATA[<p>En este post vamos a realizar el despliegue de una aplicación Java en nuestro VPS. Para ello, vamos a utilizar el servidor web Apache Tomcat.</p>

<h1 id="instalación-de-tomcat">Instalación de Tomcat</h1>

<p>Para instalar Tomcat, vamos a utilizar el gestor de paquetes de Debian, <code class="language-plaintext highlighter-rouge">apt-get</code>. Para ello, vamos a ejecutar el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>tomcat9
</code></pre></div></div>

<h2 id="tarea-1-desarrollo-y-despliegue-de-una-aplicación-java">Tarea 1: Desarrollo y despliegue de una aplicación Java</h2>

<p>De forma similar a lo que hemos hecho el <a href="https://sysmaria.netlify.app/iaw/2022/12/28/java-simple.html">despliegue simple</a>, despliegue de forma manual la aplicación Java que encontrarás en <a href="https://github.com/josedom24/rock-paper-scissors">siguiente repositorio</a>.</p>

<ul>
  <li>
    <p>Instalamos git</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>git
</code></pre></div>    </div>
  </li>
  <li>
    <p>Clonamos el repositorio</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git clone https://github.com/josedom24/rock-paper-scissors.git
</code></pre></div>    </div>
  </li>
  <li>
    <p>Nos dirigimos al directorio que se ha creado al clonar el repositorio y ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  mvn package
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>NOTA</strong>: Lo puedes realizar en el mismo escenario en el que hemos realizado este <a href="https://sysmaria.netlify.app/iaw/2023/01/09/java-simple.html">taller</a></p>

<ul>
  <li>
    <p>Nos transferimos el fichero generado en <code class="language-plaintext highlighter-rouge">/target</code> a nuestra máquina local.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  scp <span class="nt">-r</span> roshambo.war maria@172.20.10.8:/home/maria/Documentos
</code></pre></div>    </div>
  </li>
  <li>
    <p>Abrimos en nuestro navegador el manager de tomcat, que en mi caso se encuentra en <code class="language-plaintext highlighter-rouge">http://192.168.122.93:8080/manager/html/</code>, nos dirigimos a la pestaña <code class="language-plaintext highlighter-rouge">WAR file to deploy</code> y seleccionamos el fichero que hemos transferido.</p>

    <p><img src="/assets/images/despliegue-java/1.png" alt="1" /></p>
  </li>
  <li>
    <p>Una vez desplegada, podemos ver que la aplicación java funciona correctamente.</p>

    <p><img src="/assets/images/despliegue-java/2.png" alt="2" /></p>
  </li>
</ul>

<h2 id="tarea-2-despliegue-de-un-cms-java">Tarea 2: Despliegue de un CMS Java</h2>

<ul>
  <li>
    <p>Nos descargamos el <a href="https://cloud.josedomingo.org/index.php/s/cwMj6NAZ4fNMoRA">fichero.war</a></p>
  </li>
  <li>
    <p>Instalamos MySQL y los configuramos de la siguiente manera:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>mariadb-server
</code></pre></div>    </div>

    <p>Creamos el usuario:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  mysql <span class="nt">-u</span> root <span class="nt">-p</span>
  <span class="nt">----</span>
  CREATE USER <span class="s1">'java'</span>@<span class="s1">'localhost'</span> IDENTIFIED BY <span class="s1">'admin'</span><span class="p">;</span>
  GRANT ALL PRIVILEGES ON <span class="k">*</span> <span class="nb">.</span> <span class="k">*</span> TO <span class="s1">'java'</span>@<span class="s1">'localhost'</span> WITH GRANT OPTION<span class="p">;</span>
  FLUSH PRIVILEGES<span class="p">;</span>
  EXIT<span class="p">;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/despliegue-java/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Movemos el fichero.war a la carpeta <code class="language-plaintext highlighter-rouge">/var/lib/tomcat9/webapps/</code>. Como podemos ver en la siguiente imagen, en la tabla de aplicaciones, nos aparece nuestra aplicación <code class="language-plaintext highlighter-rouge">CMS</code>.</p>

    <p><img src="/assets/images/despliegue-java/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Una vez comrobado esto, en nuestro navegador accedemos a <code class="language-plaintext highlighter-rouge">http://&lt;ip-máquina&gt;:8080/opencms/setup/</code></p>

    <p><img src="/assets/images/despliegue-java/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Y procedemos con la instalación:</p>

    <p><img src="/assets/images/despliegue-java/6.png" alt="6" /></p>

    <p><img src="/assets/images/despliegue-java/7.png" alt="7" /></p>

    <p><img src="/assets/images/despliegue-java/8.png" alt="8" /></p>

    <p><img src="/assets/images/despliegue-java/9.png" alt="9" /></p>

    <p><img src="/assets/images/despliegue-java/10.png" alt="10" /></p>
  </li>
  <li>
    <p>Tras toda la instalación, nos aparecerá la siguiente pantalla:</p>

    <p><img src="/assets/images/despliegue-java/11.png" alt="11" /></p>
  </li>
</ul>

<h3 id="modificación-de-opencms">Modificación de OpenCms</h3>

<p>En mi caso le he cambiado el fondo de la página principal, eltítulo y el subtítulo. Para realizarlo, debemos conectarnos como usuario <code class="language-plaintext highlighter-rouge">Admin</code> y contraseña <code class="language-plaintext highlighter-rouge">admin</code>.</p>

<p>Una vez dentro, en las esquinas superiores derecha de cada contenido, nos aparecerá ⭕️ y al pulsar sobre él, nos aparecerá un menú desplegable con la opción <code class="language-plaintext highlighter-rouge">Edit</code>. Al pulsar sobre ella, nos aparecerá una ventana en la que podremos modificar el contenido.</p>

<p>Tras ello, en la esquina superior izquierda, nos aparecerá un 🔄 (Publish) y al pulsar sobre él, se publicará el contenido.</p>

<p><img src="/assets/images/despliegue-java/12.png" alt="12" /></p>

<p>En mi caso, ha quedado de la siguiente manera:</p>

<p><img src="/assets/images/despliegue-java/13.png" alt="13" /></p>

<h2 id="tarea-3-acceso-a-las-aplicaciones">Tarea 3: Acceso a las aplicaciones</h2>

<p>Cuando trabajamos con tomcat no se accedemos directamente al servidor de aplicaciones, se instala un proxy inverso que nos permita el acceso a las aplicaciones. Instala un proxy inverso para acceder a las aplicaciones con las siguientes urls:</p>

<ul>
  <li>
    <p>A la aplicación rock-paper-scissors se accede con la url <code class="language-plaintext highlighter-rouge">java.mariajesus.org/game</code>.</p>
  </li>
  <li>
    <p>A la aplicación OpenCMS se accede con la url <code class="language-plaintext highlighter-rouge">java.mariajesus.org</code>.</p>
  </li>
  <li>
    <p>Lo primero que realizaremos será la instalación de Nginx en nuestra máquina.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>nginx
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos el VirtualHost:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/nginx/sites-available/java.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Vamos a configurarlo de forma que al acceder a <code class="language-plaintext highlighter-rouge">java.mariajesus.org</code> nos redirija a la aplicación OpenCMS y al acceder a <code class="language-plaintext highlighter-rouge">java.mariajesus.org/game</code> nos redirija a la aplicación rock-paper-scissors.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  server <span class="o">{</span>
      listen 80<span class="p">;</span>
      listen <span class="o">[</span>::]:80<span class="p">;</span>

      index index.html index.htm index.nginx-debian.html<span class="p">;</span>

      server_name java.mariajesus.org<span class="p">;</span>

      location / <span class="o">{</span>
          proxy_pass http://localhost:8080/opencms/<span class="p">;</span>
          include proxy_params<span class="p">;</span>
      <span class="o">}</span>

      location /game <span class="o">{</span>
          proxy_pass http://localhost:8080/roshambo/<span class="p">;</span>
          include proxy_params<span class="p">;</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Realizamos el enlace simbólico:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/java.conf /etc/nginx/sites-enabled/java.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Reiniciamos el servicio:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl restart nginx
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/hosts</code> para que nos redirija a nuestra máquina:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/hosts
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  192.168.122.93 java.mariajesus.org
</code></pre></div>    </div>
  </li>
  <li>
    <p>Comprobamos que funciona correctamente:</p>

    <p><strong>OpenCMS</strong>
  <img src="/assets/images/despliegue-java/14.png" alt="14" /></p>

    <p><strong>Rock-Paper-Scissors</strong>
  <img src="/assets/images/despliegue-java/15.png" alt="15" /></p>
  </li>
</ul>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[En este post vamos a realizar el despliegue de una aplicación Java en nuestro VPS. Para ello, vamos a utilizar el servidor web Apache Tomcat.]]></summary></entry><entry><title type="html">Recolección centralizada de logs de sistema, mediante journald</title><link href="/aso/2023/01/04/journald.html" rel="alternate" type="text/html" title="Recolección centralizada de logs de sistema, mediante journald" /><published>2023-01-04T11:59:07+01:00</published><updated>2023-01-04T11:59:07+01:00</updated><id>/aso/2023/01/04/journald</id><content type="html" xml:base="/aso/2023/01/04/journald.html"><![CDATA[<p>En este post, vamos a implementar en nuestro <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a> un sistema de recolección de log mediante journald. Para ello debes, implementar un sistema de recolección de log mediante el paquete <code class="language-plaintext highlighter-rouge">systemd-journal-remote</code>, o similares.</p>

<table>
  <thead>
    <tr>
      <th>Máquina</th>
      <th>Distribución</th>
      <th>IP</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ALFA</td>
      <td>Debian 11</td>
      <td>172.22.201.46</td>
    </tr>
    <tr>
      <td>BETA</td>
      <td>Debian 11</td>
      <td>172.16.0.200</td>
    </tr>
    <tr>
      <td>CHARLIE</td>
      <td>Debian 11</td>
      <td>192.168.0.2</td>
    </tr>
    <tr>
      <td>DELTA</td>
      <td>Debian 11</td>
      <td>192.168.0.6</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/images/escenario/escenario.png" alt="Escenario" /></p>

<h2 id="preparación-del-escenario">Preparación del escenario</h2>

<p>Lo primero que deberemos hacer es instalar en cada una de las máquinas de nuestro escenario, incluyendo los contenedores de LXC, el paquete <code class="language-plaintext highlighter-rouge">systemd-journal-remote</code>:</p>

<ul>
  <li>
    <p>ALFA, CHARLIE y DELTA</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>systemd-journal-remote
</code></pre></div>    </div>
  </li>
  <li>
    <p>BRAVO</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dnf <span class="nb">install </span>systemd-journal-remote
</code></pre></div>    </div>
  </li>
</ul>

<p><img src="/assets/images/journald/1.png" alt="1" /></p>

<h2 id="configuración-de-journald-en-alfa">Configuración de journald EN <strong>ALFA</strong></h2>

<p>En esta máquina, vamos a configurar el servicio <code class="language-plaintext highlighter-rouge">systemd-journal-remote</code> para que recoga los logs de las demás máquinas. Al no hacer uso del https, vamos a desactivarlo en el fichero <code class="language-plaintext highlighter-rouge">/lib/systemd/system/systemd-journal-remote.service</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo grep</span> <span class="nt">--color</span> <span class="nt">-E</span> <span class="nt">--</span> <span class="s1">'--listen-http'</span> /lib/systemd/system/systemd-journal-remote.service
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s/--listen-https=-3/--listen-http=-3/g'</span> /lib/systemd/system/systemd-journal-remote.service
<span class="nb">sudo grep</span> <span class="nt">--color</span> <span class="nt">-E</span> <span class="nt">--</span> <span class="s1">'--listen-http'</span> /lib/systemd/system/systemd-journal-remote.service
</code></pre></div></div>

<p>Reiniciamos el demonio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
</code></pre></div></div>

<p>Activamos el servicio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable </span>systemd-journal-remote.service
systemctl <span class="nb">enable </span>systemd-journal-remote.socket
</code></pre></div></div>

<p>Una vez comprobado que nuestro servicio está activo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl status systemd-journal-remote.service
systemctl status systemd-journal-remote.socket
</code></pre></div></div>

<p><img src="/assets/images/journald/2.png" alt="2" /></p>

<p>Solo nos resta por cerciorarnos que el directorio <code class="language-plaintext highlighter-rouge">/var/log/journal/remote</code> exista y tenga los permisos adecuados. De no ser así, lo creamos y le damos los permisos adecuados:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /var/log/journal/remote
<span class="nb">chown </span>systemd-journal-remote:systemd-journal-remote /var/log/journal/remote
</code></pre></div></div>

<p><img src="/assets/images/journald/3.png" alt="3" /></p>

<p>Como podemos ver, en mi caso, el directorio existe y con los permisos que le pertenece.</p>

<h2 id="configuración-de-los-servidores-bravo-charlie-y-delta">Configuración de los servidores Bravo, Charlie y Delta</h2>

<p>Tras la configuración anterior, el siguiente paso es configurar los clientes para que envíen sus logs a la máquina ALFA. Por ello, vamos a crear un usuario en <code class="language-plaintext highlighter-rouge">bravo</code>, <code class="language-plaintext highlighter-rouge">charlie</code> y <code class="language-plaintext highlighter-rouge">delta</code> que se llame <code class="language-plaintext highlighter-rouge">systemd</code>, perteneciente al grupo <code class="language-plaintext highlighter-rouge">systemd-journal-upload</code> y al que le desactivaremos el login.</p>

<p>Algo a tener en cuenta será que el usuario <code class="language-plaintext highlighter-rouge">systemd</code> tendrá el directorio <code class="language-plaintext highlighter-rouge">home</code> en <code class="language-plaintext highlighter-rouge">/run/systemd</code>, por lo que deberemos crearlo y darle los permisos adecuados:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#BRAVO</span>
<span class="nb">sudo </span>adduser <span class="nt">--system</span> <span class="nt">--home-dir</span> /run/systemd <span class="nt">--no-create-home</span> <span class="nt">--user-group</span> systemd-journal-upload

<span class="c">#CHARLIE y DELTA</span>
<span class="nb">sudo </span>adduser <span class="nt">--system</span> <span class="nt">--home</span> /run/systemd <span class="nt">--no-create-home</span> <span class="nt">--disabled-login</span> <span class="nt">--group</span> systemd-journal-upload
</code></pre></div></div>

<p><img src="/assets/images/journald/4.png" alt="4" /></p>

<p>Una vez configurado el usuario en cada una de los clientes, vamos a configurar el fichero <code class="language-plaintext highlighter-rouge">/etc/systemd/journal-upload.conf</code> para que estos mismos clientes envíen sus logs a la máquina ALFA:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">URL</span><span class="o">=</span>http://alfa.mariajesus.gonzalonazareno.org:19532
</code></pre></div></div>

<p>Activamos el servicio <code class="language-plaintext highlighter-rouge">systemd-journal-upload</code> en cada uno de los clientes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#BRAVO, CHARLIE Y DELTA</span>
<span class="nb">sudo </span>systemctl restart systemd-journal-upload.service
</code></pre></div></div>

<p>Para finalizar, podemos comprobar que en el directorio <code class="language-plaintext highlighter-rouge">/var/log/journal/remote</code> de la máquina ALFA, se han creado los ficheros generados por los logs de los clientes:</p>

<p><img src="/assets/images/journald/5.png" alt="5" /></p>

<p>Haciendo uso del comando journalctl, podemos ver los logs de cada cliente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#BRAVO</span>
<span class="nb">sudo </span>journalctl <span class="nt">--file</span> /var/log/journal/remote/remote-172.16.0.200.journal
</code></pre></div></div>
<p><img src="/assets/images/journald/6.png" alt="6" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#CHARLIE</span>
<span class="nb">sudo </span>journalctl <span class="nt">--file</span> /var/log/journal/remote/remote-192.168.0.2.journal
</code></pre></div></div>

<p><img src="/assets/images/journald/7.png" alt="7" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#DELTA</span>
<span class="nb">sudo </span>journalctl <span class="nt">--file</span> /var/log/journal/remote/remote-192.168.0.3.journal
</code></pre></div></div>

<p><img src="/assets/images/journald/8.png" alt="8" /></p>]]></content><author><name></name></author><category term="ASO" /><summary type="html"><![CDATA[En este post, vamos a implementar en nuestro escenario un sistema de recolección de log mediante journald. Para ello debes, implementar un sistema de recolección de log mediante el paquete systemd-journal-remote, o similares.]]></summary></entry><entry><title type="html">Servidores Web, Base de Datos y DNS en nuestros escenario de OpenStack</title><link href="/hlc+sri/2023/01/03/dns.html" rel="alternate" type="text/html" title="Servidores Web, Base de Datos y DNS en nuestros escenario de OpenStack" /><published>2023-01-03T11:06:21+01:00</published><updated>2023-01-03T11:06:21+01:00</updated><id>/hlc+sri/2023/01/03/dns</id><content type="html" xml:base="/hlc+sri/2023/01/03/dns.html"><![CDATA[<p>Tomando como referencia el <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a>, vamos a realizar la instalación de un servidor web, un servidor de base de datos y un servidor DNS.</p>

<h1 id="servidor-dns">Servidor DNS</h1>
<p>Vamos a instalar un servidor dns en <code class="language-plaintext highlighter-rouge">charlie</code> que nos permita gestionar la resolución directa e inversa de nuestros nombres. Vamos a poseer un servidor dns con autoridad sobre un subdominio de nuestro dominio principal gonzalonazareno.org, que se llamará <code class="language-plaintext highlighter-rouge">mariajesus.gonzalonazareno.org</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>bind9
</code></pre></div></div>

<h2 id="creamos-las-vistas">Creamos las vistas</h2>

<p>Para ello, vamos a crear vistas pero, ¿qué es una vista? Una vista es una forma de organizar las zonas de resolución en un servidor DNS. Una vista es una zona de resolución que se puede configurar de forma independiente. Por ejemplo, podemos tener una vista para la resolución de los nombres de las máquinas de la red interna y otra vista para la resolución de los nombres de las máquinas de la red externa.</p>

<p>De esta forma, podemos tener un servidor DNS que resuelva los nombres de las máquinas de la red interna y otro servidor DNS que resuelva los nombres de las máquinas de la red externa.</p>

<p>En nuestro caso, vamos a crear cinco vistas:</p>

<ul>
  <li>Una vista que será la que tendrán <code class="language-plaintext highlighter-rouge">alfa</code>, <code class="language-plaintext highlighter-rouge">charlie</code> y <code class="language-plaintext highlighter-rouge">delta</code> con la IP <code class="language-plaintext highlighter-rouge">192.168.0.0</code>.</li>
  <li>Una vista DMZ que resuelva a bravo con la IP <code class="language-plaintext highlighter-rouge">172.16.0.0</code>.</li>
  <li>Una vista externa que se muestre al exterior con la IP <code class="language-plaintext highlighter-rouge">172.22.0.0</code>.</li>
  <li>Dos vistas para la resolución inversa, una para la vista interna y otra para la vista DMZ.</li>
</ul>

<p>Para realizar la configuración, debemos realizarla en el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.local</code>, quedando de la siguiente manera:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>view interna <span class="o">{</span>
    match-clients <span class="o">{</span> 192.168.0.0/24<span class="p">;</span> 127.0.0.1<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
    allow-recursion <span class="o">{</span> any<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
        zone <span class="s2">"mariajesus.gonzalonazareno.org"</span> 
        <span class="o">{</span>
               <span class="nb">type </span>master<span class="p">;</span>
               file <span class="s2">"db.interna.mariajesus.gonzalonazareno.org"</span><span class="p">;</span>
        <span class="o">}</span><span class="p">;</span>
        zone <span class="s2">"0.168.192.in-addr.arpa"</span> 
        <span class="o">{</span>
               <span class="nb">type </span>master<span class="p">;</span>
               file <span class="s2">"db.0.168.192"</span><span class="p">;</span>
        <span class="o">}</span><span class="p">;</span>
        zone <span class="s2">"16.172.in-addr.arpa"</span> 
        <span class="o">{</span>
               <span class="nb">type </span>master<span class="p">;</span>
               file <span class="s2">"db.16.172"</span><span class="p">;</span>
        <span class="o">}</span><span class="p">;</span>
        include <span class="s2">"/etc/bind/zones.rfc1918"</span><span class="p">;</span>
        include <span class="s2">"/etc/bind/named.conf.default-zones"</span><span class="p">;</span>
<span class="o">}</span><span class="p">;</span>

view externa <span class="o">{</span>
    match-clients <span class="o">{</span> 172.22.0.0/16<span class="p">;</span> 192.168.202.2<span class="p">;</span> 172.29.0.0/16<span class="p">;</span><span class="o">}</span><span class="p">;</span>
    allow-recursion <span class="o">{</span> any<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
        zone <span class="s2">"mariajesus.gonzalonazareno.org"</span> 
        <span class="o">{</span>
               <span class="nb">type </span>master<span class="p">;</span>
               file <span class="s2">"db.externa.mariajesus.gonzalonazareno.org"</span><span class="p">;</span>
        <span class="o">}</span><span class="p">;</span>
        include <span class="s2">"/etc/bind/zones.rfc1918"</span><span class="p">;</span>
        include <span class="s2">"/etc/bind/named.conf.default-zones"</span><span class="p">;</span>
<span class="o">}</span><span class="p">;</span>

view dmz <span class="o">{</span>
    match-clients <span class="o">{</span> 172.16.0.0/16<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
    allow-recursion <span class="o">{</span> any<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
        zone <span class="s2">"mariajesus.gonzalonazareno.org"</span>
        <span class="o">{</span>
               <span class="nb">type </span>master<span class="p">;</span>
               file <span class="s2">"db.dmz.mariajesus.gonzalonazareno.org"</span><span class="p">;</span>
        <span class="o">}</span><span class="p">;</span>
        zone <span class="s2">"16.172.in-addr.arpa"</span>
        <span class="o">{</span>
               <span class="nb">type </span>master<span class="p">;</span>
               file <span class="s2">"db.16.172"</span><span class="p">;</span>
        <span class="o">}</span><span class="p">;</span>
        zone <span class="s2">"0.168.192.in-addr.arpa"</span>
        <span class="o">{</span>
               <span class="nb">type </span>master<span class="p">;</span>
               file <span class="s2">"db.0.168.192"</span><span class="p">;</span>
        <span class="o">}</span><span class="p">;</span>
        include <span class="s2">"/etc/bind/zones.rfc1918"</span><span class="p">;</span>
        include <span class="s2">"/etc/bind/named.conf.default-zones"</span><span class="p">;</span>
<span class="o">}</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/1.png" alt="1" /></p>

<p>Y también modificaremos el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf</code> de la siguiente manera:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// This is the primary configuration file <span class="k">for </span>the BIND DNS server named.
//
// Please <span class="nb">read</span> /usr/share/doc/bind9/README.Debian.gz <span class="k">for </span>information on the
// structure of BIND configuration files <span class="k">in </span>Debian, <span class="k">*</span>BEFORE<span class="k">*</span> you customize
// this configuration file.
//
// If you are just adding zones, please <span class="k">do </span>that <span class="k">in</span> /etc/bind/named.conf.local

include <span class="s2">"/etc/bind/named.conf.options"</span><span class="p">;</span>
include <span class="s2">"/etc/bind/named.conf.local"</span><span class="p">;</span>
//include <span class="s2">"/etc/bind/named.conf.default-zones"</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/2.png" alt="2" /></p>

<h2 id="creamos-las-zonas">Creamos las zonas</h2>

<h3 id="zona-externa">Zona Externa</h3>

<p>Para crear la zona externa, debemos crear el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.externa.mariajesus.gonzalonazareno.org</code> con el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$TTL</span>    86400
@       IN      SOA     alfa.mariajesus.gonzalonazareno.org. root.mariajesus.gonzalonazareno.org. <span class="o">(</span>
                              1         <span class="p">;</span> Serial
                         604800         <span class="p">;</span> Refresh
                          86400         <span class="p">;</span> Retry
                        2419200         <span class="p">;</span> Expire
                          86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
<span class="p">;</span>
@       IN      NS      alfa.mariajesus.gonzalonazareno.org.

<span class="nv">$ORIGIN</span> mariajesus.gonzalonazareno.org.

alfa        IN      A       172.22.201.46
dns         IN      CNAME   alfa
www         IN      CNAME   alfa

</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/3.png" alt="3" /></p>

<h3 id="zona-interna">Zona Interna</h3>

<p>Para crear la zona interna, debemos crear el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.interna.mariajesus.gonzalonazareno.org</code> con el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$TTL</span>    86400
@       IN      SOA     charlie.mariajesus.gonzalonazareno.org. root.mariajesus.gonzalonazareno.org. <span class="o">(</span>
                              1         <span class="p">;</span> Serial
                         604800         <span class="p">;</span> Refresh
                          86400         <span class="p">;</span> Retry
                        2419200         <span class="p">;</span> Expire
                          86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
<span class="p">;</span>
@       IN      NS      charlie.mariajesus.gonzalonazareno.org.

<span class="nv">$ORIGIN</span> mariajesus.gonzalonazareno.org.

alfa        IN      A       192.168.0.1
bravo       IN      A       172.16.0.200
charlie     IN      A       192.168.0.2
delta       IN      A       192.168.0.3
bd          IN      CNAME   delta
dns         IN      CNAME   charlie
www         IN      CNAME   bravo
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/4.png" alt="4" /></p>

<h3 id="zona-dmz">Zona DMZ</h3>

<p>Para crear la zona DMZ, debemos crear el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.dmz.mariajesus.gonzalonazareno.org</code> con el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$TTL</span>    86400
@       IN      SOA     charlie.mariajesus.gonzalonazareno.org. root.mariajesus.gonzalonazareno.org. <span class="o">(</span>
                              1         <span class="p">;</span> Serial
                         604800         <span class="p">;</span> Refresh
                          86400         <span class="p">;</span> Retry
                        2419200         <span class="p">;</span> Expire
                          86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
<span class="p">;</span>
@       IN      NS      charlie.mariajesus.gonzalonazareno.org.

<span class="nv">$ORIGIN</span> mariajesus.gonzalonazareno.org.

alfa        IN      A       172.16.0.1
bravo       IN      A       172.16.0.200
charlie     IN      A       192.168.0.2
delta       IN      A       192.168.0.3
bd          IN      CNAME   delta
dns         IN      CNAME   charlie
www         IN      CNAME   bravo
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/5.png" alt="5" /></p>

<h3 id="zona-inversa-interna">Zona Inversa Interna</h3>

<p>Para crear la zona inversa interna, debemos crear el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.0.168.192</code> con el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$TTL</span>    86400
@       IN      SOA     charlie.mariajesus.gonzalonazareno.org. root.mariajesus.gonzalonazareno.org. <span class="o">(</span>
                              1         <span class="p">;</span> Serial
                         604800         <span class="p">;</span> Refresh
                          86400         <span class="p">;</span> Retry
                        2419200         <span class="p">;</span> Expire
                          86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
<span class="p">;</span>
@       IN      NS      charlie.mariajesus.gonzalonazareno.org.

<span class="nv">$ORIGIN</span> 0.168.192.in-addr.arpa.

1       IN      PTR     alfa.mariajesus.gonzalonazareno.org.
2       IN      PTR     charlie.mariajesus.gonzalonazareno.org.
3       IN      PTR     delta.mariajesus.gonzalonazareno.org.
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/6.png" alt="6" /></p>

<h3 id="zona-inversa-dmz">Zona Inversa DMZ</h3>

<p>Para crear la zona inversa interna, debemos crear el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.16.172</code> con el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$TTL</span>    86400
@       IN      SOA     charlie.mariajesus.gonzalonazareno.org. root.mariajesus.gonzalonazareno.org. <span class="o">(</span>
                              1         <span class="p">;</span> Serial
                         604800         <span class="p">;</span> Refresh
                          86400         <span class="p">;</span> Retry
                        2419200         <span class="p">;</span> Expire
                          86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
<span class="p">;</span>
@       IN      NS      charlie.mariajesus.gonzalonazareno.org.

<span class="nv">$ORIGIN</span> 16.172.in-addr.arpa.

1.0     IN      PTR     alfa.mariajesus.gonzalonazareno.org.
200.0   IN      PTR     bravo.mariajesus.gonzalonazareno.org.
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/7.png" alt="7" /></p>

<p>No debemos olvidar que también debemos modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/zones.rfc1918</code> para desactivar las zonas inversas por defecto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zone <span class="s2">"10.in-addr.arpa"</span>      <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>

//zone <span class="s2">"16.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"17.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"18.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"19.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"20.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"21.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
//zone <span class="s2">"22.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"23.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"24.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"25.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"26.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"27.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"28.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"29.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"30.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">"31.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/8.png" alt="8" /></p>

<h3 id="configuración-del-forwarder">Configuración del forwarder</h3>

<p>Vamos a modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.options</code> para que el servidor <code class="language-plaintext highlighter-rouge">papión</code> actúe como forwarder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       forwarders <span class="o">{</span>
              192.168.202.2<span class="p">;</span>
       <span class="o">}</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/9.png" alt="9" /></p>

<p>Reiniciamos el servicio bind9:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart bind9
</code></pre></div></div>

<h2 id="servidor-web">Servidor Web</h2>

<p>En <code class="language-plaintext highlighter-rouge">bravo</code> vamos a instalar un servidor web apache. Recuerda que es una máquina con rocky linux. Para ello, debemos ejecutar los siguientes comandos:</p>

<p>Recordemos que esta máquina es una máquina con un sistema Rocky Linux.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf <span class="nb">install </span>httpd php php-mysqlnd php-gd php-fpm
</code></pre></div></div>

<p>Iniciamos, habilitamos el servicio apache y comprobamos que está en ejecución:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>httpd
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>php-fpm
<span class="nb">sudo </span>systemctl status httpd
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/10.png" alt="10" /></p>

<h3 id="configuración-del-virtualhost">Configuración del VirtualHost</h3>

<ul>
  <li>Creamos los directorios <code class="language-plaintext highlighter-rouge">/etc/httpd/sites-available</code> y <code class="language-plaintext highlighter-rouge">/etc/httpd/sites-enabled</code>:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /etc/httpd/sites-available /etc/httpd/sites-enabled
</code></pre></div></div>

<ul>
  <li>Configuramos <code class="language-plaintext highlighter-rouge">/etc/httpd/conf/httpd.conf</code> para que cargue los ficheros de configuración de los VirtualHosts:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Añadimos esta línea al final del fichero</span>
IncludeOptional sites-enabled/<span class="k">*</span>.conf
</code></pre></div></div>

<ul>
  <li>Creamos el fichero <code class="language-plaintext highlighter-rouge">/etc/httpd/sites-available/www.mariajesus.gonzalonazareno.org.conf</code>. Recordemos también que debemos incluir la configuración para agregar php al servidor web, por lo que el fichero quedaría con el siguiente contenido:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;VirtualHost <span class="k">*</span>:80&gt;
    ServerName www.mariajesus.gonzalonazareno.org
    DocumentRoot /var/www/html/mariajesus
    ErrorLog /var/www/html/mariajesus/log/error.log
    CustomLog /var/www/html/mariajesus/log/access.log combined
    &lt;FilesMatch <span class="se">\.</span>php<span class="nv">$&gt;</span>
        SetHandler <span class="s2">"proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"</span>
    &lt;/FilesMatch&gt;
&lt;/VirtualHost&gt;
</code></pre></div></div>

<ul>
  <li>Creamos el enlace simbólico en <code class="language-plaintext highlighter-rouge">/etc/httpd/sites-enabled</code>:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/httpd/sites-available/www.mariajesus.gonzalonazareno.org.conf /etc/httpd/sites-enabled/www.mariajesus.gonzalonazareno.org.conf
</code></pre></div></div>

<ul>
  <li>Creamos el fichero <code class="language-plaintext highlighter-rouge">/var/www/html/mariajesus/info.php</code>:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nb">phpinfo</span><span class="p">();</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<ul>
  <li>Creamos el index.html en <code class="language-plaintext highlighter-rouge">/var/www/html/mariajesus</code>:</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">'utf-8'</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">'viewport'</span> <span class="na">content=</span><span class="s">'width=device-width, initial-scale=1'</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>www.mariajesus.gonzalonazareno.org<span class="nt">&lt;/title&gt;</span>
       <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
      <span class="o">/*&lt;![</span><span class="nt">CDATA</span><span class="o">[*/</span>

            <span class="nt">html</span> <span class="p">{</span>
             <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
             <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
           <span class="p">}</span>  
             <span class="nt">body</span> <span class="p">{</span>
       <span class="nl">background</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">20</span><span class="p">,</span><span class="m">72</span><span class="p">,</span><span class="m">50</span><span class="p">);</span>
       <span class="nl">background</span><span class="p">:</span> <span class="n">-moz-linear-gradient</span><span class="p">(</span><span class="m">180deg</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="m">43</span><span class="p">,</span><span class="m">70</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">30%</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">90%</span><span class="p">)</span>  <span class="p">;</span>
       <span class="nl">background</span><span class="p">:</span> <span class="n">-webkit-linear-gradient</span><span class="p">(</span><span class="m">180deg</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="m">43</span><span class="p">,</span><span class="m">70</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">30%</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">90%</span><span class="p">)</span> <span class="p">;</span>
       <span class="nl">background</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span><span class="m">180deg</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="m">43</span><span class="p">,</span><span class="m">70</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">30%</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">90%</span><span class="p">);</span>
       <span class="nl">background-repeat</span><span class="p">:</span> <span class="nb">no-repeat</span><span class="p">;</span>
       <span class="nl">background-attachment</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
       <span class="nl">filter</span><span class="p">:</span> <span class="n">progid</span><span class="p">:</span><span class="n">DXImageTransform</span><span class="p">.</span><span class="n">Microsoft</span><span class="p">.</span><span class="n">gradient</span><span class="p">(</span><span class="n">startColorstr</span><span class="err">=</span><span class="s1">"#3c6eb4"</span><span class="p">,</span><span class="n">endColorstr</span><span class="err">=</span><span class="s1">"#3c95b4"</span><span class="p">,</span><span class="n">GradientType</span><span class="err">=</span><span class="m">1</span><span class="p">);</span> 
             <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
             <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.9em</span><span class="p">;</span>
             <span class="nl">font-weight</span><span class="p">:</span> <span class="m">400</span><span class="p">;</span>
             <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Montserrat'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
             <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
             <span class="nl">padding</span><span class="p">:</span> <span class="m">10em</span> <span class="m">6em</span> <span class="m">10em</span> <span class="m">6em</span><span class="p">;</span>
             <span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>      
           <span class="p">}</span>
                   <span class="nt">h1</span> <span class="p">{</span>
         <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
         <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
         <span class="nl">padding</span><span class="p">:</span> <span class="m">0.6em</span> <span class="m">2em</span> <span class="m">0.4em</span><span class="p">;</span>
         <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
         <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
         <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Montserrat'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
         <span class="nl">font-size</span><span class="p">:</span> <span class="m">2em</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="nt">h1</span> <span class="nt">strong</span> <span class="p">{</span>
         <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bolder</span><span class="p">;</span>
         <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Montserrat'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="nt">h2</span> <span class="p">{</span>
         <span class="nl">font-size</span><span class="p">:</span> <span class="m">1.5em</span><span class="p">;</span>
         <span class="nl">font-weight</span><span class="p">:</span><span class="nb">bold</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nc">.title</span> <span class="p">{</span>
         <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
         <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
         <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
         <span class="nl">float</span><span class="p">:</span> <span class="nb">right</span><span class="p">;</span>
         <span class="nl">width</span><span class="p">:</span> <span class="m">150px</span><span class="p">;</span>
         <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
         <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span> <span class="m">0</span> <span class="m">10px</span> <span class="m">0</span><span class="p">;</span>
         <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nc">.description</span> <span class="p">{</span>
         <span class="nl">padding</span><span class="p">:</span> <span class="m">45px</span> <span class="m">10px</span> <span class="m">5px</span> <span class="m">10px</span><span class="p">;</span>
         <span class="nl">clear</span><span class="p">:</span> <span class="nb">right</span><span class="p">;</span>
         <span class="nl">padding</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nc">.section</span> <span class="p">{</span>
         <span class="nl">padding-left</span><span class="p">:</span> <span class="m">3%</span><span class="p">;</span>
        <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nt">img</span> <span class="p">{</span>
               <span class="nl">padding</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
         <span class="nl">margin</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="nt">a</span><span class="nd">:hover</span> <span class="nt">img</span> <span class="p">{</span>
         <span class="nl">padding</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
         <span class="nl">margin</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nd">:link</span> <span class="p">{</span>
         <span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">199</span><span class="p">,</span> <span class="m">252</span><span class="p">,</span> <span class="m">77</span><span class="p">);</span>
         <span class="nl">text-shadow</span><span class="p">:</span>
       <span class="p">}</span>
       <span class="nd">:visited</span> <span class="p">{</span>
         <span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">122</span><span class="p">,</span> <span class="m">206</span><span class="p">,</span> <span class="m">255</span><span class="p">);</span>
       <span class="p">}</span>
       <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
         <span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">16</span><span class="p">,</span> <span class="m">44</span><span class="p">,</span> <span class="m">122</span><span class="p">);</span>
       <span class="p">}</span>
       <span class="nc">.row</span> <span class="p">{</span>
         <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
         <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">10px</span> <span class="m">0</span> <span class="m">10px</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nt">footer</span> <span class="p">{</span>
         <span class="nl">padding-top</span><span class="p">:</span> <span class="m">6em</span><span class="p">;</span>
         <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">6em</span><span class="p">;</span>
         <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
         <span class="nl">font-size</span><span class="p">:</span> <span class="nb">xx-small</span><span class="p">;</span>
         <span class="nl">overflow</span><span class="p">:</span><span class="nb">hidden</span><span class="p">;</span>
         <span class="nl">clear</span><span class="p">:</span> <span class="nb">both</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nc">.summary</span> <span class="p">{</span>
         <span class="nl">font-size</span><span class="p">:</span> <span class="m">140%</span><span class="p">;</span>
         <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nf">#rocky-poweredby</span> <span class="nt">img</span> <span class="p">{</span>
         <span class="nl">margin-left</span><span class="p">:</span> <span class="m">-10px</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="nf">#logos</span> <span class="nt">img</span> <span class="p">{</span>
         <span class="nl">vertical-align</span><span class="p">:</span> <span class="nb">top</span><span class="p">;</span>
       <span class="p">}</span>
             <span class="c">/* Desktop  View Options */</span>
             <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span>  <span class="p">{</span>
               <span class="nt">body</span> <span class="p">{</span>
           <span class="nl">padding</span><span class="p">:</span> <span class="m">10em</span> <span class="m">20%</span> <span class="cp">!important</span><span class="p">;</span>
         <span class="p">}</span>
               <span class="nc">.col-md-1</span><span class="o">,</span> <span class="nc">.col-md-2</span><span class="o">,</span> <span class="nc">.col-md-3</span><span class="o">,</span> <span class="nc">.col-md-4</span><span class="o">,</span> <span class="nc">.col-md-5</span><span class="o">,</span> <span class="nc">.col-md-6</span><span class="o">,</span>
         <span class="nc">.col-md-7</span><span class="o">,</span> <span class="nc">.col-md-8</span><span class="o">,</span> <span class="nc">.col-md-9</span><span class="o">,</span> <span class="nc">.col-md-10</span><span class="o">,</span> <span class="nc">.col-md-11</span><span class="o">,</span> <span class="nc">.col-md-12</span> <span class="p">{</span>
           <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
         <span class="p">}</span>
               <span class="nc">.col-md-1</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">8.33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-2</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">16.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-3</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">25%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-4</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-5</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">41.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-6</span> <span class="p">{</span>
           <span class="nl">border-left</span><span class="p">:</span><span class="m">3px</span> <span class="p">;</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
                     <span class="p">}</span>
         <span class="nc">.col-md-7</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">58.33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-8</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">66.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-9</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">74.99%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-10</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">83.33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-11</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">91.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-md-12</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
         <span class="p">}</span>
       <span class="p">}</span>
             <span class="c">/* Mobile View Options */</span>
       <span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">767px</span><span class="p">)</span> <span class="p">{</span>
         <span class="nc">.col-sm-1</span><span class="o">,</span> <span class="nc">.col-sm-2</span><span class="o">,</span> <span class="nc">.col-sm-3</span><span class="o">,</span> <span class="nc">.col-sm-4</span><span class="o">,</span> <span class="nc">.col-sm-5</span><span class="o">,</span> <span class="nc">.col-sm-6</span><span class="o">,</span>
         <span class="nc">.col-sm-7</span><span class="o">,</span> <span class="nc">.col-sm-8</span><span class="o">,</span> <span class="nc">.col-sm-9</span><span class="o">,</span> <span class="nc">.col-sm-10</span><span class="o">,</span> <span class="nc">.col-sm-11</span><span class="o">,</span> <span class="nc">.col-sm-12</span> <span class="p">{</span>
           <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
         <span class="p">}</span>
               <span class="nc">.col-sm-1</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">8.33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-2</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">16.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-3</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">25%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-4</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-5</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">41.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-6</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-7</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">58.33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-8</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">66.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-9</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">74.99%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-10</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">83.33%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-11</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">91.66%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nc">.col-sm-12</span> <span class="p">{</span>
           <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nt">h1</span> <span class="p">{</span>
           <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="cp">!important</span><span class="p">;</span>
         <span class="p">}</span>
       <span class="p">}</span>
             <span class="nt">&lt;/style&gt;</span>
       <span class="nt">&lt;/head&gt;</span>
       <span class="nt">&lt;body&gt;</span>
              <span class="nt">&lt;h1&gt;</span>¡Bienvenid@ a la web!<span class="nt">&lt;/h1&gt;</span>
              <span class="nt">&lt;h2&gt;</span>Esta es una web de prueba en Rocky Linux <span class="nt">&lt;/h2&gt;</span>
              <span class="nt">&lt;p&gt;</span>Podemos comprobar la información de este sitio web de forma más detallada en <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"info.php"</span><span class="nt">&gt;</span>info.php<span class="nt">&lt;/a&gt;</span>.<span class="nt">&lt;/p&gt;</span>
       <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><strong>IMPORTANTE</strong></p>

<p>Estamos ante un escenario con una máquina Rocky Linux 9, por lo que debemos hacer una modificación en el fichero <code class="language-plaintext highlighter-rouge">/etc/sysconfig/selinux</code> para que el servidor web funcione correctamente. Tras ello, reiniciamos la máquina.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SELINUX</span><span class="o">=</span>diabled
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/11.png" alt="11" /></p>

<p><img src="/assets/images/dns-escenario/12.png" alt="12" /></p>

<h2 id="servidor-de-base-de-datos">Servidor de Base de Datos</h2>

<p>En <code class="language-plaintext highlighter-rouge">delta</code> vamos a instalar un servidor de base de datos mariajesusdb (<code class="language-plaintext highlighter-rouge">bd.mariajesus.gonzalonazareno.org</code>). A este seervidor de base de datos se debe permitir el acceso desde todas las máquinas del escenario.</p>

<h3 id="instalación-y-configuración-remota-de-mariadb">Instalación y configuración remota de MariaDB</h3>

<ul>
  <li>Instalamos el servidor de base de datos, en este caso MariaDB.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>mariadb-server
</code></pre></div></div>

<ul>
  <li>Configuramos MariaDB para conectarnos de forma remota.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!
In order to log into MariaDB to secure it, we ll need the current password <span class="k">for </span>the root user. If you ve just installed MariaDB, and you haven t <span class="nb">set </span>the root password yet, the password will be blank, so you should just press enter here.
Enter current password <span class="k">for </span>root <span class="o">(</span>enter <span class="k">for </span>none<span class="o">)</span>:<span class="k">********</span>
OK, successfully used password, moving on...
Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation.
You already have a root password <span class="nb">set</span>, so you can safely answer <span class="s1">'n'</span><span class="nb">.</span>
Change the root password? <span class="o">[</span>Y/n] Y
New password:<span class="k">********</span>
Re-enter new password:<span class="k">********</span>
Password updated successfully!
Reloading privilege tables..
 ... Success!
By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created <span class="k">for </span>them. This is intended only <span class="k">for </span>testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment.
Remove anonymous <span class="nb">users</span>? <span class="o">[</span>Y/n] Y
 ... Success!
Normally, root should only be allowed to connect from localhost. This ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? <span class="o">[</span>Y/n] Y
 ... Success!
By default, MariaDB comes with a database named <span class="nb">test </span>that anyone can access. This is also intended only <span class="k">for </span>testing, and should be removed before moving into a production environment.
Remove <span class="nb">test </span>database and access to it? <span class="o">[</span>Y/n] Y
 - Dropping <span class="nb">test </span>database...
 ... Success!
 - Removing privileges on <span class="nb">test </span>database...
 ... Success!
Reloading the privilege tables will ensure that all changes made so far will take effect immediately.
Reload privilege tables now? <span class="o">[</span>Y/n] Y
 ... Success!
Cleaning up...
All <span class="k">done</span><span class="o">!</span> If you ve completed all of the above steps, your MariaDB installation should now be secure.
Thanks <span class="k">for </span>using MariaDB!
</code></pre></div></div>

<ul>
  <li>Creamos el usuario:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span>
<span class="nt">----</span>
CREATE USER <span class="s1">'mariajesus'</span>@<span class="s1">'%'</span> IDENTIFIED BY <span class="s1">'admin'</span><span class="p">;</span>
GRANT ALL PRIVILEGES ON <span class="k">*</span>.<span class="k">*</span> TO <span class="s1">'mariajesus'</span>@<span class="s1">'%'</span><span class="p">;</span>
FLUSH PRIVILEGES<span class="p">;</span>
<span class="nb">exit</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/13.png" alt="13" /></p>

<ul>
  <li>Habilitamos el acceso remoto a la base de datos modificando el fichero <code class="language-plaintext highlighter-rouge">/etc/mysql/mariadb.conf.d/50-server.cnf</code> y lo modificamos de la siguiente manera:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bind-address <span class="o">=</span> 0.0.0.0
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/14.png" alt="14" /></p>

<ul>
  <li>Reiniciamos el servicio de MariaDB y comprobamos su estado.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart mariadb
systemctl status mariadb
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/15.png" alt="15" /></p>

<h3 id="configuración-del-acceso-remoto-a-la-base-de-datos-desde-bravo">Configuración del acceso remoto a la base de datos desde <code class="language-plaintext highlighter-rouge">bravo</code></h3>

<ul>
  <li>Instalamos el cliente de MariaDB en <code class="language-plaintext highlighter-rouge">bravo</code>.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dnf <span class="nb">install </span>mariadb-server
</code></pre></div></div>

<ul>
  <li>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> donde pondremos la ip de <code class="language-plaintext highlighter-rouge">charlie</code> como servidor DNS.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nameserver 192.168.0.2
</code></pre></div></div>

<ul>
  <li>Comprobamos que podemos acceder a la base de datos desde <code class="language-plaintext highlighter-rouge">bravo</code>.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql - u mariajesus <span class="nt">-p</span> mariajesus <span class="nt">-h</span> bd <span class="nt">-p</span>
</code></pre></div></div>

<p><img src="/assets/images/dns-escenario/16.png" alt="16" /></p>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Tomando como referencia el escenario, vamos a realizar la instalación de un servidor web, un servidor de base de datos y un servidor DNS.]]></summary></entry><entry><title type="html">Despliegue de aplicaciones Java</title><link href="/iaw/2023/01/03/java.html" rel="alternate" type="text/html" title="Despliegue de aplicaciones Java" /><published>2023-01-03T11:06:21+01:00</published><updated>2023-01-03T11:06:21+01:00</updated><id>/iaw/2023/01/03/java</id><content type="html" xml:base="/iaw/2023/01/03/java.html"><![CDATA[<h2 id="tarea-1-desarrollo-y-despliegue-de-una-aplicación-java-simple">Tarea 1: Desarrollo y despliegue de una aplicación Java simple</h2>

<h3 id="preparamos-el-escenario">Preparamos el escenario</h3>

<ol>
  <li>
    <p>Habilitamos el puerto 8080 en el cortafuegos de la máquina virtual.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>ufw allow 8080
</code></pre></div>    </div>
  </li>
  <li>
    <p>Instalamos el servidor web Tomcat y el administrador web de Tomcat.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt <span class="nb">install </span>tomcat9 tomcat9-admin <span class="nt">-y</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/tomcat9/tomcat-users.xml</code> para añadir el usuario <code class="language-plaintext highlighter-rouge">admin</code> con contraseña <code class="language-plaintext highlighter-rouge">admin</code> y el rol <code class="language-plaintext highlighter-rouge">manager-gui</code>.</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;tomcat-users&gt;</span>
     <span class="nt">&lt;role</span> <span class="na">rolename=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
     <span class="nt">&lt;user</span> <span class="na">username=</span><span class="s">"admin"</span> <span class="na">password=</span><span class="s">"admin"</span> <span class="na">roles=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
 <span class="nt">&lt;/tomcat-users&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Reiniciamos el servicio Tomcat.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>systemctl restart tomcat9
</code></pre></div>    </div>
  </li>
  <li>
    <p>Instalamos Maven.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt <span class="nb">install </span>maven <span class="nt">-y</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Clonamos el repositorio de la aplicación Java.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git clone https://github.com/josedom24/rock-paper-scissors.git
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Tarea 1: Desarrollo y despliegue de una aplicación Java simple]]></summary></entry><entry><title type="html">Certificados digitales. HTTPS</title><link href="/seguridad/2023/01/02/Criptograf%C3%ADa3.html" rel="alternate" type="text/html" title="Certificados digitales. HTTPS" /><published>2023-01-02T16:45:16+01:00</published><updated>2023-01-02T16:45:16+01:00</updated><id>/seguridad/2023/01/02/Criptograf%C3%ADa3</id><content type="html" xml:base="/seguridad/2023/01/02/Criptograf%C3%ADa3.html"><![CDATA[<h2 id="certificado-digital-de-persona-física">Certificado digital de persona física</h2>

<p><img src="/assets/images/certificado/cert.png" alt="certificado" /></p>

<p>Un certificado digital es un documento electrónico que contiene información sobre la identidad de una persona física o jurídica, y que se utiliza para firmar documentos electrónicos. El certificado digital contiene información sobre la persona que lo solicita, como su nombre, apellidos, DNI, fecha de nacimiento, etc. Además, contiene información sobre la entidad que lo emite, como el nombre de la entidad, el CIF, la dirección, etc.</p>

<h3 id="tarea-1-instalación-del-certificado">Tarea 1: Instalación del certificado</h3>

<p><strong>NOTA</strong>: Para solicitar el certificado, podemos hacerlo a través de una acreditación presencial en una oficina de la FNMT o usando el DNI electrónico.</p>

<ol>
  <li>
    <p>Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito.</p>

    <ul>
      <li>
        <p>Instalamos el certificado en el navegador. Para ello, accedemos a la página de la FNMT y descargamos el certificado. Nos pedirá nuestro DNI, nuestro primer apellido y un código de validación que nos han mandado a nuestro correo, con el que hemos solicitado el certificado. Una vez descargado, lo instalamos en el navegador.</p>

        <p><img src="/assets/images/certificado/1.png" alt="1" /></p>
      </li>
      <li>
        <p>A continuación, tras aceptar los términos y condiciones, nos pedirá que introduzcamos la contraseña que hemos establecido al solicitar el certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo.</p>

        <p><img src="/assets/images/certificado/2.png" alt="2" /></p>
      </li>
      <li>
        <p>Tras la descarga, nos preguntará si queremos crear una copia de seguridad del certificado.</p>

        <p><img src="/assets/images/certificado/3.png" alt="3" /></p>
      </li>
      <li>
        <p>Finalmente, nos confirmará que la copia de seguridad se ha realizado correctamente.</p>

        <p><img src="/assets/images/certificado/4.png" alt="4" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Muestra una captura de pantalla donde se vea las preferencias del navegador donde se ve instalado tu certificado.</p>

    <ul>
      <li>Para ver las preferencias del navegador, accedemos a <code class="language-plaintext highlighter-rouge">Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados</code>. Se abrirá una ventana con todos los certificados instalados en nuestro navegador. En ella, podemos ver el certificado que hemos instalado.</li>
    </ul>

    <p><img src="/assets/images/certificado/5.png" alt="5" /></p>
  </li>
  <li>
    <p>¿Cómo puedes hacer una copia de tu certificado?¿Como vas a realizar la copia de seguridad de tu certificado?. Razona la respuesta.</p>

    <ul>
      <li>Para hacer una copia de seguridad de nuestro certificado, debemos dirigirnos a <code class="language-plaintext highlighter-rouge">Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados</code>. Se nos abrirá la misma ventana de la imagen anterior. Clicamos en el certificado que queremos hacer una copia de seguridad y pulsamos en “Hacer copia”. Se nos abrirá una ventana en la que nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos una contraseña para proteger nuestra copia de seguridad. Finalmente, tendremos nuestra copia de seguridad.</li>
    </ul>

    <p>En mi caso, he almacenado mi clave en un NAS privado, en un directorio cifrado con clave alfanumérica. De esta forma, si alguien accede a mi NAS, no podrá acceder a mi clave privada, ya que no conoce la clave de cifrado.</p>

    <p><img src="/assets/images/certificado/6.png" alt="6" /></p>
  </li>
  <li>
    <p>Investiga como exportar la clave pública de tu certificado.</p>

    <ul>
      <li>
        <p>Con la copia de seguridad que tenemos de nuestra clave, y en mi caso, teniendo acceso a mi NAS, tanto en local como por VPN, puedo exportar mi clave a otros dispositivos. En mi caso, he exportado mi clave a mi móvil, (teniedo este sistema operativo iOS).</p>
      </li>
      <li>
        <p>Para la comprobación, he instalado la aplicación de la DGT y poder tener mi documentación en mi dispositivo móvil.</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="tarea-2-validación-del-certificado">Tarea 2: Validación del certificado</h3>

<ol>
  <li>
    <p>Instala en tu ordenador el software autofirma y desde la página de VALIDe valida tu certificado. Muestra capturas de pantalla donde se comprueba la validación.</p>

    <ul>
      <li>
        <p>Para instalar autofirma, debemos dirigirnos a la página de autofirma y descargar el instalador. Una vez descargado, lo instalamos en nuestro ordenador.</p>
      </li>
      <li>
        <p>Una vez instalado, abrimos la aplicación y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo.</p>
      </li>
      <li>
        <p>Ingresamos en la página de VALIDe y seleccionamos la opción de <code class="language-plaintext highlighter-rouge">Validar Certificado</code></p>

        <p><img src="/assets/images/certificado/7.png" alt="7" /></p>
      </li>
      <li>
        <p>Al ser la primera vez, autorizamos a autofirma a acceder a nuestra clave privada.</p>

        <p><img src="/assets/images/certificado/8.png" alt="8" /></p>
      </li>
      <li>
        <p>Elegimos la clave que queremos validar, escribimos el captcha y pulsamos en <code class="language-plaintext highlighter-rouge">Validar</code></p>

        <p><img src="/assets/images/certificado/9.png" alt="9" /></p>
      </li>
      <li>
        <p>Como podemos ver, la clave es válida.</p>

        <p><img src="/assets/images/certificado/10.png" alt="10" /></p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="preparando-el-entorno-de-trabajo-en-debian">Preparando el entorno de trabajo en Debian</h3>

<p>Como anteriormente he realizado los ejercicios en Windows, a partir de ahora vamos a realizarlo desde Debian. Para ello, <code class="language-plaintext highlighter-rouge">sudo apt install libnss3-tools</code> para instalar Java y las herramientas de Mozilla. Una vez instalado, ejecutamos el fichero <code class="language-plaintext highlighter-rouge">.deb</code> de autofirma y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo.</p>

<h3 id="tarea-3-firma-electrónica">Tarea 3: Firma electrónica</h3>

<ol>
  <li>
    <p>Utilizando la página VALIDe y el programa autofirma, firma un documento con tu certificado y envíalo por correo a un compañero.</p>

    <ul>
      <li>
        <p>Creamos dos documentos de texto: uno para la comprobación de la página VALIDe y otro para la aplicación de autofirma.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola. Soy Maria. Esto es una prueba de VALIDe."</span> <span class="o">&gt;</span> valide.txt
  <span class="nb">echo</span> <span class="s2">"Hola. Soy Maria. Esto es una prueba de autofirma."</span> <span class="o">&gt;</span> autofirma.txt
</code></pre></div>        </div>
      </li>
      <li>
        <p>Una vez creados los documentos, los firmamos, uno con VALIDe y otro con autofirma.</p>

        <p><img src="/assets/images/certificado/11.png" alt="11" /></p>

        <p><img src="/assets/images/certificado/12.png" alt="12" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Tu debes recibir otro documento firmado por un compañero y utilizando las herramientas anteriores debes visualizar la firma <code class="language-plaintext highlighter-rouge">Visualizar Firma</code> y <code class="language-plaintext highlighter-rouge">Verificar Firma</code>.</p>

    <ul>
      <li>¿Puedes verificar la firma aunque no tengas la clave pública de tu compañero?
        <ul>
          <li>Si,debido a que la clave pública de mi compañero se adjunta en el fichero ya firmado, por lo que puedo verificar la firma.</li>
        </ul>
      </li>
      <li>¿Es necesario estar conectado a internet para hacer la validación de la firma?. Razona tus respuestas.
        <ul>
          <li>Para VALIDe si que es necesario estar conectado a internet, ya que es una página web. Para autofirma, no es necesario estar conectado a internet, ya que es una aplicación que se ejecuta en nuestro ordenador.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Entre dos compañeros, firmar los dos un documento, verificar la firma para comprobar que está firmado por los dos.</p>

    <p><img src="/assets/images/certificado/13.png" alt="13" /></p>

    <p><img src="/assets/images/certificado/14.png" alt="14" /></p>
  </li>
</ol>

<h3 id="tarea-4-autenticación">Tarea 4: Autenticación</h3>

<ol>
  <li>
    <p>Utilizando tu certificado accede a alguna página de la administración pública (cita médica, becas, puntos del carnet,…). Entrega capturas de pantalla donde se demuestre el acceso a ellas.</p>

    <ul>
      <li>
        <p>Accedemos a la web de la <a href="https://www.dgt.es/nuestros-servicios/permisos-de-conducir/tus-puntos-y-tus-permisos/consulta-y-certificado-de-puntos/">DGT</a> para verificar el funcionamiento de nuestro certificado digital accediendo a nuestro historial de puntos.</p>

        <p><img src="/assets/images/certificado/dgt1.png" alt="dgt" /></p>
      </li>
      <li>
        <p>Nos redigirá a una página donde podremos elegir entre los distintos tipos de acceso y elegimos <code class="language-plaintext highlighter-rouge">Cl@ave</code>.</p>

        <p><img src="/assets/images/certificado/dgt2.png" alt="dgt2" /></p>
      </li>
      <li>
        <p>El navegador, en mi caso, requiere de la aplicación de autofirma para poder acceder a la contraseña. Una vez introducida, nos redirige a la página de la DGT donde podemos ver nuestro historial de puntos.</p>

        <p><img src="/assets/images/certificado/dgt3.png" alt="dgt3" /></p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="https--ssl">HTTPS / SSL</h2>

<p><img src="/assets/images/certificado/https.png" alt="https" /></p>

<p><strong>NOTA</strong>: Vamos a realizar esta práctica en una web que se acceda con el nombre <code class="language-plaintext highlighter-rouge">maria.iesgn.org</code>.</p>

<p>Para realizar esta tarea, vamos a necesitar la colaboración de un compañero, ya que fimraré una Autoridad Certificadora y mi compañero la firmará, y viceversa.</p>

<p>Para ello, podemos hacer uso de los siguientes enlaces para buscar más información:</p>

<ul>
  <li><a href="https://www.phildev.net/ssl/">Phil’s X509/SSL Guide</a></li>
  <li><a href="https://gist.github.com/Soarez/9688998">How to setup your own CA with OpenSSL</a></li>
  <li><a href="https://blog.guillen.io/2018/09/29/crear-autoridad-certificadora-ca-y-certificados-autofirmados-en-linux/">Crear autoridad certificadora (CA) y certificados autofirmados en Linux</a></li>
</ul>

<h3 id="creamos-la-autoridad-certificadora">Creamos la Autoridad certificadora</h3>

<ol>
  <li>
    <p>Crear su autoridad certificadora (generar el certificado digital de la CA). Mostrar el fichero de configuración de la AC.</p>

    <ul>
      <li>
        <p>Creamos el directorio donde alojaremos todo lo necesario para la CA, dándole los permisos necesarios.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir </span>CA
  <span class="nb">cd </span>CA
  <span class="nb">mkdir </span>certs csr crl newcerts private 
  <span class="nb">chmod </span>700 private
  <span class="nb">touch </span>index.txt
  <span class="nb">touch </span>index.txt.attr
  <span class="nb">echo </span>1000 <span class="o">&gt;</span> serial
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos las variables de entorno donde definiremos los datos de configuración de la CA.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">countryName_default</span><span class="o">=</span><span class="s2">"ES"</span>
  <span class="nv">stateOrProvinceName_default</span><span class="o">=</span><span class="s2">"Sevilla"</span>
  <span class="nv">localityName_default</span><span class="o">=</span><span class="s2">"Dos Hermanas"</span>
  <span class="nv">organizationName_default</span><span class="o">=</span><span class="s2">"Maria"</span>
  <span class="nv">organizationalUnitName_default</span><span class="o">=</span><span class="s2">"ASIR2"</span>
  <span class="nv">emailAddress_default</span><span class="o">=</span><span class="s2">"mariajesus.alloza@outlook.es"</span>
  <span class="nv">DIR_CA</span><span class="o">=</span><span class="s2">"./"</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos el fichero de configuración.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">&gt;</span><span class="nv">$DIR_CA</span><span class="sh">/openssl.conf
  [ ca ]
  # man ca
  default_ca = CA_default

  [ CA_default ]
  # Directory and file locations.
  dir               = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">
  certs             = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">certs
  crl_dir           = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">crl
  new_certs_dir     = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">newcerts
  database          = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">index.txt
  serial            = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">serial
  RANDFILE          = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">private/.rand

  # The root key and root certificate.
  private_key       = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">private/private.key
  certificate       = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">certs/cacert.crt

  # For certificate revocation lists.
  crlnumber         = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">crlnumber
  crl               = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">crl/ca.crl.pem
  crl_extensions    = crl_ext
  default_crl_days  = 30

  # SHA-1 is deprecated, so use SHA-2 instead.
  default_md        = sha256

  name_opt          = ca_default
  cert_opt          = ca_default
  default_days      = 375
  preserve          = no
  policy            = policy_strict

  [ policy_strict ]
  # The root CA should only sign intermediate certificates that match.
  # See the POLICY FORMAT section of man ca.
  countryName             = match
  stateOrProvinceName     = match
  organizationName        = match
  organizationalUnitName  = optional
  commonName              = supplied
  emailAddress            = optional

  [ policy_loose ]
  # Allow the intermediate CA to sign a more diverse range of certificates.
  # See the POLICY FORMAT section of the ca man page.
  countryName             = optional
  stateOrProvinceName     = optional
  localityName            = optional
  organizationName        = optional
  organizationalUnitName  = optional
  commonName              = supplied
  emailAddress            = optional

  [ req ]
  # Options for the req tool (man req).
  default_bits        = 2048
  distinguished_name  = req_distinguished_name
  string_mask         = utf8only
  # SHA-1 is deprecated, so use SHA-2 instead.
  default_md          = sha256
  # Extension to add when the -x509 option is used.
  x509_extensions     = v3_ca
  # Extension for SANs
  req_extensions      = v3_req

  [ v3_req ]
  # Extensions to add to a certificate request
  # Before invoke openssl use: export SAN=DNS:value1,DNS:value2
  basicConstraints = CA:FALSE
  keyUsage = nonRepudiation, digitalSignature, keyEncipherment
  xxxsubjectAltNamexxx =

  [ req_distinguished_name ]
  # See &lt;https://en.wikipedia.org/wiki/Certificate_signing_request&gt;.
  countryName                     = Country Name (2 letter code)
  stateOrProvinceName             = State or Province Name
  localityName                    = Locality Name
  0.organizationName              = Organization Name
  organizationalUnitName          = Organizational Unit Name
  commonName                      = Common Name
  emailAddress                    = Email Address

  # Optionally, specify some defaults.
  countryName_default             = </span><span class="nv">$countryName_default</span><span class="sh">
  stateOrProvinceName_default     = </span><span class="nv">$stateOrProvinceName_default</span><span class="sh">
  localityName_default            = </span><span class="nv">$localityName_default</span><span class="sh">
  0.organizationName_default      = </span><span class="nv">$organizationName_default</span><span class="sh">
  organizationalUnitName_default  = </span><span class="nv">$organizationalUnitName_default</span><span class="sh">
  emailAddress_default            = </span><span class="nv">$emailAddress_default</span><span class="sh">

  [ v3_ca ]
  # Extensions for a typical CA (man x509v3_config).
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = critical, CA:true
  keyUsage = critical, digitalSignature, cRLSign, keyCertSign

  [ v3_intermediate_ca ]
  # Extensions for a typical intermediate CA (man x509v3_config).
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = critical, CA:true, pathlen:0
  keyUsage = critical, digitalSignature, cRLSign, keyCertSign

  [ usr_cert ]
  # Extensions for client certificates (man x509v3_config).
  basicConstraints = CA:FALSE
  nsCertType = client, email
  nsComment = "OpenSSL Generated Client Certificate"
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid,issuer
  keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
  extendedKeyUsage = clientAuth, emailProtection

  [ server_cert ]
  # Extensions for server certificates (man x509v3_config).
  basicConstraints = CA:FALSE
  nsCertType = server
  nsComment = "OpenSSL Generated Server Certificate"
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid,issuer:always
  keyUsage = critical, digitalSignature, keyEncipherment
  extendedKeyUsage = serverAuth

  [ crl_ext ]
  # Extension for CRLs (man x509v3_config).
  authorityKeyIdentifier=keyid:always

  [ ocsp ]
  # Extension for OCSP signing certificates (man ocsp).
  basicConstraints = CA:FALSE
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid,issuer
  keyUsage = critical, digitalSignature
  extendedKeyUsage = critical, OCSPSigning
</span><span class="no">  EOF
</span></code></pre></div>        </div>

        <ul>
          <li>Creamos tanto la clavecomoel certificado de a AC (autoridad de certificación) con el siguiente comando:</li>
        </ul>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">#Creación de la clave</span>
  openssl genrsa <span class="nt">-aes256</span> <span class="nt">-out</span> private/private.key 4096
  <span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s|xxxsubjectAltNamexxx =|subjectAltName = ${ENV::SAN}|g'</span> openssl.conf
  <span class="nv">URL</span><span class="o">=</span>juanjesus.iesgn.org
  <span class="nb">export </span><span class="nv">SAN</span><span class="o">=</span>DNS:<span class="nv">$URL</span>
        
  <span class="c">#Creación del certificado</span>
  openssl req <span class="nt">-config</span> openssl.conf <span class="nt">-key</span> private/private.key <span class="nt">-new</span> <span class="nt">-x509</span> <span class="nt">-days</span> 3650 <span class="nt">-sha256</span> <span class="nt">-extensions</span> v3_ca <span class="nt">-out</span> certs/cacert.crt
  <span class="nb">chmod </span>444 certs/cacert.crt
    
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Debe recibir el fichero CSR (Solicitud de Firmar un Certificado) de su compañero, debe firmarlo y enviar el certificado generado a su compañero.</p>

    <ul>
      <li>Mi compañero me envía mir fichero CSR, lo firmo y lo envío de vuelta.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">#Firmar el certificado</span>
 openssl ca <span class="nt">-config</span> openssl.conf <span class="nt">-extensions</span> v3_req <span class="nt">-days</span> 3650 <span class="nt">-notext</span> <span class="nt">-md</span> sha256 <span class="nt">-in</span> csr/juanjesus-mjca.csr <span class="nt">-out</span> certs/juanjesus-mjca.crt
</code></pre></div>    </div>
  </li>
  <li>
    <p>¿Qué otra información debes aportar a tu compañero para que éste configure de forma adecuada su servidor web con el certificado generado?</p>

    <ul>
      <li>Dentro de nuestro fichero <code class="language-plaintext highlighter-rouge">openssl.conf</code> nos encontraremos con los datos que nuestro compañero debe rellenar para configurar su servidor web, que son:
        <ul>
          <li><code class="language-plaintext highlighter-rouge">countryName</code></li>
          <li><code class="language-plaintext highlighter-rouge">stateOrProvinceName</code></li>
          <li><code class="language-plaintext highlighter-rouge">localityName</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="administramos-el-servidor-web">Administramos el servidor web</h3>

<h4 id="preparando-el-escenario">Preparando el escenario</h4>

<p>Para realizar este punto, deberemos crear un servidor apache, y configurarlo para que nos sirva una página web con https. Para ello, deberemos seguir los siguientes pasos:</p>

<ul>
  <li>
    <p>Instalamos el servidor apache:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>apache2
</code></pre></div>    </div>
  </li>
  <li>
    <p>Deshabilitamos el virtual host por defecto:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>a2dissite 000-default.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos un nuevo virtual host y su fichero de configuración:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo mkdir</span> /var/www/html/maria.iesgn.org
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos el fichero <code class="language-plaintext highlighter-rouge">index.html</code> dentro de la carpeta que hemos creado anteriormente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /var/www/html/maria.iesgn.org/index.html
</code></pre></div>    </div>
    <ul>
      <li>
        <p>Y dentro de este fichero, escribimos lo siguiente:</p>

        <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;!DOCTYPE html&gt;</span>
      <span class="nt">&lt;html&gt;</span>
          <span class="nt">&lt;head&gt;</span>
          <span class="nt">&lt;title&gt;</span>maria.iesgn.org<span class="nt">&lt;/title&gt;</span>
          <span class="nt">&lt;/head&gt;</span>
      <span class="nt">&lt;body&gt;</span>
          <span class="nt">&lt;h1&gt;</span>maria.iesgn.org<span class="nt">&lt;/h1&gt;</span>
          <span class="nt">&lt;p&gt;</span>Web de prueba para cripto 3 - HTTPS<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/body&gt;</span>
  <span class="nt">&lt;/html&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Habilitamos el nuevo virtual host y reiniciamos el servicio apache:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>a2ensite maria.iesgn.org.conf
  <span class="nb">sudo </span>systemctl restart apache2
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="empezamos">Empezamos</h4>

<ol>
  <li>
    <p>Crea una clave privada RSA de 4096 bits para identificar el servidor.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>openssl genrsa <span class="nt">-aes256</span> <span class="nt">-out</span> /etc/ssl/private/maria-priv.key 4096
 <span class="nb">sudo chmod </span>400 /etc/ssl/private/maria-priv.key
</code></pre></div>    </div>
  </li>
  <li>
    <p>Utiliza la clave anterior para generar un CSR, considerando que deseas acceder al servidor con el FQDN (<code class="language-plaintext highlighter-rouge">maria.iesgn.org</code>).</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>openssl req <span class="nt">-new</span> <span class="nt">-sha256</span> <span class="nt">-key</span> /etc/ssl/private/maria-priv.key <span class="nt">-out</span> maria.csr
</code></pre></div>    </div>
  </li>
  <li>
    <p>Envía la solicitud de firma a la entidad certificadora (su compañero). Recibe como respuesta un certificado X.509 para el servidor firmado y el certificado de la autoridad certificadora.</p>
  </li>
  <li>
    <p>Configura tu servidor web con https en el puerto 443, haciendo que las peticiones http se redireccionen a https (forzar https).</p>

    <ul>
      <li>
        <p>Modificamos el fichero de configuración:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;IfModule mod_ssl.c&gt;
      &lt;VirtualHost <span class="k">*</span>:443&gt;
          ServerName maria.iesgn.org
          DocumentRoot /var/www/html/maria.iesgn.org
          ErrorLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/error-maria.log
          CustomLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/access-maria.log combined

          SSLEngine on
          SSLCertificateFile /etc/ssl/certs/maria.crt
          SSLCertificateKeyFile /etc/ssl/private/maria-priv.key
          SSLCertificateChainFile /etc/ssl/certs/cacert.crt

          &lt;Directory /var/www/html/maria.iesgn.org&gt;
              Options Indexes FollowSymLinks
              AllowOverride None
              Require all granted
          &lt;/Directory&gt;
      &lt;/VirtualHost&gt;
  &lt;/IfModule&gt;
</code></pre></div>        </div>
      </li>
      <li>
        <p>Movemos los ficheros que hemos generado a la carpeta <code class="language-plaintext highlighter-rouge">/etc/ssl/certs</code> y le proporcionamos los permisos necesarios:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo mv </span>maria.crt /etc/ssl/certs/
  <span class="nb">sudo mv </span>cacert.crt /etc/ssl/certs/
  <span class="nb">sudo chown </span>root:root /etc/ssl/certs/maria.crt
  <span class="nb">sudo chown </span>root:root /etc/ssl/certs/cacert.crt
  <span class="nb">sudo chmod </span>644 /etc/ssl/certs/maria.crt
  <span class="nb">sudo chmod </span>644 /etc/ssl/certs/cacert.crt
</code></pre></div>        </div>
      </li>
      <li>
        <p>Habilitamos el módulo ssl y reiniciamos el servicio apache:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>a2enmod ssl
  <span class="nb">sudo </span>a2ensite ssl-maria.iesgn.org.conf
  <span class="nb">sudo </span>systemctl reload apache2
</code></pre></div>        </div>
      </li>
      <li>
        <p>Modificamos el fichero para que realice una redirección de http a https:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/apache2/sites-available/maria.iesgn.org.conf

  <span class="c">#Añadimos la siguiente línea:</span>
  Redirect 301 / https://maria.iesgn.org/
</code></pre></div>        </div>
      </li>
      <li>
        <p>Reiniciamos el servicio apache:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl reload apache2
</code></pre></div>        </div>
      </li>
      <li>
        <p>Comprobamos su funcionamiento:</p>

        <p><img src="/assets/images/certificado/15.png" alt="15" /></p>

        <p><img src="/assets/images/certificado/16.png" alt="16" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Instala ahora un servidor nginx, y realiza la misma configuración que anteriormente para que se sirva la página con HTTPS.</p>

    <ul>
      <li>
        <p>Deshabilitamos apache:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl disable <span class="nt">--now</span> apache2
</code></pre></div>        </div>
      </li>
      <li>
        <p>Instalamos el servidor nginx:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>nginx
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos el fichero de configuración dentro de la carpeta que hemos creado anteriormente:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /var/www/html/maria.iesgn.org/index.html
</code></pre></div>        </div>
        <ul>
          <li>
            <p>Y dentro de este fichero, escribimos lo siguiente:</p>

            <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  server {
      listen 80;
      listen [::]:80;
      server_name maria.iesgn.org;
      return 301 https://$server_name$request_uri;
  }

  server {
      listen 443 ssl http2;
      listen [::]:443 ssl http2;
      server_name maria.iesgn.org;

      ssl_certificate /etc/ssl/certs/maria.crt;
      ssl_certificate_key /etc/ssl/private/maria-priv.key;
      ssl_trusted_certificate /etc/ssl/certs/cacert.crt;

      root /var/www/html/maria.iesgn.org;
      index index.html;

      location / {
          try_files $uri $uri/ =404;
      }
  }
</code></pre></div>            </div>
          </li>
          <li>
            <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">index.html</code> que hemos creado anteriormente:</p>

            <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;!DOCTYPE html&gt;</span>
      <span class="nt">&lt;html&gt;</span>
          <span class="nt">&lt;head&gt;</span>
          <span class="nt">&lt;title&gt;</span>maria.iesgn.org<span class="nt">&lt;/title&gt;</span>
          <span class="nt">&lt;/head&gt;</span>
      <span class="nt">&lt;body&gt;</span>
          <span class="nt">&lt;h1&gt;</span>maria.iesgn.org<span class="nt">&lt;/h1&gt;</span>
          <span class="nt">&lt;p&gt;</span>Web de prueba para cripto 3 - HTTPS<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>PRUEBA NGINX<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/body&gt;</span>
  <span class="nt">&lt;/html&gt;</span>
</code></pre></div>            </div>
          </li>
          <li>
            <p>Realizamos la firma del certificado:</p>

            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>openssl rsa <span class="nt">-in</span> /etc/ssl/private/maria-priv.key <span class="nt">-out</span> /etc/ssl/private/maria-priv2.key
</code></pre></div>            </div>
          </li>
          <li>
            <p>Realizamos el enlace simbólico del fichero de configuración y reiniciamos el servicio nginx:</p>

            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/maria.iesgn.org.conf /etc/nginx/sites-enabled/
  <span class="nb">sudo </span>systemctl restart nginx
</code></pre></div>            </div>
          </li>
          <li>
            <p>Comprobamos que el servidor funciona correctamente:</p>

            <p><img src="/assets/images/certificado/17.png" alt="17" /></p>

            <p><img src="/assets/images/certificado/18.png" alt="18" /></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Certificado digital de persona física Un certificado digital es un documento electrónico que contiene información sobre la identidad de una persona física o jurídica, y que se utiliza para firmar documentos electrónicos. El certificado digital contiene información sobre la persona que lo solicita, como su nombre, apellidos, DNI, fecha de nacimiento, etc. Además, contiene información sobre la entidad que lo emite, como el nombre de la entidad, el CIF, la dirección, etc. Tarea 1: Instalación del certificado NOTA: Para solicitar el certificado, podemos hacerlo a través de una acreditación presencial en una oficina de la FNMT o usando el DNI electrónico. Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito. Instalamos el certificado en el navegador. Para ello, accedemos a la página de la FNMT y descargamos el certificado. Nos pedirá nuestro DNI, nuestro primer apellido y un código de validación que nos han mandado a nuestro correo, con el que hemos solicitado el certificado. Una vez descargado, lo instalamos en el navegador. A continuación, tras aceptar los términos y condiciones, nos pedirá que introduzcamos la contraseña que hemos establecido al solicitar el certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo. Tras la descarga, nos preguntará si queremos crear una copia de seguridad del certificado. Finalmente, nos confirmará que la copia de seguridad se ha realizado correctamente. Muestra una captura de pantalla donde se vea las preferencias del navegador donde se ve instalado tu certificado. Para ver las preferencias del navegador, accedemos a Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados. Se abrirá una ventana con todos los certificados instalados en nuestro navegador. En ella, podemos ver el certificado que hemos instalado. ¿Cómo puedes hacer una copia de tu certificado?¿Como vas a realizar la copia de seguridad de tu certificado?. Razona la respuesta. Para hacer una copia de seguridad de nuestro certificado, debemos dirigirnos a Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados. Se nos abrirá la misma ventana de la imagen anterior. Clicamos en el certificado que queremos hacer una copia de seguridad y pulsamos en “Hacer copia”. Se nos abrirá una ventana en la que nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos una contraseña para proteger nuestra copia de seguridad. Finalmente, tendremos nuestra copia de seguridad. En mi caso, he almacenado mi clave en un NAS privado, en un directorio cifrado con clave alfanumérica. De esta forma, si alguien accede a mi NAS, no podrá acceder a mi clave privada, ya que no conoce la clave de cifrado. Investiga como exportar la clave pública de tu certificado. Con la copia de seguridad que tenemos de nuestra clave, y en mi caso, teniendo acceso a mi NAS, tanto en local como por VPN, puedo exportar mi clave a otros dispositivos. En mi caso, he exportado mi clave a mi móvil, (teniedo este sistema operativo iOS). Para la comprobación, he instalado la aplicación de la DGT y poder tener mi documentación en mi dispositivo móvil. Tarea 2: Validación del certificado Instala en tu ordenador el software autofirma y desde la página de VALIDe valida tu certificado. Muestra capturas de pantalla donde se comprueba la validación. Para instalar autofirma, debemos dirigirnos a la página de autofirma y descargar el instalador. Una vez descargado, lo instalamos en nuestro ordenador. Una vez instalado, abrimos la aplicación y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo. Ingresamos en la página de VALIDe y seleccionamos la opción de Validar Certificado Al ser la primera vez, autorizamos a autofirma a acceder a nuestra clave privada. Elegimos la clave que queremos validar, escribimos el captcha y pulsamos en Validar Como podemos ver, la clave es válida. Preparando el entorno de trabajo en Debian Como anteriormente he realizado los ejercicios en Windows, a partir de ahora vamos a realizarlo desde Debian. Para ello, sudo apt install libnss3-tools para instalar Java y las herramientas de Mozilla. Una vez instalado, ejecutamos el fichero .deb de autofirma y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo. Tarea 3: Firma electrónica Utilizando la página VALIDe y el programa autofirma, firma un documento con tu certificado y envíalo por correo a un compañero. Creamos dos documentos de texto: uno para la comprobación de la página VALIDe y otro para la aplicación de autofirma. echo "Hola. Soy Maria. Esto es una prueba de VALIDe." &gt; valide.txt echo "Hola. Soy Maria. Esto es una prueba de autofirma." &gt; autofirma.txt Una vez creados los documentos, los firmamos, uno con VALIDe y otro con autofirma. Tu debes recibir otro documento firmado por un compañero y utilizando las herramientas anteriores debes visualizar la firma Visualizar Firma y Verificar Firma. ¿Puedes verificar la firma aunque no tengas la clave pública de tu compañero? Si,debido a que la clave pública de mi compañero se adjunta en el fichero ya firmado, por lo que puedo verificar la firma. ¿Es necesario estar conectado a internet para hacer la validación de la firma?. Razona tus respuestas. Para VALIDe si que es necesario estar conectado a internet, ya que es una página web. Para autofirma, no es necesario estar conectado a internet, ya que es una aplicación que se ejecuta en nuestro ordenador. Entre dos compañeros, firmar los dos un documento, verificar la firma para comprobar que está firmado por los dos. Tarea 4: Autenticación Utilizando tu certificado accede a alguna página de la administración pública (cita médica, becas, puntos del carnet,…). Entrega capturas de pantalla donde se demuestre el acceso a ellas. Accedemos a la web de la DGT para verificar el funcionamiento de nuestro certificado digital accediendo a nuestro historial de puntos. Nos redigirá a una página donde podremos elegir entre los distintos tipos de acceso y elegimos Cl@ave. El navegador, en mi caso, requiere de la aplicación de autofirma para poder acceder a la contraseña. Una vez introducida, nos redirige a la página de la DGT donde podemos ver nuestro historial de puntos. HTTPS / SSL NOTA: Vamos a realizar esta práctica en una web que se acceda con el nombre maria.iesgn.org. Para realizar esta tarea, vamos a necesitar la colaboración de un compañero, ya que fimraré una Autoridad Certificadora y mi compañero la firmará, y viceversa. Para ello, podemos hacer uso de los siguientes enlaces para buscar más información: Phil’s X509/SSL Guide How to setup your own CA with OpenSSL Crear autoridad certificadora (CA) y certificados autofirmados en Linux Creamos la Autoridad certificadora Crear su autoridad certificadora (generar el certificado digital de la CA). Mostrar el fichero de configuración de la AC. Creamos el directorio donde alojaremos todo lo necesario para la CA, dándole los permisos necesarios. mkdir CA cd CA mkdir certs csr crl newcerts private chmod 700 private touch index.txt touch index.txt.attr echo 1000 &gt; serial Creamos las variables de entorno donde definiremos los datos de configuración de la CA. countryName_default="ES" stateOrProvinceName_default="Sevilla" localityName_default="Dos Hermanas" organizationName_default="Maria" organizationalUnitName_default="ASIR2" emailAddress_default="mariajesus.alloza@outlook.es" DIR_CA="./" Creamos el fichero de configuración. cat &lt;&lt;EOF&gt;$DIR_CA/openssl.conf [ ca ] # man ca default_ca = CA_default [ CA_default ] # Directory and file locations. dir = ${DIR_CA} certs = ${DIR_CA}certs crl_dir = ${DIR_CA}crl new_certs_dir = ${DIR_CA}newcerts database = ${DIR_CA}index.txt serial = ${DIR_CA}serial RANDFILE = ${DIR_CA}private/.rand # The root key and root certificate. private_key = ${DIR_CA}private/private.key certificate = ${DIR_CA}certs/cacert.crt # For certificate revocation lists. crlnumber = ${DIR_CA}crlnumber crl = ${DIR_CA}crl/ca.crl.pem crl_extensions = crl_ext default_crl_days = 30 # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 name_opt = ca_default cert_opt = ca_default default_days = 375 preserve = no policy = policy_strict [ policy_strict ] # The root CA should only sign intermediate certificates that match. # See the POLICY FORMAT section of man ca. countryName = match stateOrProvinceName = match organizationName = match organizationalUnitName = optional commonName = supplied emailAddress = optional [ policy_loose ] # Allow the intermediate CA to sign a more diverse range of certificates. # See the POLICY FORMAT section of the ca man page. countryName = optional stateOrProvinceName = optional localityName = optional organizationName = optional organizationalUnitName = optional commonName = supplied emailAddress = optional [ req ] # Options for the req tool (man req). default_bits = 2048 distinguished_name = req_distinguished_name string_mask = utf8only # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 # Extension to add when the -x509 option is used. x509_extensions = v3_ca # Extension for SANs req_extensions = v3_req [ v3_req ] # Extensions to add to a certificate request # Before invoke openssl use: export SAN=DNS:value1,DNS:value2 basicConstraints = CA:FALSE keyUsage = nonRepudiation, digitalSignature, keyEncipherment xxxsubjectAltNamexxx = [ req_distinguished_name ] # See &lt;https://en.wikipedia.org/wiki/Certificate_signing_request&gt;. countryName = Country Name (2 letter code) stateOrProvinceName = State or Province Name localityName = Locality Name 0.organizationName = Organization Name organizationalUnitName = Organizational Unit Name commonName = Common Name emailAddress = Email Address # Optionally, specify some defaults. countryName_default = $countryName_default stateOrProvinceName_default = $stateOrProvinceName_default localityName_default = $localityName_default 0.organizationName_default = $organizationName_default organizationalUnitName_default = $organizationalUnitName_default emailAddress_default = $emailAddress_default [ v3_ca ] # Extensions for a typical CA (man x509v3_config). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ v3_intermediate_ca ] # Extensions for a typical intermediate CA (man x509v3_config). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true, pathlen:0 keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ usr_cert ] # Extensions for client certificates (man x509v3_config). basicConstraints = CA:FALSE nsCertType = client, email nsComment = "OpenSSL Generated Client Certificate" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection [ server_cert ] # Extensions for server certificates (man x509v3_config). basicConstraints = CA:FALSE nsCertType = server nsComment = "OpenSSL Generated Server Certificate" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth [ crl_ext ] # Extension for CRLs (man x509v3_config). authorityKeyIdentifier=keyid:always [ ocsp ] # Extension for OCSP signing certificates (man ocsp). basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, digitalSignature extendedKeyUsage = critical, OCSPSigning EOF Creamos tanto la clavecomoel certificado de a AC (autoridad de certificación) con el siguiente comando: #Creación de la clave openssl genrsa -aes256 -out private/private.key 4096 sed -i 's|xxxsubjectAltNamexxx =|subjectAltName = ${ENV::SAN}|g' openssl.conf URL=juanjesus.iesgn.org export SAN=DNS:$URL #Creación del certificado openssl req -config openssl.conf -key private/private.key -new -x509 -days 3650 -sha256 -extensions v3_ca -out certs/cacert.crt chmod 444 certs/cacert.crt Debe recibir el fichero CSR (Solicitud de Firmar un Certificado) de su compañero, debe firmarlo y enviar el certificado generado a su compañero. Mi compañero me envía mir fichero CSR, lo firmo y lo envío de vuelta. #Firmar el certificado openssl ca -config openssl.conf -extensions v3_req -days 3650 -notext -md sha256 -in csr/juanjesus-mjca.csr -out certs/juanjesus-mjca.crt ¿Qué otra información debes aportar a tu compañero para que éste configure de forma adecuada su servidor web con el certificado generado? Dentro de nuestro fichero openssl.conf nos encontraremos con los datos que nuestro compañero debe rellenar para configurar su servidor web, que son: countryName stateOrProvinceName localityName Administramos el servidor web Preparando el escenario Para realizar este punto, deberemos crear un servidor apache, y configurarlo para que nos sirva una página web con https. Para ello, deberemos seguir los siguientes pasos: Instalamos el servidor apache: sudo apt install apache2 Deshabilitamos el virtual host por defecto: sudo a2dissite 000-default.conf Creamos un nuevo virtual host y su fichero de configuración: sudo mkdir /var/www/html/maria.iesgn.org Creamos el fichero index.html dentro de la carpeta que hemos creado anteriormente: sudo nano /var/www/html/maria.iesgn.org/index.html Y dentro de este fichero, escribimos lo siguiente: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;maria.iesgn.org&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;maria.iesgn.org&lt;/h1&gt; &lt;p&gt;Web de prueba para cripto 3 - HTTPS&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Habilitamos el nuevo virtual host y reiniciamos el servicio apache: sudo a2ensite maria.iesgn.org.conf sudo systemctl restart apache2 Empezamos Crea una clave privada RSA de 4096 bits para identificar el servidor. sudo openssl genrsa -aes256 -out /etc/ssl/private/maria-priv.key 4096 sudo chmod 400 /etc/ssl/private/maria-priv.key Utiliza la clave anterior para generar un CSR, considerando que deseas acceder al servidor con el FQDN (maria.iesgn.org). sudo openssl req -new -sha256 -key /etc/ssl/private/maria-priv.key -out maria.csr Envía la solicitud de firma a la entidad certificadora (su compañero). Recibe como respuesta un certificado X.509 para el servidor firmado y el certificado de la autoridad certificadora. Configura tu servidor web con https en el puerto 443, haciendo que las peticiones http se redireccionen a https (forzar https). Modificamos el fichero de configuración: &lt;IfModule mod_ssl.c&gt; &lt;VirtualHost *:443&gt; ServerName maria.iesgn.org DocumentRoot /var/www/html/maria.iesgn.org ErrorLog ${APACHE_LOG_DIR}/error-maria.log CustomLog ${APACHE_LOG_DIR}/access-maria.log combined SSLEngine on SSLCertificateFile /etc/ssl/certs/maria.crt SSLCertificateKeyFile /etc/ssl/private/maria-priv.key SSLCertificateChainFile /etc/ssl/certs/cacert.crt &lt;Directory /var/www/html/maria.iesgn.org&gt; Options Indexes FollowSymLinks AllowOverride None Require all granted &lt;/Directory&gt; &lt;/VirtualHost&gt; &lt;/IfModule&gt; Movemos los ficheros que hemos generado a la carpeta /etc/ssl/certs y le proporcionamos los permisos necesarios: sudo mv maria.crt /etc/ssl/certs/ sudo mv cacert.crt /etc/ssl/certs/ sudo chown root:root /etc/ssl/certs/maria.crt sudo chown root:root /etc/ssl/certs/cacert.crt sudo chmod 644 /etc/ssl/certs/maria.crt sudo chmod 644 /etc/ssl/certs/cacert.crt Habilitamos el módulo ssl y reiniciamos el servicio apache: sudo a2enmod ssl sudo a2ensite ssl-maria.iesgn.org.conf sudo systemctl reload apache2 Modificamos el fichero para que realice una redirección de http a https: sudo nano /etc/apache2/sites-available/maria.iesgn.org.conf #Añadimos la siguiente línea: Redirect 301 / https://maria.iesgn.org/ Reiniciamos el servicio apache: sudo systemctl reload apache2 Comprobamos su funcionamiento: Instala ahora un servidor nginx, y realiza la misma configuración que anteriormente para que se sirva la página con HTTPS. Deshabilitamos apache: sudo systemctl disable --now apache2 Instalamos el servidor nginx: sudo apt install nginx Creamos el fichero de configuración dentro de la carpeta que hemos creado anteriormente: sudo nano /var/www/html/maria.iesgn.org/index.html Y dentro de este fichero, escribimos lo siguiente: server { listen 80; listen [::]:80; server_name maria.iesgn.org; return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name maria.iesgn.org; ssl_certificate /etc/ssl/certs/maria.crt; ssl_certificate_key /etc/ssl/private/maria-priv.key; ssl_trusted_certificate /etc/ssl/certs/cacert.crt; root /var/www/html/maria.iesgn.org; index index.html; location / { try_files $uri $uri/ =404; } } Modificamos el fichero index.html que hemos creado anteriormente: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;maria.iesgn.org&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;maria.iesgn.org&lt;/h1&gt; &lt;p&gt;Web de prueba para cripto 3 - HTTPS&lt;/p&gt; &lt;p&gt;PRUEBA NGINX&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Realizamos la firma del certificado: sudo openssl rsa -in /etc/ssl/private/maria-priv.key -out /etc/ssl/private/maria-priv2.key Realizamos el enlace simbólico del fichero de configuración y reiniciamos el servicio nginx: sudo ln -s /etc/nginx/sites-available/maria.iesgn.org.conf /etc/nginx/sites-enabled/ sudo systemctl restart nginx Comprobamos que el servidor funciona correctamente:]]></summary></entry></feed>