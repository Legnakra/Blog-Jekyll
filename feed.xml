<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-01-30T11:26:29+01:00</updated><id>/feed.xml</id><title type="html">sysmaria</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Taller Docker - Escenarios multicontenedor en Docker</title><link href="/iaw/2023/01/27/docker-multicontenedor.html" rel="alternate" type="text/html" title="Taller Docker - Escenarios multicontenedor en Docker" /><published>2023-01-27T16:11:17+01:00</published><updated>2023-01-27T16:11:17+01:00</updated><id>/iaw/2023/01/27/docker-multicontenedor</id><content type="html" xml:base="/iaw/2023/01/27/docker-multicontenedor.html"><![CDATA[<h2 id="despliegue-de-nextcloud-en-docker">Despliegue de Nextcloud en Docker</h2>

<p>Vamos a desplegar la aplicación nextcloud con una base de datos  utilizando la aplicación docker-compose. Puedes coger cómo modelo el fichero docker-compose.yml el que hemos estudiado para desplegar WordPress.</p>

<ol>
  <li>
    <p>Instala docker-compose en tu ordenador.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt <span class="nb">install </span>docker-compose
</code></pre></div>    </div>
  </li>
  <li>
    <p>Dentro de un directorio crea un fichero docker-compose.yml para realizar el despliegue de nextcloud con una base de datos. Recuerda las variables de entorno y la persistencia de información.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">mkdir </span>nextcloud
 <span class="nb">cd </span>nextcloud
 nano docker-compose.yml
</code></pre></div>    </div>

    <p>Dentro del fichero docker-compose.yml debes definir los siguientes servicios:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```yaml
 version: '3.7'
 services:
   nextcloud:
     image: nextcloud:latest
     container_name: nextcloud
     restart: always
     ports:
       - 8080:80
     volumes:
       - nextcloud:/var/www/html
   db:
     image: mariadb:latest
     container_name: nextcloud-db
     restart: always
     volumes:
       - nextcloud-db:/var/lib/mysql
     environment:
       - MYSQL_DATABASE=nextcloud
       - MYSQL_USER=nextcloud
       - MYSQL_PASSWORD=admin
       - MYSQL_ROOT_PASSWORD=nextcloud
 volumes:
     nextcloud:
     nextcloud-db:
     ```
</code></pre></div>    </div>
  </li>
  <li>
    <p>Levanta el escenario con docker-compose.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker-compose up <span class="nt">-d</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/1.png" alt="1" /></p>
  </li>
  <li>
    <p>Muestra los contenedores con docker-compose.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker-compose ps
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Accede a la aplicación y comprueba que funciona.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> http://localhost:8080
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Comprueba el almacenamiento que has definido y que se ha creado una nueva red de tipo bridge.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker volume <span class="nb">ls
 </span>docker network <span class="nb">ls</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Borra el escenario con docker-compose.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker-compose down
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/5.png" alt="5" /></p>

    <p><img src="/assets/images/docker/taller2/6.png" alt="6" /></p>
  </li>
</ol>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Despliegue de Nextcloud en Docker]]></summary></entry><entry><title type="html">VPN sitio a sitio con WireGuard</title><link href="/seguridad/2023/01/13/vpn-d.html" rel="alternate" type="text/html" title="VPN sitio a sitio con WireGuard" /><published>2023-01-13T12:47:17+01:00</published><updated>2023-01-13T12:47:17+01:00</updated><id>/seguridad/2023/01/13/vpn-d</id><content type="html" xml:base="/seguridad/2023/01/13/vpn-d.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En este post vamos a configurar una VPN site to site con wireguard. Para ello vamos a hacer uso de máquinas vagrant para montar el escenario.</p>

<h2 id="escenario">Escenario</h2>

<p>Vamos a dividir el escenario en dos, por una parte, un escenario que actuará de servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Servidor"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadavpn"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.30.0.10"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
    config.vm.define :nodo2 <span class="k">do</span> |nodo2|
      nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo2.vm.hostname <span class="o">=</span> <span class="s2">"Cliente"</span>
      nodo2.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadavpn"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.30.0.11"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
end
</code></pre></div></div>

<p>Y por otra parte, un escenario que actuará de cliente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Servidor2"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadvpn2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.20.0.10"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
    config.vm.define :nodo2 <span class="k">do</span> |nodo2|
      nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo2.vm.hostname <span class="o">=</span> <span class="s2">"Cliente2"</span>
      nodo2.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadvpn2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.20.0.11"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
end
</code></pre></div></div>

<p>Comenzaremos cambiando las rutas por defecto en las máquinas <code class="language-plaintext highlighter-rouge">cliente1</code> y <code class="language-plaintext highlighter-rouge">cliente2</code> para que se dirijan a la máquina <code class="language-plaintext highlighter-rouge">servidor1</code> y <code class="language-plaintext highlighter-rouge">servidor2</code> respectivamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#cliente1</span>
ip r del default
ip r add default via 172.30.0.10

<span class="c">#cliente2</span>
ip r del default
ip r add default via 172.20.0.10
</code></pre></div></div>

<h2 id="configuración-del-servidor-1">Configuración del servidor 1</h2>

<p>Instalaremos wireguard en el <code class="language-plaintext highlighter-rouge">servidor1</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>wireguard
</code></pre></div></div>

<p>Y activamos el bit de forwarding en el kernel:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Tras ello, generaremos el par de claves pública y privada para el servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg genkey | <span class="nb">tee </span>serverprivate | wg pubkey <span class="o">&gt;</span> serverpublic
</code></pre></div></div>

<p>Ya obtenidas, crearemos el fichero de configuración del servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano wg0.conf
</code></pre></div></div>

<p>Y añadiremos lo siguiente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
Address <span class="o">=</span> 10.99.99.1
PrivateKey <span class="o">=</span> IHIpGRRZZ/GPIHCL8d9K+Ukd3hcav2Cki9MmOIf5Xns<span class="o">=</span>
ListenPort <span class="o">=</span> 51820
</code></pre></div></div>

<p>Levantamos el servicio y comprobamos que está funcionando correctamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick up wg0
wg
</code></pre></div></div>

<p><img src="/assets/images/vpn/D/1.png" alt="1" /></p>

<h2 id="configuración-del-servidor-2">Configuración del servidor 2</h2>

<p>Instalaremos wireguard en el <code class="language-plaintext highlighter-rouge">servidor2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>wireguard
</code></pre></div></div>

<p>Y activamos el bit de forwarding en el kernel:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Tras ello, generaremos el par de claves pública y privada para el servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg genkey | <span class="nb">tee </span>clientprivate | wg pubkey <span class="o">&gt;</span> clientpublic
</code></pre></div></div>

<p>Ya obtenidas, crearemos el fichero de configuración del servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano wg0.conf
</code></pre></div></div>

<p>Y añadiremos lo siguiente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
Address <span class="o">=</span> 10.99.99.2 
<span class="c"># Clave privada del servidor</span>
PrivateKey <span class="o">=</span> yO6u4QrwRwHef6WfPkZlcE6k/FET8ZnhcH2JUpp4VGI<span class="o">=</span>
ListenPort <span class="o">=</span> 51820

<span class="o">[</span>Peer]
<span class="c"># Clave pública del cliente</span>
PublicKey <span class="o">=</span> <span class="nv">FzKmyNQaz9UdnkB4J0oH6WoPAp2XRP4ZerqfZM5k0h4</span><span class="o">=</span>
AllowedIPs <span class="o">=</span> 0.0.0.0/0
Endpoint <span class="o">=</span> 192.168.121.98:51820
</code></pre></div></div>

<p>Levantamos el servicio y comprobamos que está funcionando correctamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick up wg0
wg
</code></pre></div></div>

<p><img src="/assets/images/vpn/D/2.png" alt="2" /></p>

<h2 id="comprobación-de-la-conexión">Comprobación de la conexión</h2>

<p>Para comprobar que la conexión funciona correctamente, ejecutaremos el comando <code class="language-plaintext highlighter-rouge">ping</code> desde el <code class="language-plaintext highlighter-rouge">cliente1</code> hacia el <code class="language-plaintext highlighter-rouge">cliente2</code>:</p>

<p><img src="/assets/images/vpn/D/3.png" alt="3" /></p>

<p><img src="/assets/images/vpn/D/4.png" alt="4" /></p>

<h2 id="comparando-con-openvpn">Comparando con OpenVPN</h2>

<p>Tras haber realizado el mismo escenario con OpenVPN, hemos obtenido los siguientes resultados:</p>
<ul>
  <li>El tiempo de conexión es mucho mayor en OpenVPN que en Wireguard.</li>
  <li>El ancho de banda es mucho mayor en Wireguard que en OpenVPN.</li>
  <li>El consumo de CPU es mucho menor en Wireguard que en OpenVPN.</li>
</ul>

<p>Todo esto podemos traducirlo en que Wireguard es mucho más rápido y eficiente que OpenVPN. Además, Wireguard es mucho más sencillo de configurar que OpenVPN.</p>

<p>Es cierto que Wiereguard no es tan seguro como OpenVPN, pero para la mayoría de los usuarios, la seguridad no es un problema. Además, Wireguard está en constante desarrollo y se espera que en un futuro sea mucho más seguro que OpenVPN.</p>

<p>Además de su seguridad, OpenVPN tiene una gran ventaja sobre Wireguard: es multiplataforma. Esto quiere decir que podemos utilizar OpenVPN en cualquier sistema operativo, mientras que Wireguard solo está disponible para Linux.</p>

<p>En resumen, Wireguar es una muy buena alternativa frente a OpenVPN y se espera que en un futuro de bastante prontitud, Wireguard se convierta en la VPN por defecto de Linux. Es de facil configuración, y es mucho mas eficiente que OpenVPN en cuanto a rendimiento y consumo de recursos.</p>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Introducción]]></summary></entry><entry><title type="html">VPN de acceso remoto con WireGuard (Windows, Linux, Android)</title><link href="/seguridad/2023/01/12/vpn-c.html" rel="alternate" type="text/html" title="VPN de acceso remoto con WireGuard (Windows, Linux, Android)" /><published>2023-01-12T12:47:17+01:00</published><updated>2023-01-12T12:47:17+01:00</updated><id>/seguridad/2023/01/12/vpn-c</id><content type="html" xml:base="/seguridad/2023/01/12/vpn-c.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En este post vamos a configurar un servidor VPN con WireGuard. WireGuard es un protocolo de túnel de código abierto que se ha convertido en una alternativa a OpenVPN. WireGuard es más rápido, más ligero y más fácil de configurar que OpenVPN.</p>

<h2 id="preparando-el-escenario">Preparando el escenario</h2>

<h3 id="máquina-interno">Máquina <strong>Interno</strong></h3>

<p>Vamos a crear una máquina virtual con la ayuda de vagrant que servirá de cliente interno. Esta máquina tendrá una IP privada y no podrá acceder a internet.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Interno"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"Privada"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"192.168.20.10"</span>,
        :libvirt__netmask <span class="o">=&gt;</span> <span class="s1">'255.255.255.0'</span>,
        :mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
end
</code></pre></div></div>
<p>Y le configuraremos la ruta por defecto para que vaya por la ip ‘192.168.20.1’ que es la ip del servidor VPN.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip r del default
ip r add default via 192.168.20.1
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/1.png" alt="1" /></p>

<h3 id="maquina-servidor">Maquina <strong>Servidor</strong></h3>

<p>Vamos a crear una máquina virtual con la ayuda de vagrant que servirá de servidor VPN. Esta máquina tendrá una IP pública y podrá acceder a internet.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|

    config.vm.provider :libvirt <span class="k">do</span> |v|
      v.memory <span class="o">=</span> 1024
      end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Servidor"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
      :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN3"</span>,
      :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
      :ip <span class="o">=&gt;</span> <span class="s2">"192.168.99.10"</span>,
      :libvirt__netmask <span class="o">=&gt;</span> <span class="s1">'255.255.255.0'</span>,
      :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
      nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"Privada"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"192.168.20.1"</span>,
        :libvirt__netmask <span class="o">=&gt;</span> <span class="s1">'255.255.255.0'</span>,
        :mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
end
</code></pre></div></div>

<p>En esta máquina vamos a instalar WireGuard.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>wireguard
</code></pre></div></div>

<p>Activamos el bit de forwarding en el kernel.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Nos dirigimos al directorio de configuración de WireGuard, creamos las claves del servidor que nos servirán para configurar los clientes y el fichero de configuración del servidor.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg genkey | <span class="nb">tee </span>serverprivatekey | wg pubkey <span class="o">&gt;</span> serverpublickey
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/2.png" alt="2" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
<span class="c">#IP del servidor</span>
Address <span class="o">=</span> 10.99.99.1
<span class="c">#Clave privada del servidor</span>
PrivateKey <span class="o">=</span> <span class="nv">gFfh8vumUY89MkV269eYEiDdT9IWdfKDvV1T0DcSsEA</span><span class="o">=</span>
<span class="c">#Puerto de escucha</span>
ListenPort <span class="o">=</span> 51820
</code></pre></div></div>

<p>Activamos la interfaz de WireGuard.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick up wg0
</code></pre></div></div>

<p>Y comprobamos que funciona correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/3.png" alt="3" /></p>

<p><img src="/assets/images/vpn/C/4.png" alt="4" /></p>

<h3 id="cliente-linux">Cliente <strong>Linux</strong></h3>

<p>Vamos a crear una máquina virtual con la ayuda de vagrant que servirá de cliente para la VPN.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|

    config.vm.provider :libvirt <span class="k">do</span> |v|
      v.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Linux"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
      :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN3"</span>,
      :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
      :ip <span class="o">=&gt;</span> <span class="s2">"192.168.99.11"</span>,
      :libvirt__netmask <span class="o">=&gt;</span> <span class="s1">'255.255.255.0'</span>,
      :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
end
</code></pre></div></div>

<p>Y le configuraremos la ruta por defecto para que vaya por la ip ‘192.168.20.1’ que es la ip del servidor VPN.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip r del default
ip r add default via 192.168.99.10
</code></pre></div></div>

<p>En esta máquina realizaremos la configuración de wireguard como hemos realizado en la máquina anterior.</p>

<ul>
  <li>
    <p>Instalamos wireguard</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>wireguard
</code></pre></div>    </div>
  </li>
  <li>
    <p>Nos dirigimosal directorio <code class="language-plaintext highlighter-rouge">/etc/wireguard/</code>y creamos el par de claves:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  wg genkey | <span class="nb">tee </span>clientprivatekey | wg pubkey <span class="o">&gt;</span> clientpublickey
</code></pre></div>    </div>

    <p><img src="/assets/images/vpn/C/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Creamos el fichero de configuración del cliente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">[</span>Interface]
  Address <span class="o">=</span> 10.99.99.2/24
  <span class="c">#Clave privada del cliente</span>
  PrivateKey <span class="o">=</span> 8J4d+gUAoZMNPZ1unrMtPJ4p7a2aXAB24MXnlmx+CEU<span class="o">=</span>
  <span class="c">#Puerto de escucha del servidor</span>
  ListenPort <span class="o">=</span> 51820

  <span class="o">[</span>Peer]
  <span class="c">#Clave pública del servidor</span>
  PublicKey <span class="o">=</span> <span class="nv">KGD20wvABWB20aj02aCsUfKxphiubQUa0iGOMSVqNHc</span><span class="o">=</span>
  AllowedIPs <span class="o">=</span> 0.0.0.0/0
  <span class="c">#Punto de acceso del servidor</span>
  Endpoint <span class="o">=</span> 192.168.99.10:51820
  <span class="c">#Tiempo de espera de la conexión</span>
  PersistentKeepalive <span class="o">=</span> 25
</code></pre></div>    </div>
  </li>
  <li>
    <p>Activamos la interfaz de WireGuard.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  wg-quick up wg0
</code></pre></div>    </div>
    <p><img src="/assets/images/vpn/C/6.png" alt="6" /></p>

    <p><img src="/assets/images/vpn/C/7.png" alt="7" /></p>
  </li>
</ul>

<p>Configurado el cliente, deberemos configurar en el fichero <code class="language-plaintext highlighter-rouge">wg0.cong</code>de <code class="language-plaintext highlighter-rouge">servidor</code> donde incluiremos el cliente que recientemente hemos configurado y el fichero quedaría de la siguiente manera:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
Address <span class="o">=</span> 10.99.99.1
<span class="c">#Clave privada del servidor</span>
PrivateKey <span class="o">=</span> <span class="nv">gFfh8vumUY89MkV269eYEiDdT9IWdfKDvV1T0DcSsEA</span><span class="o">=</span>
<span class="c">#Puerto de escucha</span>
ListenPort <span class="o">=</span> 51820

<span class="c">#Bit de forwarding</span>
PreUp <span class="o">=</span> sysctl <span class="nt">-w</span> net.ipv4.ip_forward<span class="o">=</span>1

<span class="c"># Cliente Debian 11</span>
<span class="o">[</span>Peer]
<span class="c">#Clave pública del cliente</span>
Publickey <span class="o">=</span> pQLF6BndUY/V15vvCymgo+84qWp5YzLLjXpybSmMBDo<span class="o">=</span>
<span class="c">#IP del cliente</span>
AllowedIPs <span class="o">=</span> 10.99.99.2/32
<span class="c">#Tiempo de espera de respuesta</span>
PersistentKeepAlive <span class="o">=</span> 25
</code></pre></div></div>

<p>Reiniciaos el servicio y comprobamos que el cliente se ha conectado correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg-quick down wg0
wg
</code></pre></div></div>
<p><img src="/assets/images/vpn/C/8.png" alt="8" /></p>

<p><img src="/assets/images/vpn/C/9.png" alt="9" /></p>

<h3 id="comprobaciones-de-funcionamiento">Comprobaciones de funcionamiento</h3>

<p>Desde el propio cliente podemos comprobar el funcionamiento de la VPN.</p>

<p><img src="/assets/images/vpn/C/10.png" alt="10" /></p>

<p>Desde el servidor podemos comprobar que el cliente Android se ha conectado correctamente.</p>

<p><img src="/assets/images/vpn/C/11.png" alt="11" /></p>

<h2 id="configuración-del-cliente-windows">Configuración del cliente windows</h2>

<p>Lo primero que deberemos realizar es el cambio de ip de la interfaz de red de la máquina virtual para que no haya conflictos con la ip de la VPN. Para ello, ejecutamos el administrador de sistema en modo administrador y escribimos en la consola:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netsh
interface ip <span class="nb">set </span>address <span class="nv">name</span><span class="o">=</span><span class="s2">"Ethernet"</span> static 192.168.99.12 255.255.255.0 192.168.99.10
</code></pre></div></div>

<p><img src="/assets/images/vpn/C/12.png" alt="12" /></p>

<p>Descargamos wildguard desde su <a href="https://www.wireguard.com/install/">página oficial</a>, y una vez instalado, abrimos el programa y en la parte inferior izquierda, tenemos un menú desplegable donde seleccionamos <code class="language-plaintext highlighter-rouge">Añadir tunel vacío</code>.</p>

<p>En la subventana que se abre, ya nos aparecen creadas ambas claves, la pública y la privada del servidor, por lo que solo tendremos que añadir la clave pública del servidor y la IP.</p>

<p><img src="/assets/images/vpn/C/13.png" alt="13" /></p>

<p>Nos dirigimos al servidor, y añadimos la clave pública del cliente y la IP, quedando el fichero de la siguiente manera:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
Address <span class="o">=</span> 10.99.99.1
PrivateKey <span class="o">=</span> <span class="nv">gFfh8vumUY89MkV269eYEiDdT9IWdfKDvV1T0DcSsEA</span><span class="o">=</span>
ListenPort <span class="o">=</span> 51820

PreUp <span class="o">=</span> sysctl <span class="nt">-w</span> net.ipv4.ip_forward<span class="o">=</span>1

<span class="c"># Cliente Debian 11</span>
<span class="o">[</span>Peer]
Publickey <span class="o">=</span> pQLF6BndUY/V15vvCymgo+84qWp5YzLLjXpybSmMBDo<span class="o">=</span>
AllowedIPs <span class="o">=</span> 10.99.99.2/32
PersistentKeepAlive <span class="o">=</span> 25

<span class="c"># Cliente Windows</span>

<span class="o">[</span>Peer]
Publickey <span class="o">=</span> <span class="nv">SqFFutq1xAbGzj3POiHSRbbPpQAH1clUkyWikKjhojg</span><span class="o">=</span>
AllowedIPs <span class="o">=</span> 10.99.99.2/32
PersistentKeepAlive <span class="o">=</span> 25
</code></pre></div></div>

<p>Reiniciamos el servicio y comprobamos que el cliente se ha conectado correctamente.</p>

<p><img src="/assets/images/vpn/C/14.png" alt="14" /></p>

<p><img src="/assets/images/vpn/C/15.png" alt="15" /></p>

<h3 id="comprobaciones-de-funcionamiento-1">Comprobaciones de funcionamiento</h3>

<p>En las siguientes imágenes, podemos ver que el cliente windows puede acceder a la red interna y también con el cliente linux.</p>

<p><img src="/assets/images/vpn/C/16.png" alt="16" /></p>

<p><img src="/assets/images/vpn/C/17.png" alt="17" /></p>

<h2 id="configuración-del-cliente-android">Configuración del cliente Android</h2>

<p>Para este punto del escenario, voy a usar mi máquina host como servidor VPN y mi móvil físico como cliente. Para ello, hemos instalado la aplicación WireGuard en el móvil y hemos configurado el servidor con la IP de mi móvil.</p>

<p>Para hacerlo posible, vamos a realizar la configuración del cliente en la propia máquina servidor y luego pasaremos dicha configuración al móvil a través de un código QR que generaremos en nuestra consola.</p>

<ul>
  <li>
    <p>Creamos las claves pública y privada del cliente.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wg genkey | <span class="nb">tee </span>androidprivate | wg pubkey <span class="o">&gt;</span> androidpublic
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos el fichero de configuración del cliente.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
Address <span class="o">=</span> 10.99.99.4
PrivateKey <span class="o">=</span> wHf9pBV923/XKWPzFVPp39w3eUZ7wU7DsE6cvu36F2s<span class="o">=</span>
ListenPort <span class="o">=</span> 51820
  
<span class="o">[</span>Peer]
Publickey <span class="o">=</span><span class="nv">n9IjUHqVAQ9WEW80syWFYmgY5IG80kd5J9j2godvgm8</span><span class="o">=</span>
AllowedIPs <span class="o">=</span> 0.0.0.0/0
Endpoint <span class="o">=</span> 192.168.15.32:51820
</code></pre></div>    </div>
  </li>
  <li>
    <p>Ahora generaremos el código QR con el que pasaremos la configuración al móvil.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qrencode <span class="nt">-t</span> ansiutf8 &lt; android.conf
</code></pre></div>    </div>

    <p><img src="/assets/images/vpn/C/18.png" alt="18" /></p>
  </li>
  <li>
    <p>Modificamos el fichero de configuración del servidor para añadir la clave pública del cliente y la IP.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
<span class="c">#IP del servidor</span>
Address <span class="o">=</span> 10.99.99.1
<span class="c">#Clave privada del servidor</span>
PrivateKey <span class="o">=</span> <span class="nv">gFfh8vumUY89MkV269eYEiDdT9IWdfKDvV1T0DcSsEA</span><span class="o">=</span>
<span class="c">#Puerto de escucha</span>
ListenPort <span class="o">=</span> 51820

<span class="o">[</span>Peer]
Publickey <span class="o">=</span> Iq47qp/TP8bx6v4qDJwTiHwWYSO7/y23FvK1SpIdzi0<span class="o">=</span>
AllowedIPs <span class="o">=</span> 10.99.99.4/32
PersistentKeepAlive <span class="o">=</span> 25
</code></pre></div>    </div>
  </li>
  <li>
    <p>Tras ello, reiniciamos el servicio y comprobamos que el cliente se ha conectado correctamente.</p>

    <p><img src="/assets/images/vpn/C/19.png" alt="19" /></p>

    <p><img src="/assets/images/vpn/C/20.png" alt="20" /></p>
  </li>
</ul>

<h3 id="comprobaciones-de-funcionamiento-2">Comprobaciones de funcionamiento</h3>

<p>Para verificar que funciona correctamente, haremos ping desde el cliente interno al cliente android y desde el cliente android al servidor.</p>

<p><img src="/assets/images/vpn/C/21.png" alt="21" /></p>

<p><img src="/assets/images/vpn/C/22.png" alt="22" /></p>

<p><img src="/assets/images/vpn/C/23.png" alt="23" /></p>

<h2 id="conclusiones">Conclusiones</h2>

<p>Comparando OpenVPN y WireGuard, podemos ver que WireGuard es mucho más sencillo de configurar y que tiene un rendimiento mucho mejor. Con Wireguard no es necesario que creamos un certificado para cada cliente, ya que solo necesitamos la clave pública del cliente y la clave privada del servidor.</p>

<p>Otro de los puntos a favor de WireGuard es que no es necesario que el servidor tenga una IP pública, ya que podemos usar un servidor con una IP privada y usar un servicio de tunelado.</p>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Introducción]]></summary></entry><entry><title type="html">Taller Docker - Almacenamiento y Redes</title><link href="/iaw/2023/01/12/docker-almacenamiento.html" rel="alternate" type="text/html" title="Taller Docker - Almacenamiento y Redes" /><published>2023-01-12T12:47:17+01:00</published><updated>2023-01-12T12:47:17+01:00</updated><id>/iaw/2023/01/12/docker-almacenamiento</id><content type="html" xml:base="/iaw/2023/01/12/docker-almacenamiento.html"><![CDATA[<h2 id="almacenamiento">Almacenamiento</h2>

<h3 id="volúmenes-docker">Volúmenes docker</h3>

<ol>
  <li>
    <p>Crearemos un volumen docker que se llame miweb.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker volume create miweb
</code></pre></div>    </div>

    <p>Y mostramos que el volumen se ha creado correctamente.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker volume <span class="nb">ls</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/1.png" alt="1" /></p>
  </li>
  <li>
    <p>Crea un contenedor desde la imagen php:7.4-apache donde montes en el directorio /var/www/html el volumen docker que has creado.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker run <span class="nt">-d</span> <span class="nt">--name</span> miweb <span class="nt">-p</span> 80:80 <span class="nt">-v</span> miweb:/var/www/html php:7.4-apache
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Utiliza el comando docker cp para copiar un fichero index.html (donde aparece tu nombre) en el directorio /var/www/html.</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">&lt;!DOCTYPE html&gt;</span>
 <span class="nt">&lt;html&gt;</span>
     <span class="nt">&lt;body&gt;</span>
         <span class="nt">&lt;h1&gt;</span>Nombre: Maria Jesus<span class="nt">&lt;/h1&gt;</span>
         <span class="nt">&lt;h2&gt;</span>Prueba de docker<span class="nt">&lt;/h2&gt;</span>
     <span class="nt">&lt;/body&gt;</span>
 <span class="nt">&lt;/html&gt;</span>
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker <span class="nb">cp </span>index.html miweb:/var/www/html/index.html
</code></pre></div>    </div>
  </li>
  <li>
    <p>Accede al contenedor desde el navegador para ver la información ofrecida por el fichero index.html.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> http://localhost
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Borra el contenedor</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker <span class="nb">rm</span> <span class="nt">-f</span> miweb
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Crea un nuevo contenedor y monta el mismo volumen como en el ejercicio anterior.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker run <span class="nt">-d</span> <span class="nt">--name</span> miweb <span class="nt">-p</span> 80:80 <span class="nt">-v</span> miweb:/var/www/html php:7.4-apache
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Accede al contenedor desde el navegador para ver la información ofrecida por el fichero index.html. ¿Seguía existiendo ese fichero?</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> http://localhost:8080
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/6.png" alt="6" /></p>

    <ul>
      <li>El fichero sigue existiendo porque se ha creado un volumen docker que se ha montado en el contenedor.</li>
    </ul>
  </li>
</ol>

<h3 id="bind-mounts">Bind Mounts</h3>

<ol>
  <li>
    <p>Crea un directorio en tu host y dentro crea un fichero index.html (donde aparece tu nombre).</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">mkdir</span> <span class="nt">-p</span> /home/maria/Documentos/2ASIR/IAW/Docker
 <span class="nb">cd</span> /home/maria/Documentos/2ASIR/IAW/Docker
 <span class="nb">touch </span>index.html
</code></pre></div>    </div>
  </li>
  <li>
    <p>Crea un contenedor desde la imagen php:7.4-apache donde montes en el directorio /var/www/html el directorio que has creado por medio de bind mount.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker run <span class="nt">-d</span> <span class="nt">--name</span> miweb <span class="nt">-p</span> 80:80 <span class="nt">-v</span> /home/maria/Documentos/2ASIR/IAW/Docker/index.html:/var/www/html/index.html php:7.4-apache
</code></pre></div>    </div>
  </li>
  <li>
    <p>Accede al contenedor desde el navegador para ver la información ofrecida por el fichero index.html.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> http://localhost:8080
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/7.png" alt="7" /></p>
  </li>
  <li>
    <p>Modifica el contenido del fichero index.html en tu host y comprueba que al refrescar la página ofrecida por el contenedor, el contenido ha cambiado.</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">&lt;!DOCTYPE html&gt;</span>
 <span class="nt">&lt;html&gt;</span>
     <span class="nt">&lt;body&gt;</span>
         <span class="nt">&lt;h1&gt;</span>Nombre: Maria Jesus<span class="nt">&lt;/h1&gt;</span>
         <span class="nt">&lt;h2&gt;</span>Prueba Bind Mounts<span class="nt">&lt;/h2&gt;</span>
     <span class="nt">&lt;/body&gt;</span>
 <span class="nt">&lt;/html&gt;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/8.png" alt="8" /></p>
  </li>
  <li>
    <p>Borra el contenedor</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker <span class="nb">rm</span> <span class="nt">-f</span> miweb
</code></pre></div>    </div>
  </li>
  <li>
    <p>Crea un nuevo contenedor y monta el mismo directorio como en el ejercicio anterior.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker run <span class="nt">-d</span> <span class="nt">--name</span> miweb <span class="nt">-p</span> 80:80 <span class="nt">-v</span> /home/maria/Documentos/2ASIR/IAW/Docker/index.html:/var/www/html/index.html php:7.4-apache
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/9.png" alt="9" /></p>
  </li>
  <li>
    <p>Accede al contenedor desde el navegador para ver la información ofrecida por el fichero index.html. ¿Se sigue viendo el mismo contenido?</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> http://localhost:8080
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller1/10.png" alt="10" /></p>

    <ul>
      <li>El contenido sigue siendo el mismo porque se ha montado el directorio en el contenedor.</li>
    </ul>
  </li>
</ol>

<h2 id="redes">Redes</h2>

<p>Despliegue de Nextcloud + mariadb/postgreSQL</p>

<p>Vamos a desplegar la aplicación nextcloud con una base de datos. Para ello sigue los siguientes pasos:</p>

<p>Crea una red de tipo bridge para que los contenedores se puedan comunicar entre ellos.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```bash
docker network create nextcloud-net
```
</code></pre></div></div>

<p><img src="/assets/images/docker/taller1/11.png" alt="11" /></p>

<p>Crea el contenedor de la base de datos conectado a la red que has creado. La base de datos se debe configurar para crear una base de dato y un usuario. Además el contenedor debe utilizar almacenamiento para guardar la información.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```bash
docker run -d --name nextcloud-db -e MYSQL_ROOT_PASSWORD=nextcloud -e MYSQL_DATABASE=nextcloud -e MYSQL_USER=nextcloud -e MYSQL_PASSWORD=admin -v nextcloud-db:/var/lib/mysql --network nextcloud-net mariadb
```
</code></pre></div></div>

<p><img src="/assets/images/docker/taller1/12.png" alt="12" /></p>

<p>A continuación, siguiendo la documentación de la imagen nextcloud, crea un contenedor conectado a la misma red, e indica las variables adecuadas para que se configure de forma adecuada y realice la conexión a la base de datos. El contenedor también debe ser persistente usando almacenamiento.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```bash
docker run -d --name nextcloud -p 80:80 -e MYSQL_DATABASE=nextcloud -e MYSQL_USER=nextcloud -e MYSQL_PASSWORD=admin -e MYSQL_HOST=nextcloud-db -v nextcloud:/var/www/html --network nextcloud-net nextcloud
```
</code></pre></div></div>

<p><img src="/assets/images/docker/taller1/13.png" alt="13" /></p>

<p>Accede a la aplicación usando un navegador web.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```bash
http://localhost:8080
```
</code></pre></div></div>

<p><img src="/assets/images/docker/taller1/14.png" alt="14" /></p>

<p><img src="/assets/images/docker/taller1/15.png" alt="15" /></p>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Almacenamiento]]></summary></entry><entry><title type="html">VPN site to site con OpenVPN y certificados x509</title><link href="/seguridad/2023/01/11/vpn-b.html" rel="alternate" type="text/html" title="VPN site to site con OpenVPN y certificados x509" /><published>2023-01-11T12:47:17+01:00</published><updated>2023-01-11T12:47:17+01:00</updated><id>/seguridad/2023/01/11/vpn-b</id><content type="html" xml:base="/seguridad/2023/01/11/vpn-b.html"><![CDATA[<h2 id="introducción">Introducción</h2>
<p>En este post vamos a configurar una conexión VPN sitio a sitio entre dos equipos:</p>

<ul>
  <li>Cada equipo estará conectado a dos redes, una de ellas en común</li>
  <li>Para la autenticación de los extremos se usarán obligatoriamente certificados digitales, que se generarán utilizando openssl y se almacenarán en el directorio /etc/openvpn, junto con con los parámetros Diffie-Helman y el certificado de la propia Autoridad de Certificación.</li>
  <li>Se utilizarán direcciones de la red 10.99.99.0/24 para las direcciones virtuales de la VPN.</li>
  <li>Tras el establecimiento de la VPN, una máquina de cada red detrás de cada servidor VPN debe ser capaz de acceder a una máquina del otro extremo.</li>
</ul>

<p><img src="/assets/images/vpn/B/VPN.png" alt="escenario" /></p>

<h2 id="preparando-el-escenario">Preparando el escenario</h2>

<p>Vamos a dividir el escenario en dos, por una parte, un escenario que actuará de servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Servidor"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadavpn"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.30.0.10"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
    config.vm.define :nodo2 <span class="k">do</span> |nodo2|
      nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo2.vm.hostname <span class="o">=</span> <span class="s2">"Cliente"</span>
      nodo2.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadavpn"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.30.0.11"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
  end
</code></pre></div></div>

<p>Y por otra parte, un escenario que actuará de cliente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.provider :libvirt <span class="k">do</span> |libvirt|
        libvirt.memory <span class="o">=</span> 1024
    end
    config.vm.define :nodo1 <span class="k">do</span> |nodo1|
      nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo1.vm.hostname <span class="o">=</span> <span class="s2">"Servidor2"</span>
      nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadvpn2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.20.0.10"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
    end
    config.vm.define :nodo2 <span class="k">do</span> |nodo2|
      nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
      nodo2.vm.hostname <span class="o">=</span> <span class="s2">"Cliente2"</span>
      nodo2.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"privadvpn2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"172.20.0.11"</span>,
        :netmask <span class="o">=&gt;</span> <span class="s2">"255.255.255.0"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
end
</code></pre></div></div>

<h2 id="configurando-el-servidor">Configurando el servidor</h2>

<p>Lo primero que tendremos que hacer es instalar el servicio openvpn y crearemos el fichero <code class="language-plaintext highlighter-rouge">.vars</code> que contendrá las variables que usaremos en el resto de la configuración:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>openvpn

<span class="nb">cp</span> /usr/share/easy-rsa/vars.example /etc/openvpn/easy-rsa/vars
</code></pre></div></div>

<p>Ahora, vamos a editar el fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/vars</code> y vamos a modificar las siguientes variables:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set_var EASYRSA_REQ_COUNTRY     <span class="s2">"ES"</span>
set_var EASYRSA_REQ_PROVINCE    <span class="s2">"Sevilla"</span>
set_var EASYRSA_REQ_CITY        <span class="s2">"Dos Hermanas"</span>
set_var EASYRSA_REQ_ORG         <span class="s2">"MJAR"</span>
set_var EASYRSA_REQ_EMAIL       <span class="s2">"mariajesus.alloza@outlook.es"</span>
set_var EASYRSA_REQ_OU          <span class="s2">"VPN site to site"</span>
</code></pre></div></div>

<p>Creamos eldirectorio donde almacenaremos la Autoridad Certificadore (CA) y generamos la clave Diffie-Helman:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /usr/share/easy-rsa
./easyrsa init-pki
<span class="nt">---</span>
./easyrsa gen-dh
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/1.png" alt="1" /></p>

<p><img src="/assets/images/vpn/B/2.png" alt="2" /></p>

<p>Terminado esto, construimos la Autoridad certificadora:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa build-ca
<span class="c">#Frase de paso: admin</span>
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/3.png" alt="3" /></p>

<p>El siguiente paso será que, ya teniendo nuestra Autoridad Certificadora, crearemos y firmaremos el certificado para <code class="language-plaintext highlighter-rouge">server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa gen-req server
./easyrsa sign-req server server
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/4.png" alt="4" /></p>

<p><img src="/assets/images/vpn/B/5.png" alt="5" /></p>

<p>Ahora le toca el turno al segundo escenario, y comenzaremos firmando el certificado para <code class="language-plaintext highlighter-rouge">server2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa gen-req server2
./easyrsa sign-req client server2
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/6.png" alt="6" /></p>

<p><img src="/assets/images/vpn/B/7.png" alt="7" /></p>

<p>Copiamos los certificados y claves generadas al directorio <code class="language-plaintext highlighter-rouge">/etc/openvpn/server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Copiamos los ficheros</span>
<span class="nb">cp</span> <span class="nt">-rp</span> /etc/openvpn/easy-rsa/pki<span class="o">{</span>ca.crt,dh.pem,issued/server.crt,private/server.key<span class="o">}</span> /etc/openvpn/server

<span class="c">#Enviamos por scp los ficheros</span>
scp <span class="nt">-r</span> /etc/openvpn/server vagrant@192.168.121.21:
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/8.png" alt="8" /></p>

<p><img src="/assets/images/vpn/B/9.png" alt="9" /></p>

<p>Creamos el fichero de configuración del servidor VPN:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /usr/share/doc/openvpn/examples/sample-config-files/server.conf /etc/openvpn/server/server.conf
</code></pre></div></div>

<p>Y editamos el fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn/server/servidor.conf</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dev tun
ifconfig 10.99.99.1 10.99.99.2
route 172.20.0.0 255.255.255.0
tls-server
ca ca.crt
cert server.crt
key server.key
dh dh.pem
comp-lzo
keepalive 10 120
log /var/log/openvpn/server.log
verb 3
askpass contra.txt
</code></pre></div></div>

<p>Iniciamos el servicio y nos cercioramos de que está activo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> openvpn-server@servidor
systemctl start openvpn-server@servidor
systemctl status openvpn-server@servidor
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/10.png" alt="10" /></p>

<p>Configuramos el bit de forwarding en el servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Y configuramos el cliente del primer escenario cambiando la ruta por defecto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route del default
ip route add default via 172.20.0.20
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/11.png" alt="11" /></p>

<h2 id="configurando-el-cliente">Configurando el cliente</h2>

<p>Ahora le toca el turno a <code class="language-plaintext highlighter-rouge">servidor2</code> y comenzaremos moviendo los ficheros de los certificados y claves generadas al directorio <code class="language-plaintext highlighter-rouge">/etc/openvpn/client</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Copiamos los ficheros</span>
<span class="nb">mv </span>ca.crt /etc/openvpn/client
<span class="nb">mv </span>server2.crt /etc/openvpn/client
<span class="nb">mv </span>server2.key /etc/openvpn/client
</code></pre></div></div>

<p>Creamos el fichero de configuración tomando primero como referencia el fichero de configuración del servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/client/client.conf
</code></pre></div></div>

<p>Y editamos el fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn/client/cliente.conf</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dev tun

remote 192.168.121.115
ifconfig 10.99.99.2 10.99.99.1
route 172.30.0.0 255.255.255.0
tls-client
ca ca.crt
cert server.crt
key server.key
comp-lzo
keepalive 10 120
verb 3
askpass contra2.txt
</code></pre></div></div>

<p>Iniciamos el servicio y nos cercioramos de que está activo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl start openvpn-client@cliente
systemctl status openvpn-client@cliente
</code></pre></div></div>

<p><img src="/assets/images/vpn/B/12.png" alt="12" /></p>

<p>Configuramos el bit de forwarding en el servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>Y configuramos el cliente del primer escenario cambiando la ruta por defecto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route del default
ip route add default via 172.20.0.20
</code></pre></div></div>

<h2 id="comprobando-la-conexión">Comprobando la conexión</h2>

<p>Comprobamos que el tunel se ha creado correctamente:</p>

<ul>
  <li>
    <p>Rutas del escenario 1</p>

    <p><img src="/assets/images/vpn/B/13.png" alt="13" /></p>
  </li>
  <li>
    <p>Rutas del escenario 2</p>

    <p><img src="/assets/images/vpn/B/14.png" alt="14" /></p>
  </li>
  <li>
    <p>Conexión desde el cliente del escenario 1</p>

    <p><img src="/assets/images/vpn/B/15.png" alt="15" /></p>
  </li>
  <li>
    <p>Conexión desde el cliente del escenario 2</p>

    <p><img src="/assets/images/vpn/B/16.png" alt="16" /></p>
  </li>
</ul>

<h2 id="conclusiones">Conclusiones</h2>

<p>Una VPN site to site es una solución muy útil para conectar dos redes privadas de forma segura. En este caso, hemos utilizado OpenVPN, pero existen otras soluciones como IPsec, que también son muy interesantes.</p>

<p>En este caso, hemos utilizado dos escenarios, pero también se podría utilizar un solo escenario, con dos clientes conectados a un servidor VPN.</p>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Introducción En este post vamos a configurar una conexión VPN sitio a sitio entre dos equipos:]]></summary></entry><entry><title type="html">Servidor de correo en los servidores de clase</title><link href="/hlc+sri/2023/01/10/correo.html" rel="alternate" type="text/html" title="Servidor de correo en los servidores de clase" /><published>2023-01-10T11:59:07+01:00</published><updated>2023-01-10T11:59:07+01:00</updated><id>/hlc+sri/2023/01/10/correo</id><content type="html" xml:base="/hlc+sri/2023/01/10/correo.html"><![CDATA[<p>En este post, vamos a implementar en nuestro <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a> un servidor de correo.</p>

<p><img src="/assets/images/escenario/escenario.png" alt="Escenario" /></p>

<h1 id="ejercicio-1">Ejercicio 1</h1>

<p>Instalaremos y configuraremos un servidor de correo en <code class="language-plaintext highlighter-rouge">delta</code>. El nombre del sistema de correo será nuestro nombre de dominio <code class="language-plaintext highlighter-rouge">maria.gonzalonazareno.org</code>.</p>

<p>Utilizando la utilidad mail manda un correo desde un usuario del servidor a otro usuario del servidor. El usuario destinatario debe leer el correo con el mismo programa.</p>

<h2 id="preparación-del-escenario">Preparación del escenario</h2>

<ul>
  <li>
    <p>Instalamos el servidor de correo</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>postfix bsd-mailx
</code></pre></div>    </div>
  </li>
  <li>
    <p>Realizamos una prueba de envío de correo</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola"</span> | mail <span class="nt">-s</span> <span class="s2">"Prueba"</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/1.png" alt="1" /></p>
  </li>
</ul>

<h1 id="ejercicio-2">Ejercicio 2</h1>

<p>Configura tu servidor de correo para que use como relay el servidor de correo de nuestra <code class="language-plaintext highlighter-rouge">red babuino-smtp.gonzalonazareno.org</code>. Con la utilidad <code class="language-plaintext highlighter-rouge">mail</code> envía un correo a tu cuenta personal de gmail, hotmail,…</p>

<p>Muestra el log del sistema donde se comprueba que el correo se ha enviado con éxito.</p>

<p>Comprueba las cabeceras del correo que has recibido e indica donde vemos los servidores por los que ha pasado el correo.</p>

<ul>
  <li>
    <p>Nos disponemos a usar el servidor de correo de la red babuino</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/postfix/main.cf
</code></pre></div>    </div>

    <p>Y añadimos la siguiente línea</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  relayhost <span class="o">=</span> babuino-smtp.gonzalonazareno.org
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Reiniciamos el servicio</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl restart postfix
</code></pre></div>    </div>
  </li>
  <li>
    <p>Enviamos un correo a nuestro correo personal</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola"</span> | mail <span class="nt">-s</span> <span class="s2">"Prueba"</span> <span class="nt">-r</span> <span class="s2">"mariajesus.alloza@outlook.es"</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/3.jpg" alt="3" /></p>
  </li>
  <li>
    <p>Comprobamos el log del sistema</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo tail</span> <span class="nt">-f</span> /var/log/mail.log
</code></pre></div>    </div>

    <p><img src="/assets/images/correo/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Comprobamos las cabeceras del correo que hemos recibido</p>

    <p><img src="/assets/images/correo/5.png" alt="5" /></p>
  </li>
</ul>

<h1 id="ejercicio-3">Ejercicio 3</h1>

<p>En este ejercicio debemos responder desde nuestra cuenta de correo personal al correo que recibimos en el ejercicio anterior. Recuerda que para que todo funcione debemos indicarle al profesor el nombre de tu dominio para que configure de manera adecuada el parámetro <code class="language-plaintext highlighter-rouge">relay_domains</code> en <code class="language-plaintext highlighter-rouge">babuino-smtp</code>. Además debes configurar de manera adecuada el registro MX de tu servidor DNS.</p>

<p>Muestra el log del sistema donde se comprueba que el correo se ha recibido con éxito.</p>

<ul>
  <li>
    <p>Nos logueamos en <code class="language-plaintext highlighter-rouge">alfa</code> y configuramos la regla DNAT para que los emails que lleguen a <code class="language-plaintext highlighter-rouge">babuino-smtp</code> sean redirigidos a <code class="language-plaintext highlighter-rouge">delta</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  post-up iptables <span class="nt">-t</span> nat <span class="nt">-A</span> PREROUTING <span class="nt">-p</span> tcp <span class="nt">--dport</span> 25 <span class="nt">-i</span> ens3 <span class="nt">-j</span> DNAT <span class="nt">--to</span> 192.168.0.3
</code></pre></div>    </div>
  </li>
  <li>
    <p>En el contenedor <code class="language-plaintext highlighter-rouge">charlie</code> configuramos el registro MX de nuestro dominio</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>nano <span class="nt">-cl</span> /var/cache/bind/db.externa.mariajesus.gonzalonazareno.org
 <span class="nt">---</span>
 @       IN      MX  10  alfa.mariajesus.gonzalonazareno.org.
</code></pre></div>    </div>
  </li>
  <li>
    <p>Vamos a probar si hemos recibido algún correo, ejecutaremos lo siguiente</p>

    <p><img src="/assets/images/correo/6.png" alt="6" /></p>

    <p><img src="/assets/images/correo/7.png" alt="7" /></p>

    <p><img src="/assets/images/correo/8.png" alt="8" /></p>
  </li>
</ul>

<h1 id="ejercicio-extra">Ejercicio Extra</h1>

<p>Vamos a mandarle un correo electrónico al profesor, comprobando que el correo se ha recibido con éxito y puede ser respondido, por lo que la respuesta nos llegará a nuestra cuenta de correo personal.</p>

<h1 id="comprobación">Comprobación</h1>

<ol>
  <li>Prueba de funcionamiento del ejercicio1. Se debe mostrar el log para asegurarse que se ha enviado el correo.</li>
</ol>

<p><img src="/assets/images/correo/4.png" alt="4" /></p>

<ol>
  <li>Muestra las cabeceras del correo recibido en el ejercicio 2 mostrando las cabeceras donde vemos los servidores por los que ha pasado el correo.</li>
</ol>

<p><img src="/assets/images/correo/5.png" alt="5" /></p>

<ol>
  <li>Muestra el log del sistema donde se comprueba que el correo se ha recibido con éxito en el ejercicio 3.</li>
</ol>

<p><img src="/assets/images/correo/8.png" alt="8" /></p>

<ol>
  <li><strong>Ejercicio propuesto por el profesor</strong>:</li>
</ol>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[En este post, vamos a implementar en nuestro escenario un servidor de correo.]]></summary></entry><entry><title type="html">Desarrollo y despliegue de una aplicación Java simple</title><link href="/iaw/2023/01/09/java-simple.html" rel="alternate" type="text/html" title="Desarrollo y despliegue de una aplicación Java simple" /><published>2023-01-09T12:47:17+01:00</published><updated>2023-01-09T12:47:17+01:00</updated><id>/iaw/2023/01/09/java-simple</id><content type="html" xml:base="/iaw/2023/01/09/java-simple.html"><![CDATA[<p>En este post vamos a crear una aplicación Java simple y desplegarla en un servidor Tomcat con Maven.</p>

<p><strong>Tomcat</strong> es un servidor web que permite ejecutar aplicaciones Java. En este post vamos a ver como desplegar una aplicación Java en un servidor Tomcat.</p>

<p>Mientras que <strong>Maven</strong> es una herramienta de construcción de software que nos permite gestionar el ciclo de vida de un proyecto Java. En este post vamos a ver como crear un proyecto Java con Maven.</p>

<h2 id="escenario">Escenario</h2>
<ol>
  <li>
    <p>Instala tomcat9 como hemos visto en la documentación.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt <span class="nb">install </span>tomcat9 tomcat9-admin
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configuramos el panel de administración Tomcat-Manager y configúralo para su acceso.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> nano /etc/tomcat9/tomcat-users.xml
</code></pre></div>    </div>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;tomcat-users&gt;</span>
     <span class="nt">&lt;role</span> <span class="na">rolename=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
     <span class="nt">&lt;user</span> <span class="na">username=</span><span class="s">"tomcat"</span> <span class="na">password=</span><span class="s">"s3cret"</span> <span class="na">roles=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
 <span class="nt">&lt;/tomcat-users&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Instala la aplicación maven que nos va a ayudar a compilar aplicaciones java.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt <span class="nb">install </span>maven
</code></pre></div>    </div>
  </li>
  <li>
    <p>A continuación vamos a generar un proyecto, que será el esqueleto de nuestra aplicación Java, para ello ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mvn archetype:generate <span class="nt">-DgroupId</span><span class="o">=</span>com.app.example <span class="nt">-DartifactId</span><span class="o">=</span>java-app <span class="nt">-DarchetypeArtifactId</span><span class="o">=</span>maven-archetype-quickstart <span class="nt">-DinteractiveMode</span><span class="o">=</span><span class="nb">false</span>
</code></pre></div>    </div>

    <p>La estructura de nuestro directorio sería la siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> java-app/
 ├── pom.xml
 └── src
     ├── main
     │   ├── java
     │   │   └── com
     │   │       └── app
     │   │           └── example
     │   │               └── App.java
     │   └── resources
     └── <span class="nb">test</span>
         └── java
             └── com
                 └── app
                     └── example
                         └── AppTest.java
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">java-app/pom.xml</code> para que tenga la siguiente estructura:</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="cp">&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;</span>
     <span class="nt">&lt;project</span> <span class="na">xmlns =</span> <span class="s">"http://maven.apache.org/POM/4.0.0"</span> 
        <span class="na">xmlns:xsi =</span> <span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>

     <span class="na">xsi:schemaLocation =</span> <span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

        <span class="nt">&lt;groupId&gt;</span>com.tutorialspoint<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>hello-world<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>

        <span class="nt">&lt;parent&gt;</span>
           <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
           <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
           <span class="nt">&lt;version&gt;</span>2.3.0.RELEASE<span class="nt">&lt;/version&gt;</span>
           <span class="nt">&lt;relativePath/&gt;</span> 
        <span class="nt">&lt;/parent&gt;</span>

        <span class="nt">&lt;properties&gt;</span>
           <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
           <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
           <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
           <span class="nt">&lt;tomcat.version&gt;</span>9.0.37<span class="nt">&lt;/tomcat.version&gt;</span>
        <span class="nt">&lt;/properties&gt;</span>

        <span class="nt">&lt;dependencies&gt;</span>
           <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
           <span class="nt">&lt;/dependency&gt;</span>
           <span class="nt">&lt;dependency&gt;</span>  
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>  
     	 <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>  
     	 <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>  
           <span class="nt">&lt;/dependency&gt;</span>   
           <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
           <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>

        <span class="nt">&lt;build&gt;</span>
           <span class="nt">&lt;plugins&gt;</span>
              <span class="nt">&lt;plugin&gt;</span>
                 <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                 <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;/plugin&gt;</span>
           <span class="nt">&lt;/plugins&gt;</span>
        <span class="nt">&lt;/build&gt;</span>

     <span class="nt">&lt;/project&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Construimos la aplicación, y para ello modificamos el fichero <code class="language-plaintext highlighter-rouge">src/main/java/com/app/example/App.java</code> para que tenga la siguiente estructura:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">package</span> <span class="nn">com.app.example</span><span class="o">;</span>

 <span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.builder.SpringApplicationBuilder</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.web.servlet.support.SpringBootServletInitializer</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

 <span class="nd">@SpringBootApplication</span>
 <span class="nd">@RestController</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="kd">extends</span> <span class="nc">SpringBootServletInitializer</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">SpringApplicationBuilder</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">SpringApplicationBuilder</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
       <span class="k">return</span> <span class="n">application</span><span class="o">.</span><span class="na">sources</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
       <span class="k">return</span> <span class="s">"&lt;center&gt;Hola mundo!!!&lt;/center&gt;"</span><span class="o">;</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Construimos la aplicación, y para ello ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mvn package
</code></pre></div>    </div>
  </li>
  <li>
    <p>Copiamos el fichero <code class="language-plaintext highlighter-rouge">java-app/target/hello-world-1.war</code> a la carpeta <code class="language-plaintext highlighter-rouge">/var/lib/tomcat9/webapps/</code> y reiniciamos el servicio de tomcat9.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> systemctl restart tomcat9
</code></pre></div>    </div>

    <p><img src="/assets/images/java-simple/1.png" alt="1" /></p>
  </li>
</ol>

<h2 id="comprobación">Comprobación</h2>
<p>Si accedemos a la ip de nuestro servidor, veremos el mensaje <code class="language-plaintext highlighter-rouge">Hola mundo!!!</code> en el navegador.</p>

<p><img src="/assets/images/java-simple/2.png" alt="2" /></p>

<p>Y si accedemos al Tomcat-Manager, veremos que la aplicación se ha desplegado correctamente.</p>

<p><img src="/assets/images/java-simple/3.png" alt="3" /></p>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[En este post vamos a crear una aplicación Java simple y desplegarla en un servidor Tomcat con Maven.]]></summary></entry><entry><title type="html">Acceso remoto con OpenVPN y certificados x509</title><link href="/seguridad/2023/01/09/vpn.html" rel="alternate" type="text/html" title="Acceso remoto con OpenVPN y certificados x509" /><published>2023-01-09T12:47:17+01:00</published><updated>2023-01-09T12:47:17+01:00</updated><id>/seguridad/2023/01/09/vpn</id><content type="html" xml:base="/seguridad/2023/01/09/vpn.html"><![CDATA[<h2 id="qué-es-una-vpn-y-para-qué-sirve">Qué es una VPN y para qué sirve</h2>

<p>Una VPN (Virtual Private Network) es una red privada virtual que permite conectar dos o más redes privadas entre sí a través de una red pública como Internet. Las VPNs son muy útiles para conectar redes privadas a través de Internet de forma segura, ya que los datos que se transmiten a través de una VPN están cifrados y protegidos de forma que sólo los usuarios autorizados pueden acceder a ellos.</p>

<h2 id="acceso-remoto-con-openvpn-y-certificados-x509">Acceso remoto con OpenVPN y certificados x509</h2>

<p>En este apartado vamos a realizar un VPN de acceso remoto con OpenVPN y certificados x509. Para ello vamos a utilizar una máquina virtual en Proxmox con Debian 11.</p>

<h2 id="preparando-el-escenario">Preparando el escenario</h2>

<ol>
  <li>
    <p>Vamos a crear el escenario con 3 máquinas virtuales en Vagrant. Para ello, creamosun directorio y ejecutamos lo siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> vagrant init
</code></pre></div>    </div>

    <p>Se nos creará el fichero Vagrantfile. Añadimos lo siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
     config.vm.provider :libvirt <span class="k">do</span> |libvirt|
         libvirt.memory <span class="o">=</span> 1024
     end
     config.vm.define :nodo1 <span class="k">do</span> |nodo1|
       nodo1.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
       nodo1.vm.hostname <span class="o">=</span> <span class="s2">"VPNServer"</span>
       nodo1.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
       </span>nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN1"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"192.168.10.10"</span>,
        :mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
       nodo1.vm.network :private_network,
        :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN2"</span>,
        :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
        :ip <span class="o">=&gt;</span> <span class="s2">"192.168.11.10"</span>,
        :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
     config.vm.define :nodo2 <span class="k">do</span> |nodo2|
       nodo2.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
       </span>nodo2.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
       nodo2.vm.hostname <span class="o">=</span> <span class="s2">"VPNClient1"</span>
       nodo2.vm.network :private_network,
         :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN1"</span>,
         :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
         :ip <span class="o">=&gt;</span> <span class="s2">"192.168.10.11"</span>,
         :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
     config.vm.define :nodo3 <span class="k">do</span> |nodo3|
         nodo3.vm.synced_folder <span class="s2">"."</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
         </span>nodo3.vm.box <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
         nodo3.vm.hostname <span class="o">=</span> <span class="s2">"VPNClient2"</span>
         nodo3.vm.network :private_network,
           :libvirt__network_name <span class="o">=&gt;</span> <span class="s2">"VPN2"</span>,
           :libvirt__dhcp_enabled <span class="o">=&gt;</span> <span class="nb">false</span>,
           :ip <span class="o">=&gt;</span> <span class="s2">"192.168.11.11"</span>,
           :libvirt__forward_mode <span class="o">=&gt;</span> <span class="s2">"veryisolated"</span>
     end
 end
</code></pre></div>    </div>
  </li>
</ol>

<ul>
  <li>
    <p>Instalamos <code class="language-plaintext highlighter-rouge">openvpn</code> en <code class="language-plaintext highlighter-rouge">VPNServer</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>openvpn
</code></pre></div>    </div>

    <p>Y activamos el bit de IP forwarding:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div>    </div>
  </li>
  <li>
    <p>La configuración que aparece en el fichero <code class="language-plaintext highlighter-rouge">/usr/share/easy-rsa</code> al fichero <code class="language-plaintext highlighter-rouge">/etc/openvpn</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cp</span> <span class="nt">-r</span> /usr/share/easy-rsa /etc/openvpn
</code></pre></div>    </div>
  </li>
  <li>
    <p>Nos dirigimos al directorio <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/</code> y ejecutamos en la consola <code class="language-plaintext highlighter-rouge">./easyrsa init-pki</code> para inicializar el PKI.</p>

    <p><img src="/assets/images/vpn/A/1.png" alt="1" /></p>
  </li>
</ul>

<h2 id="creamos-la-clave-privada-y-realizamos-la-firma-de-la-misma">Creamos la clave privada y realizamos la firma de la misma</h2>

<ul>
  <li>
    <p>Ya completado el paso anterior, vamos a generar el certificado de la Autoridad de Certificación (CA) y la clave con la que vamos a firmar los certificados del servidor y los clientes.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ./easyrsa build-ca
    
  <span class="c">#Frase de paso: admin</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/vpn/A/2.png" alt="2" /></p>

    <p><strong>NOTA</strong>: La clave privada la encontraremos en <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/pki/private/ca.key</code> y el certificado en <code class="language-plaintext highlighter-rouge">/etc/openvpn/easy-rsa/pki/ca.crt</code>.</p>
  </li>
</ul>

<p>Vamos a generar parámetros Diffie-Helman para la autenticación de los extremos de la VPN. Pero, ¿por qué es necesario? El fin de los parámetros Diffie-Helman es evitar que un atacante pueda descifrar los mensajes cifrados en la VPN. Para ello, se generan dos números primos grandes y se calcula el módulo de su producto. Este módulo se envía a los extremos de la VPN, que lo utilizan para generar una clave de sesión.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa gen-dh
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/3.png" alt="3" /></p>

<p>Ahora le toca elturno al certificado y a la clave privada del servidor, teniendo en cuenta que deshabilitaremos la frase de paso. Para ello, ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa build-server-full server nopass
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/4.png" alt="4" /></p>

<p>Ya configurado el servidor, vamos a ponernos manos a la obra y le toca el turno a <code class="language-plaintext highlighter-rouge">VPNClient1</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa build-client-full client1 nopass
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/5.png" alt="5" /></p>

<p>Realizados todos estos pasos, nos quedaría enviar los ficheros de configuración del servidor hacia el cliente. Por ello, (y para no caer en el desastre de no tener localizados los ficheros de configuración) vamos a crear un directorio en el que almacenarlos.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Creamos el directorio</span>
<span class="nb">mkdir</span> /etc/openvpn/VPNClient1

<span class="c">#Copiamos los ficheros</span>
<span class="nb">cp</span> <span class="nt">-rp</span> /etc/openvpn/easy-rsa/pki<span class="o">{</span>ca.crt,issued/VPNClient1.crt,private/VPNClient1.key<span class="o">}</span>

<span class="c">#Cambiamos los propietarios</span>
<span class="nb">chown</span> <span class="nt">-R</span> vagrant: /etc/openvpn/VPNClient1/

<span class="c">#Enviamos por scp los ficheros al cliente</span>
scp <span class="nt">-r</span> /home/vagrant/VPNClient1 vagrant@192.168.10.11:
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/6.png" alt="6" /></p>

<p><img src="/assets/images/vpn/A/7.png" alt="7" /></p>

<p>Nos dirigimos al servidor y creamos el fichero de configuración con el que configuraremos (valga la redundancia), el tunel VPN.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/openvpn/server/server.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Configuracion del servidor</span>

<span class="c">#Puerto de escucha, protocolo y dispositivo</span>
port 1194
proto udp
dev tun

<span class="c">#Autenticacion</span>
ca /etc/openvpn/easy-rsa/pki/ca.crt
cert /etc/openvpn/easy-rsa/pki/issued/server.crt
key /etc/openvpn/easy-rsa/pki/private/server.key
dh /etc/openvpn/easy-rsa/pki/dh.pem

<span class="c">#Topologia de red</span>
topology subnet

server 10.99.99.0 255.255.255.0
ifconfig-pool-persist /var/log/openvpn/ipp.txt

<span class="c">#Ruta hacia el cliente</span>
push <span class="s2">"route 192.168.11.0 255.255.255.0"</span>


keepalive 10 120
cipher AES-256-CBC
persist-key
persist-tun
status /var/log/openvpn/openvpn-status.log
verb 3
explicit-exit-notify 1
</code></pre></div></div>

<p>Tras toda esta configuración, vamos a habilitar el servicio de OpenVPN y a reiniciar el servicio.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> openvpn-server@server
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/8.png" alt="8" /></p>

<h2 id="configuración-del-cliente">Configuración del cliente</h2>

<p>Ahora en nuestro VPNClient1 vamos a configurar el cliente, y empezaríamos instalando el paquete de OpenVPN y traspasamos los ficheros de configuración del servidor.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>openvpn
<span class="nt">---</span>
<span class="nb">mv </span>VPNClient1 /etc/openvpn/client/
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/9.png" alt="9" /></p>

<p>Será necesario que cambiemos el propietario de los ficheros de configuración y, como hicimos en <code class="language-plaintext highlighter-rouge">VPNServer</code>, crearemos el fichero de configuración del cliente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Cambiamos el propietario</span>
<span class="nb">chown </span>root: /etc//openvpn/client/<span class="k">*</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/openvpn/server/client1.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Configuracion del cliente</span>

<span class="c">#Puerto de escucha, protocolo y dispositivo</span>
client
dev tun
proto udp

<span class="c">#Autenticacion</span>
remote 192.168.10.10 1194
resolv-retry infinite
nobind
persist-key
persist-tun

<span class="c">#Autenticacion</span>
ca /etc/openvpn/client/ca.crt
cert /etc/openvpn/client/VPNClient1.crt
key /etc/openvpn/client/VPNClient1.key

<span class="c">#Topologia de red</span>
remote-cert-tls server
cipher AES-256-CBC
verb 3
</code></pre></div></div>

<p>Habilitamos el servicio de OpenVPN y lo reiniciamos.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> openvpn-client@client1
</code></pre></div></div>

<p><img src="/assets/images/vpn/A/10.png" alt="10" /></p>

<p>Como podemos ver en las siguientes imágenes, el tunel está creado y funcionando.</p>

<p><img src="/assets/images/vpn/A/11.png" alt="11" /></p>

<p>Por último, vamos a cambiar la ruta por defecto de nuestro cliente interno para que pueda usar el servidor como puerta de enlace.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route del default
ip route add default via 192.168.11.10
</code></pre></div></div>

<p>En las imágenes siguientes podemos ver que el cliente tiene acceso a Internet, y el servidor tiene acceso a la red interna del cliente.</p>

<p><img src="/assets/images/vpn/A/12.png" alt="12" /></p>

<h2 id="conclusiones">Conclusiones</h2>

<p>En este ejercicio hemos configurado un servidor OpenVPN, y hemos creado un cliente que se conecta a él. El cliente tiene acceso a Internet, y el servidor tiene acceso a la red interna del cliente.</p>

<p>Es importante destacar que, en este ejercicio, hemos utilizado certificados digitales para la autenticación de los extremos. Esto es debido a que, en la práctica, es la forma más segura de autenticar los extremos de la VPN.</p>

<p>También es importante destacar que, en este ejercicio, hemos utilizado una topología de red en subredes, en la que cada extremo de la VPN tiene una dirección IP propia. Esto es debido a que es la forma más segura de configurar la VPN.</p>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Qué es una VPN y para qué sirve]]></summary></entry><entry><title type="html">Despliegue de aplicaciones Java</title><link href="/iaw/2023/01/09/java-cms.html" rel="alternate" type="text/html" title="Despliegue de aplicaciones Java" /><published>2023-01-09T12:47:17+01:00</published><updated>2023-01-09T12:47:17+01:00</updated><id>/iaw/2023/01/09/java-cms</id><content type="html" xml:base="/iaw/2023/01/09/java-cms.html"><![CDATA[<p>En este post vamos a realizar el despliegue de una aplicación Java en nuestro VPS. Para ello, vamos a utilizar el servidor web Apache Tomcat.</p>

<h1 id="instalación-de-tomcat">Instalación de Tomcat</h1>

<p>Para instalar Tomcat, vamos a utilizar el gestor de paquetes de Debian, <code class="language-plaintext highlighter-rouge">apt-get</code>. Para ello, vamos a ejecutar el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>tomcat9
</code></pre></div></div>

<h2 id="tarea-1-desarrollo-y-despliegue-de-una-aplicación-java">Tarea 1: Desarrollo y despliegue de una aplicación Java</h2>

<p>De forma similar a lo que hemos hecho el <a href="https://sysmaria.netlify.app/iaw/2022/12/28/java-simple.html">despliegue simple</a>, despliegue de forma manual la aplicación Java que encontrarás en <a href="https://github.com/josedom24/rock-paper-scissors">siguiente repositorio</a>.</p>

<ul>
  <li>
    <p>Instalamos git</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>git
</code></pre></div>    </div>
  </li>
  <li>
    <p>Clonamos el repositorio</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git clone https://github.com/josedom24/rock-paper-scissors.git
</code></pre></div>    </div>
  </li>
  <li>
    <p>Nos dirigimos al directorio que se ha creado al clonar el repositorio y ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  mvn package
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>NOTA</strong>: Lo puedes realizar en el mismo escenario en el que hemos realizado este <a href="https://sysmaria.netlify.app/iaw/2023/01/09/java-simple.html">taller</a></p>

<ul>
  <li>
    <p>Nos transferimos el fichero generado en <code class="language-plaintext highlighter-rouge">/target</code> a nuestra máquina local.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  scp <span class="nt">-r</span> roshambo.war maria@172.20.10.8:/home/maria/Documentos
</code></pre></div>    </div>
  </li>
  <li>
    <p>Abrimos en nuestro navegador el manager de tomcat, que en mi caso se encuentra en <code class="language-plaintext highlighter-rouge">http://192.168.122.93:8080/manager/html/</code>, nos dirigimos a la pestaña <code class="language-plaintext highlighter-rouge">WAR file to deploy</code> y seleccionamos el fichero que hemos transferido.</p>

    <p><img src="/assets/images/despliegue-java/1.png" alt="1" /></p>
  </li>
  <li>
    <p>Una vez desplegada, podemos ver que la aplicación java funciona correctamente.</p>

    <p><img src="/assets/images/despliegue-java/2.png" alt="2" /></p>
  </li>
</ul>

<h2 id="tarea-2-despliegue-de-un-cms-java">Tarea 2: Despliegue de un CMS Java</h2>

<ul>
  <li>
    <p>Nos descargamos el <a href="https://cloud.josedomingo.org/index.php/s/cwMj6NAZ4fNMoRA">fichero.war</a></p>
  </li>
  <li>
    <p>Instalamos MySQL y los configuramos de la siguiente manera:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>mariadb-server
</code></pre></div>    </div>

    <p>Creamos el usuario:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  mysql <span class="nt">-u</span> root <span class="nt">-p</span>
  <span class="nt">----</span>
  CREATE USER <span class="s1">'java'</span>@<span class="s1">'localhost'</span> IDENTIFIED BY <span class="s1">'admin'</span><span class="p">;</span>
  GRANT ALL PRIVILEGES ON <span class="k">*</span> <span class="nb">.</span> <span class="k">*</span> TO <span class="s1">'java'</span>@<span class="s1">'localhost'</span> WITH GRANT OPTION<span class="p">;</span>
  FLUSH PRIVILEGES<span class="p">;</span>
  EXIT<span class="p">;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/despliegue-java/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Movemos el fichero.war a la carpeta <code class="language-plaintext highlighter-rouge">/var/lib/tomcat9/webapps/</code>. Como podemos ver en la siguiente imagen, en la tabla de aplicaciones, nos aparece nuestra aplicación <code class="language-plaintext highlighter-rouge">CMS</code>.</p>

    <p><img src="/assets/images/despliegue-java/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Una vez comrobado esto, en nuestro navegador accedemos a <code class="language-plaintext highlighter-rouge">http://&lt;ip-máquina&gt;:8080/opencms/setup/</code></p>

    <p><img src="/assets/images/despliegue-java/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Y procedemos con la instalación:</p>

    <p><img src="/assets/images/despliegue-java/6.png" alt="6" /></p>

    <p><img src="/assets/images/despliegue-java/7.png" alt="7" /></p>

    <p><img src="/assets/images/despliegue-java/8.png" alt="8" /></p>

    <p><img src="/assets/images/despliegue-java/9.png" alt="9" /></p>

    <p><img src="/assets/images/despliegue-java/10.png" alt="10" /></p>
  </li>
  <li>
    <p>Tras toda la instalación, nos aparecerá la siguiente pantalla:</p>

    <p><img src="/assets/images/despliegue-java/11.png" alt="11" /></p>
  </li>
</ul>

<h3 id="modificación-de-opencms">Modificación de OpenCms</h3>

<p>En mi caso le he cambiado el fondo de la página principal, eltítulo y el subtítulo. Para realizarlo, debemos conectarnos como usuario <code class="language-plaintext highlighter-rouge">Admin</code> y contraseña <code class="language-plaintext highlighter-rouge">admin</code>.</p>

<p>Una vez dentro, en las esquinas superiores derecha de cada contenido, nos aparecerá ⭕️ y al pulsar sobre él, nos aparecerá un menú desplegable con la opción <code class="language-plaintext highlighter-rouge">Edit</code>. Al pulsar sobre ella, nos aparecerá una ventana en la que podremos modificar el contenido.</p>

<p>Tras ello, en la esquina superior izquierda, nos aparecerá un 🔄 (Publish) y al pulsar sobre él, se publicará el contenido.</p>

<p><img src="/assets/images/despliegue-java/12.png" alt="12" /></p>

<p>En mi caso, ha quedado de la siguiente manera:</p>

<p><img src="/assets/images/despliegue-java/13.png" alt="13" /></p>

<h2 id="tarea-3-acceso-a-las-aplicaciones">Tarea 3: Acceso a las aplicaciones</h2>

<p>Cuando trabajamos con tomcat no se accedemos directamente al servidor de aplicaciones, se instala un proxy inverso que nos permita el acceso a las aplicaciones. Instala un proxy inverso para acceder a las aplicaciones con las siguientes urls:</p>

<ul>
  <li>
    <p>A la aplicación rock-paper-scissors se accede con la url <code class="language-plaintext highlighter-rouge">java.mariajesus.org/game</code>.</p>
  </li>
  <li>
    <p>A la aplicación OpenCMS se accede con la url <code class="language-plaintext highlighter-rouge">java.mariajesus.org</code>.</p>
  </li>
  <li>
    <p>Lo primero que realizaremos será la instalación de Nginx en nuestra máquina.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>nginx
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos el VirtualHost:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/nginx/sites-available/java.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Vamos a configurarlo de forma que al acceder a <code class="language-plaintext highlighter-rouge">java.mariajesus.org</code> nos redirija a la aplicación OpenCMS y al acceder a <code class="language-plaintext highlighter-rouge">java.mariajesus.org/game</code> nos redirija a la aplicación rock-paper-scissors.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  server <span class="o">{</span>
      listen 80<span class="p">;</span>
      listen <span class="o">[</span>::]:80<span class="p">;</span>

      index index.html index.htm index.nginx-debian.html<span class="p">;</span>

      server_name java.mariajesus.org<span class="p">;</span>

      location / <span class="o">{</span>
          proxy_pass http://localhost:8080/opencms/<span class="p">;</span>
          include proxy_params<span class="p">;</span>
      <span class="o">}</span>

      location /game <span class="o">{</span>
          proxy_pass http://localhost:8080/roshambo/<span class="p">;</span>
          include proxy_params<span class="p">;</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Realizamos el enlace simbólico:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/java.conf /etc/nginx/sites-enabled/java.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Reiniciamos el servicio:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl restart nginx
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/hosts</code> para que nos redirija a nuestra máquina:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/hosts
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  192.168.122.93 java.mariajesus.org
</code></pre></div>    </div>
  </li>
  <li>
    <p>Comprobamos que funciona correctamente:</p>

    <p><strong>OpenCMS</strong>
  <img src="/assets/images/despliegue-java/14.png" alt="14" /></p>

    <p><strong>Rock-Paper-Scissors</strong>
  <img src="/assets/images/despliegue-java/15.png" alt="15" /></p>
  </li>
</ul>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[En este post vamos a realizar el despliegue de una aplicación Java en nuestro VPS. Para ello, vamos a utilizar el servidor web Apache Tomcat.]]></summary></entry><entry><title type="html">Recolección centralizada de logs de sistema, mediante journald</title><link href="/aso/2023/01/04/journald.html" rel="alternate" type="text/html" title="Recolección centralizada de logs de sistema, mediante journald" /><published>2023-01-04T11:59:07+01:00</published><updated>2023-01-04T11:59:07+01:00</updated><id>/aso/2023/01/04/journald</id><content type="html" xml:base="/aso/2023/01/04/journald.html"><![CDATA[<p>En este post, vamos a implementar en nuestro <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a> un sistema de recolección de log mediante journald. Para ello debes, implementar un sistema de recolección de log mediante el paquete <code class="language-plaintext highlighter-rouge">systemd-journal-remote</code>, o similares.</p>

<table>
  <thead>
    <tr>
      <th>Máquina</th>
      <th>Distribución</th>
      <th>IP</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ALFA</td>
      <td>Debian 11</td>
      <td>172.22.201.46</td>
    </tr>
    <tr>
      <td>BETA</td>
      <td>Debian 11</td>
      <td>172.16.0.200</td>
    </tr>
    <tr>
      <td>CHARLIE</td>
      <td>Debian 11</td>
      <td>192.168.0.2</td>
    </tr>
    <tr>
      <td>DELTA</td>
      <td>Debian 11</td>
      <td>192.168.0.6</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/images/escenario/escenario.png" alt="Escenario" /></p>

<h2 id="preparación-del-escenario">Preparación del escenario</h2>

<p>Lo primero que deberemos hacer es instalar en cada una de las máquinas de nuestro escenario, incluyendo los contenedores de LXC, el paquete <code class="language-plaintext highlighter-rouge">systemd-journal-remote</code>:</p>

<ul>
  <li>
    <p>ALFA, CHARLIE y DELTA</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>systemd-journal-remote
</code></pre></div>    </div>
  </li>
  <li>
    <p>BRAVO</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dnf <span class="nb">install </span>systemd-journal-remote
</code></pre></div>    </div>
  </li>
</ul>

<p><img src="/assets/images/journald/1.png" alt="1" /></p>

<h2 id="configuración-de-journald-en-alfa">Configuración de journald EN <strong>ALFA</strong></h2>

<p>En esta máquina, vamos a configurar el servicio <code class="language-plaintext highlighter-rouge">systemd-journal-remote</code> para que recoga los logs de las demás máquinas. Al no hacer uso del https, vamos a desactivarlo en el fichero <code class="language-plaintext highlighter-rouge">/lib/systemd/system/systemd-journal-remote.service</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo grep</span> <span class="nt">--color</span> <span class="nt">-E</span> <span class="nt">--</span> <span class="s1">'--listen-http'</span> /lib/systemd/system/systemd-journal-remote.service
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s/--listen-https=-3/--listen-http=-3/g'</span> /lib/systemd/system/systemd-journal-remote.service
<span class="nb">sudo grep</span> <span class="nt">--color</span> <span class="nt">-E</span> <span class="nt">--</span> <span class="s1">'--listen-http'</span> /lib/systemd/system/systemd-journal-remote.service
</code></pre></div></div>

<p>Reiniciamos el demonio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
</code></pre></div></div>

<p>Activamos el servicio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable </span>systemd-journal-remote.service
systemctl <span class="nb">enable </span>systemd-journal-remote.socket
</code></pre></div></div>

<p>Una vez comprobado que nuestro servicio está activo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl status systemd-journal-remote.service
systemctl status systemd-journal-remote.socket
</code></pre></div></div>

<p><img src="/assets/images/journald/2.png" alt="2" /></p>

<p>Solo nos resta por cerciorarnos que el directorio <code class="language-plaintext highlighter-rouge">/var/log/journal/remote</code> exista y tenga los permisos adecuados. De no ser así, lo creamos y le damos los permisos adecuados:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /var/log/journal/remote
<span class="nb">chown </span>systemd-journal-remote:systemd-journal-remote /var/log/journal/remote
</code></pre></div></div>

<p><img src="/assets/images/journald/3.png" alt="3" /></p>

<p>Como podemos ver, en mi caso, el directorio existe y con los permisos que le pertenece.</p>

<h2 id="configuración-de-los-servidores-bravo-charlie-y-delta">Configuración de los servidores Bravo, Charlie y Delta</h2>

<p>Tras la configuración anterior, el siguiente paso es configurar los clientes para que envíen sus logs a la máquina ALFA. Por ello, vamos a crear un usuario en <code class="language-plaintext highlighter-rouge">bravo</code>, <code class="language-plaintext highlighter-rouge">charlie</code> y <code class="language-plaintext highlighter-rouge">delta</code> que se llame <code class="language-plaintext highlighter-rouge">systemd</code>, perteneciente al grupo <code class="language-plaintext highlighter-rouge">systemd-journal-upload</code> y al que le desactivaremos el login.</p>

<p>Algo a tener en cuenta será que el usuario <code class="language-plaintext highlighter-rouge">systemd</code> tendrá el directorio <code class="language-plaintext highlighter-rouge">home</code> en <code class="language-plaintext highlighter-rouge">/run/systemd</code>, por lo que deberemos crearlo y darle los permisos adecuados:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#BRAVO</span>
<span class="nb">sudo </span>adduser <span class="nt">--system</span> <span class="nt">--home-dir</span> /run/systemd <span class="nt">--no-create-home</span> <span class="nt">--user-group</span> systemd-journal-upload

<span class="c">#CHARLIE y DELTA</span>
<span class="nb">sudo </span>adduser <span class="nt">--system</span> <span class="nt">--home</span> /run/systemd <span class="nt">--no-create-home</span> <span class="nt">--disabled-login</span> <span class="nt">--group</span> systemd-journal-upload
</code></pre></div></div>

<p><img src="/assets/images/journald/4.png" alt="4" /></p>

<p>Una vez configurado el usuario en cada una de los clientes, vamos a configurar el fichero <code class="language-plaintext highlighter-rouge">/etc/systemd/journal-upload.conf</code> para que estos mismos clientes envíen sus logs a la máquina ALFA:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">URL</span><span class="o">=</span>http://alfa.mariajesus.gonzalonazareno.org:19532
</code></pre></div></div>

<p>Activamos el servicio <code class="language-plaintext highlighter-rouge">systemd-journal-upload</code> en cada uno de los clientes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#BRAVO, CHARLIE Y DELTA</span>
<span class="nb">sudo </span>systemctl restart systemd-journal-upload.service
</code></pre></div></div>

<p>Para finalizar, podemos comprobar que en el directorio <code class="language-plaintext highlighter-rouge">/var/log/journal/remote</code> de la máquina ALFA, se han creado los ficheros generados por los logs de los clientes:</p>

<p><img src="/assets/images/journald/5.png" alt="5" /></p>

<p>Haciendo uso del comando journalctl, podemos ver los logs de cada cliente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#BRAVO</span>
<span class="nb">sudo </span>journalctl <span class="nt">--file</span> /var/log/journal/remote/remote-172.16.0.200.journal
</code></pre></div></div>
<p><img src="/assets/images/journald/6.png" alt="6" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#CHARLIE</span>
<span class="nb">sudo </span>journalctl <span class="nt">--file</span> /var/log/journal/remote/remote-192.168.0.2.journal
</code></pre></div></div>

<p><img src="/assets/images/journald/7.png" alt="7" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#DELTA</span>
<span class="nb">sudo </span>journalctl <span class="nt">--file</span> /var/log/journal/remote/remote-192.168.0.3.journal
</code></pre></div></div>

<p><img src="/assets/images/journald/8.png" alt="8" /></p>]]></content><author><name></name></author><category term="ASO" /><summary type="html"><![CDATA[En este post, vamos a implementar en nuestro escenario un sistema de recolección de log mediante journald. Para ello debes, implementar un sistema de recolección de log mediante el paquete systemd-journal-remote, o similares.]]></summary></entry></feed>