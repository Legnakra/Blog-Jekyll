<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-11-28T22:37:32+01:00</updated><id>/feed.xml</id><title type="html">sysmaria</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Configuración de HTTPS en nuestro VPS</title><link href="/iaw/2022/11/27/https.html" rel="alternate" type="text/html" title="Configuración de HTTPS en nuestro VPS" /><published>2022-11-27T10:25:52+01:00</published><updated>2022-11-27T10:25:52+01:00</updated><id>/iaw/2022/11/27/https</id><content type="html" xml:base="/iaw/2022/11/27/https.html"><![CDATA[<h2 id="qué-es-un-certificado-ssl">¿Qué es un certificado SSL?</h2>

<p>Un certificado ssl es un documento que se utiliza para encriptar la información que se envía entre un servidor y un cliente. Este certificado se utiliza para que la información que se envía entre el servidor y el cliente no pueda ser leída por terceros.</p>

<h2 id="cómo-funciona">¿Cómo funciona?</h2>

<p>A grandes rasgos los pasos de una conexión a una web con certificado SSL serían los siguientes.</p>

<ol>
  <li>Un usuario, mediante su navegador se conecta al sitio web</li>
  <li>El navegador solicita al servidor web una identificación.</li>
  <li>El servidor web envía al navegador una copia de su certificado SSL.</li>
  <li>El navegador comprueba si el certificado SSL es confiable. Si el certificado es correcto se envía un mensaje al servidor web.</li>
  <li>El servidor web devuelve un acuse de recibo firmado digitalmente y se inicia una conexión cifrada con SSL.</li>
</ol>

<h2 id="pruebas-de-demostración">Pruebas de demostración</h2>

<ol>
  <li>
    <p>Primero debemos cercionarnos de que nuestro navegador tiene el certificado SSL instalado.</p>

    <p><img src="/assets/images/https/1.png" alt="1" /></p>
  </li>
  <li>¿Qué opción has elegido? ¿Qué pruebas realiza Let’s Encrypt para asegurar que somos los administrados del sitio web al elegir esa opción?
    <ul>
      <li>
        <p>La opción que he elegido enmi caso es la de Wildcard. Esta opción es la que permite que el certificado sea válido para todos los subdominios de un dominio.</p>
      </li>
      <li>
        <p>Valida mediante una string generada de forma aleatoria por Let’s Encrypt y que se debe introducir como registro TXT en el dominio DNS bajo <code class="language-plaintext highlighter-rouge">_acme-challenge.mariatec.es</code>.
Let’s Encrypt hará una petición DNS para que se devuelva dicha string y si coindice, valida la propiedad del dominio.</p>
      </li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> maria@asir:~<span class="nv">$ </span><span class="nb">sudo </span>certbot <span class="nt">--server</span> https://acme-v02.api.letsencrypt.org/directory <span class="nt">-d</span> <span class="k">*</span>.mariatec.es <span class="nt">--manual</span> <span class="nt">--preferred-challenges</span> dns-01 certonly
 Saving debug log to /var/log/letsencrypt/letsencrypt.log
 Plugins selected: Authenticator manual, Installer None
 Requesting a certificate <span class="k">for</span> <span class="k">*</span>.mariatec.es
 Performing the following challenges:
 dns-01 challenge <span class="k">for </span>mariatec.es

 <span class="nt">-------------------------------------------------------------------------------</span>
 Please deploy a DNS TXT record under the name
 _acme-challenge.mariatec.es with the following value:

 <span class="k">*********************************************************</span>

 Before continuing, verify the record is deployed.
 <span class="nt">-------------------------------------------------------------------------------</span>
 Press Enter to Continue
</code></pre></div>    </div>
  </li>
  <li>
    <p>El fichero de configuración de nuestro sitio web debe tener la siguiente configuración:</p>

    <p><img src="/assets/images/https/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Vamos a configurar un crontab para que se renueve el certificado automáticamente cada tres meses. Para ello, debemos ejecutar el siguiente comando:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> maria@asir:~<span class="nv">$ </span><span class="nb">sudo </span>crontab <span class="nt">-e</span>
</code></pre></div>    </div>

    <p>Y al final del fichero añadimos la siguiente línea:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 0 0 27 <span class="k">*</span>/3 <span class="k">*</span> /etc/letsencrypt/certrenew.sh
</code></pre></div>    </div>

    <p><img src="/assets/images/https/3.png" alt="3" /></p>

    <p>Con este cron, que se ejecutará cada 27 de cada 3 meses, se ejecutará el script que hemos creado para renovar el certificado. El script es el siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">#!/bin/bash</span>
 certbot renew <span class="nt">--non-interactive</span> <span class="nt">--no-random-sleep-on-renew</span> <span class="nt">--cert-name</span> mariatec.es
</code></pre></div>    </div>

    <p>Las opciones que están implementadas en el script son las siguientes:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--non-interactive</code>: Se realiza de formaautomática sin intervención del usuario, ya que es una tarea programada.</li>
      <li><code class="language-plaintext highlighter-rouge">--no-random-sleep-on-renew</code>: Se evita que se produzca un retardo aleatorio entre 0 y 30 segundos antes de la renovación. Esto se debe a que let’s encrypt incluye un random wait entre renovaciones para evitar que, en caso de que un usuario se equivoque, se realicen muchas renovaciones en un corto periodo de tiempo. Por ello, con esta opción lo desabilitamos para que la renovación se realice de forma inmediata.</li>
      <li><code class="language-plaintext highlighter-rouge">--cert-name mariatec.es</code>: Especifica el nombre del certificado que se va a renovar. Aunque hayamos pedido un wildcard, si nos dirigimos al directorio <code class="language-plaintext highlighter-rouge">/etc/letsencrypt/live/</code> veremos que se ha creado un directorio por cada subdominio que hemos solicitado. Por ello, debemos especificar el nombre del certificado que queremos renovar.</li>
    </ul>
  </li>
</ol>

<h2 id="comprobación-de-la-configuración">Comprobación de la configuración</h2>

<p>Como podemos ver en las siguientes capturas, la configuración se ha realizado correctamente y nuestro virtualhost esta configurado correctamente para que se pueda acceder a él mediante https.</p>

<p><img src="/assets/images/https/4.png" alt="4" /></p>

<p><img src="/assets/images/https/5.png" alt="5" /></p>]]></content><author><name></name></author><category term="iaw" /><summary type="html"><![CDATA[¿Qué es un certificado SSL?]]></summary></entry><entry><title type="html">Cloud Computing IaaS. OpenStack</title><link href="/hlc+sri/2022/11/17/OpenStack.html" rel="alternate" type="text/html" title="Cloud Computing IaaS. OpenStack" /><published>2022-11-17T08:17:50+01:00</published><updated>2022-11-17T08:17:50+01:00</updated><id>/hlc+sri/2022/11/17/OpenStack</id><content type="html" xml:base="/hlc+sri/2022/11/17/OpenStack.html"><![CDATA[<h2 id="qué-es-openstack">¿Qué es OpenStack?</h2>

<p>OpenStack es un software de código abierto que permite la creación de infraestructuras de nube privada. Es decir, permite crear una nube privada en la que los usuarios pueden crear máquinas virtuales, almacenar datos, etc.</p>

<p>En esta entrada vamos a realizar una serie de pequeños talleres de configuración y gestión.</p>

<h2 id="configuración-del-cliente-vpn">Configuración del cliente VPN</h2>

<p>Para poder acceder a la red local desde el exterior, existe una red privada configurada con OpenVPN que utiliza certificados x509 para autenticar los usuarios y el servidor.</p>

<p>Para ello, vamos a conectarnos desde mi red local a la VPN del centro. Para ello, vamos a utilizar el cliente OpenVPN.</p>

<p>Lo único que vamos a necesitar son dos cosas:</p>

<ul>
  <li>Disponer de un certificado x509 para autenticarnos en el servidor.</li>
  <li>Configurar el cliente OpenVPN con la configuración del servidor.</li>
</ul>

<h3 id="pasos-a-seguir">Pasos a seguir</h3>

<p>Lo primero que deberemos hacer es crear una solicitud de firma del certificado.</p>

<p><strong>¿Cómo?</strong> Pues muy sencillo, vamos a utilizar el comando <code class="language-plaintext highlighter-rouge">openssl</code> para generar una solicitud de firma de certificado.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~ openssl genrsa 4096 <span class="o">&gt;</span> /etc/ssl/private/[nombredemimaquina].key
</code></pre></div></div>

<p>Una vez generado el certificado, vamos a generar la solicitud de firma.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~ openssl req <span class="nt">-new</span> <span class="nt">-key</span> /etc/ssl/private/[nombredemimaquina].key <span class="nt">-out</span> /root/[nombredemimaquina].csr
</code></pre></div></div>

<p>Nos pedirá una serie de valores para identificar al certificado, que tendremos que rellenar correctamente y son:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  C=ES
  ST=Sevilla
  L=Dos Hermanas
  O=IES Gonzalo Nazareno
  OU=Informatica
  CN=[Nombre del equipo] (debe ser único)
</code></pre></div></div>

<p>Una vez generado el certificado, lo tendremos que enviar al administrador de la red para que nos lo firme y nos lo envíe, (en este caso, el profesor del centro).</p>

<p>Tras haber recibido el certificado, lo tendremos que instalar en el equipo. Para ello tendremos que tener instalado el cliente OpenVPN.</p>

<p>Una vez nstalado, debemos crear un fichero con extensión <code class="language-plaintext highlighter-rouge">.conf</code> en el directorio <code class="language-plaintext highlighter-rouge">/etc/openvpn/</code> con el siguiente contenido:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dev tun
  remote sputnik.gonzalonazareno.org
  ifconfig 172.23.0.0 255.255.255.0
  pull
  proto tcp-client
  tls-client
  # remote-cert-tls server
  ca /etc/ssl/certs/gonzalonazareno.crt &lt;- Cambiar por la ruta al certificado de la CA Gonzalo Nazareno (el mismo que utilizamos para la moodle, redmine, etc.)
  cert /etc/openvpn/mut-albertomolina.crt &lt;- Cambiar por la ruta al certificado CRT firmado que nos han devuelto
  key /etc/ssl/private/mut.key &lt;- Cambiar por la ruta a la clave privada, aunque en ese directorio es donde debe estar y con permisos 600
  comp-lzo
  keepalive 10 60
  log /var/log/openvpn-sputnik.log
  verb 1
</code></pre></div></div>

<p>Reiniciamos el servicio y comprobaremos que se haya creado correctamente el tunel y que la regla de encaminamiento adicional para acceder a los equipos que pertenecen a la red local del centro se haya añadido correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~ <span class="nb">sudo </span>systemctl restart
maria@maria-debian:~ ip route
</code></pre></div></div>

<p>También podremos comprobarlo a través de los mensajes del fichero <em>/var/log/openvpn-sputnik.log</em>.</p>

<blockquote>
  <p><strong>Nota 1:</strong> Para que el servicio no se inicie de forma automática, podemos deshabilitarlo con el comando <code class="language-plaintext highlighter-rouge">systemctl disable openvpn.service</code>.</p>
</blockquote>

<blockquote>
  <p><strong>Nota 2:</strong> No se nos debe olvidar actualizar el fichero <em>/etc/hosts</em> para que podamos acceder a los equipos de la red local del centro por su nombre.</p>
</blockquote>

<h3 id="comprobación-de-funcionamiento">Comprobación de funcionamiento</h3>

<p>Desde mi red local de casa, y una vez configurada la IP del interfaz tun0, podemos comprobar que podemos acceder a los equipos de la red local del centro.</p>

<h2 id="gestión-de-redes-en-openstack">Gestión de redes en OpenStack</h2>

<p>En esta sección vamos a ver cómo crear una red en OpenStack. Los siguientes pasos los vamos hacer con el cliente de OpenStack, y entraremos en Horizon para comprobar que, efectivamente, se ha creado correctamente.</p>

<ol>
  <li>
    <p>Vamos a crear una red llamada <code class="language-plaintext highlighter-rouge">red-externa</code> y una subred con DHCP, DNS el <code class="language-plaintext highlighter-rouge">192.168.202.2</code> y direccionamiento <code class="language-plaintext highlighter-rouge">192.168.0.0/24</code>. Crearemos también un router y conectaremos ambas redes a este router.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack network create red-externa
 openstack subnet create <span class="nt">--network</span> red-externa <span class="nt">--subnet-range</span> 192.168.0.0/24 <span class="nt">--dhcp</span> <span class="nt">--gateway</span> 192.168.0.1 <span class="nt">--dns-nameserver</span> 192.168.202.2 subred-externa
</code></pre></div>    </div>

    <p><img src="/assets/images/openstack/1.png" alt="1" /></p>

    <p>Crearemos también un router y conectaremos ambas redes a este router.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack router create router-externo
 openstack router add subnet router-externo subred-externa
 openstack router <span class="nb">set </span>router-externo <span class="nt">--external-gateway</span> ext-net
</code></pre></div>    </div>

    <p><img src="/assets/images/openstack/2.png" alt="2" /></p>
  </li>
  <li>Crearemos una instancia llamada <code class="language-plaintext highlighter-rouge">maquina-router</code>que conectaremos a la nueva red y donde comprobaremos que la IP fija está en el redireccionamiento de la subred, pero ¿podremos aignarle una IP flotante?
    <ul>
      <li>Si, porque está diractamente conectada con la red externa.</li>
    </ul>

    <p>¿Por qué?</p>
    <ul>
      <li>Porque no está abierto el puerto 22 de la vpn.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack server create <span class="nt">--flavor</span> m1.mini <span class="se">\</span>
 <span class="nt">--image</span> <span class="s2">"Debian 11 Bullseye"</span> <span class="se">\</span>
 <span class="nt">--security-group</span> default <span class="se">\</span>
 <span class="nt">--key-name</span> pass <span class="se">\</span>
 <span class="nt">--network</span><span class="o">=</span>red-externa <span class="se">\</span>
 maquina-router
</code></pre></div>    </div>

    <p><img src="/assets/images/openstack/3.png" alt="3" /></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> maria@maria-debian:~<span class="nv">$ </span>openstack floating ip create ext-net
 172.22.200.229
 openstack server add floating ip maquina-router 172.22.200.229
</code></pre></div>    </div>

    <p><img src="/assets/images/openstack/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Creamos una nueva red llamada <code class="language-plaintext highlighter-rouge">red-interna</code> con una subred con DHCP, DNS el <code class="language-plaintext highlighter-rouge">192.168.202.2</code> y direccionamiento <code class="language-plaintext highlighter-rouge">10.0.100.0/24</code>.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack network create red-interna
 openstack subnet create <span class="nt">--network</span> red-interna <span class="nt">--subnet-range</span> 10.0.100.0/24 <span class="nt">--dhcp</span> <span class="nt">--gateway</span> 10.0.100.1 <span class="nt">--dns-nameserver</span> 192.168.202.2 subred-interna
</code></pre></div>    </div>
  </li>
  <li>
    <p>Lo siguiente que realizaremos será conectar la <code class="language-plaintext highlighter-rouge">máquina-router</code> a la nueva red y le asignamos la primera dirección: <code class="language-plaintext highlighter-rouge">10.0.100.1</code>.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack port create <span class="nt">--network</span> red-interna <span class="nt">--fixed-ip</span> ip-address<span class="o">=</span>10.0.100.1 router-port
 openstack server add port maquina-router router-port
</code></pre></div>    </div>

    <p><img src="/assets/images/openstack/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Creamos una nueva instancia llamada <code class="language-plaintext highlighter-rouge">maquina-cliente</code> y la conectamos a la red que hemos llamado <code class="language-plaintext highlighter-rouge">red-interna</code>. Usando los puertos de red, le asignaremos la IP <code class="language-plaintext highlighter-rouge">10.0.100.200</code> y comprobamos si su puerta de enlace es la <code class="language-plaintext highlighter-rouge">máquina-router</code>.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack port create <span class="nt">--network</span> red-interna <span class="nt">--fixed-ip</span> ip-address<span class="o">=</span>10.0.100.200 cliente-port

 openstack server create <span class="nt">--flavor</span> m1.mini <span class="se">\</span>
 <span class="nt">--image</span> <span class="s2">"Debian 11 Bullseye"</span> <span class="se">\</span>
 <span class="nt">--key-name</span> pass <span class="se">\</span>
 <span class="nt">--network</span><span class="o">=</span>red-interna <span class="se">\</span>
 <span class="nt">--port</span> cliente-port <span class="se">\</span>
 maquina-cliente
</code></pre></div>    </div>

    <p>¿Podremos assignarle a esta instancia una IP flotante?¿Por qué?</p>
    <ul>
      <li>No, porque no está conectada directamente con la red externa.</li>
    </ul>
  </li>
  <li>
    <p>Ya montado todo este escenario, vamos a configurar la <code class="language-plaintext highlighter-rouge">máquina-router</code>para que haga de router nat. Sin embargo, las restricciones y la seguridad del cortafuegos que tenemos configurado en cada una de las intrefaces de las instancias no van a permitir que funcione de forma adecuada. Por lo tanto, desactiva la seguridad de la interfaz de <code class="language-plaintext highlighter-rouge">maquina-router</code> y <code class="language-plaintext highlighter-rouge">maquina-cliente</code> conectadas a la red-interna.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack server remove security group maquina-router default
 openstack server remove security group maquina-cliente default
 openstack port <span class="nb">set</span> <span class="nt">--disable-port-security</span> mi-port
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configuramos la instancia maquina-router para que funcione como router-nat. Comprueba que el cliente tiene acceso a internet. Instala un servidor web en el cliente.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ssh <span class="nt">-i</span> ~/.ssh/pass debian@172.22.200.229
 <span class="nt">---</span>
 iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-s</span> 192.168.0.0/24 <span class="nt">-o</span> ens3 <span class="nt">-j</span> MASQUERADE
</code></pre></div>    </div>
  </li>
  <li>Comprobamos del acceso al servidor web de la maquina-cliente desde el exterior.</li>
</ol>]]></content><author><name></name></author><category term="hlc+sri" /><summary type="html"><![CDATA[¿Qué es OpenStack?]]></summary></entry><entry><title type="html">Instalación y migración de una aplicación web PHP</title><link href="/iaw/2022/11/17/migracion.html" rel="alternate" type="text/html" title="Instalación y migración de una aplicación web PHP" /><published>2022-11-17T08:17:50+01:00</published><updated>2022-11-17T08:17:50+01:00</updated><id>/iaw/2022/11/17/migracion</id><content type="html" xml:base="/iaw/2022/11/17/migracion.html"><![CDATA[<h2 id="instalación-previa">Instalación previa</h2>

<p>Para poder realizar la instalación de la aplicación web, vamos a necesitar una serie de herramientas y servicios que vamos a instalar en el servidor. Pero primero lo realizaremos en un escenario local para poder realizar las pruebas necesarias.</p>

<p>El escenario contará con dos máquinas:</p>
<ul>
  <li>Servidor web: conectada a una red pública.</li>
  <li>Servidor de base de datos: conectado a una red privada, conectada a la máquina anterior.</li>
</ul>

<h3 id="creamos-el-lamp">Creamos el LAMP</h3>

<p>Una pila LAMP es un conjunto de software libre que proporciona una plataforma de servidor web. Está formado por los siguientes componentes:</p>

<ul>
  <li>Debian-like Linux: sistema operativo.</li>
  <li>Apache: servidor web.</li>
  <li>MySQL: sistema de gestión de bases de datos.</li>
  <li>PHP: lenguaje de programación.</li>
</ul>

<p>Para crear el LAMP, vamos a utilizar una máquina virtual con Debian 11 Bullseye. Para ello, vamos a utilizar vmware:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt update
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> apache2
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> mariadb-server
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> php
</code></pre></div></div>

<h4 id="modulos-php">Modulos PHP</h4>
<p>Para que las herramientas que instalaremos funcionen correctamente, vamos a instalar una serie de módulos PHP:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>php-imagick php7.4-common php7.4-curl php7.4-gd php7.4-imap php7.4-intl php7.4-json php7.4-ldap php7.4-mbstring php7.4-mysql php7.4-xml php7.4-zip
</code></pre></div></div>

<h4 id="configuración-mariadb">Configuración mariadb</h4>
<p>En cuanto a mysql, se recomienda retirar ajustes predeterminados que son poco seguros y bloquearán el acceso a la base de datos. Para ello, vamos a ejecutar el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mysql_secure_installation
</code></pre></div></div>

<p>Creamos la base de datos para Nextcloud:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-u</span> root <span class="nt">-p</span>
CREATE DATABASE owncloud<span class="p">;</span>
CREATE USER <span class="s1">'maria1'</span>@<span class="s1">'10.0.100.1'</span><span class="p">;</span>
GRANT ALL PRIVILEGES ON owncloud.<span class="k">*</span> TO <span class="s1">'maria1'</span>@<span class="s1">'localhost'</span> IDENTIFIED BY <span class="s1">'admin'</span><span class="p">;</span>
FLUSH PRIVILEGES<span class="p">;</span>
</code></pre></div></div>

<h3 id="owncloud">OWNCLOUD</h3>

<p><img src="/assets/images/migracion/owncloud.png" alt="owncloud" /></p>

<p>Owncloud es un servidor de archivos que permite el <strong>almacenamiento</strong>, la colaboración y el uso compartido seguros. Es conveniente almacenar archivos en la nube, por lo que están disponibles en cualquier dispositivo y se pueden compartir con unos pocos clics.</p>

<p>Ayuda a los usuarios a recuperar su soberanía digital. También proporciona muchas funciones convenientes, pero también almacena archivos de forma segura y eficiente. No hay puertas traseras, puedes comprobarlo. Los usuarios pueden instalar ownCloud ellos mismos o alquilar una instancia administrada.</p>

<h4 id="descargamos-owncloud">Descargamos Owncloud</h4>

<p>Descargamos la aplicación web desde la página oficial de Nextcloud:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://download.owncloud.com/server/stable/owncloud-complete-latest.zip
</code></pre></div></div>
<p>Y la descomprimimos en el directorio <code class="language-plaintext highlighter-rouge">/var/www/</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>unzip owncloud-complete-latest.zip /var/www/
</code></pre></div></div>

<h4 id="creamos-el-virtualhost-para-la-aplicación-web">Creamos el virtualhost para la aplicación web</h4>

<p>Creamos el virtualhost en el fichero <code class="language-plaintext highlighter-rouge">/etc/apache2/sites-available/owncloud.conf</code> con el siguiente contenido:</p>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nl">VirtualHost</span><span class="sr"> *:80</span><span class="p">&gt;
</span>    <span class="nc">ServerName</span> www.maria.org
    <span class="nc">ServerAlias</span> maria.org
    <span class="nc">DocumentRoot</span> /var/www/owncloud
    <span class="nc">ErrorLog</span> /var/log/apache2/cms-error.log
    <span class="nc">CustomLog</span> /var/log/apache2/cms-access.log combined
<span class="p">&lt;/</span><span class="nl">VirtualHost</span><span class="p">&gt;
</span></code></pre></div></div>

<p><img src="/assets/images/migracion/1.png" alt="1" /></p>

<p>Y lo activamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>a2ensite owncloud.conf
</code></pre></div></div>

<h4 id="modificamos-el-fichero-de-configuración-de-owncloud">Modificamos el fichero de configuración de owncloud</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nano /var/www/owncloud/config/config.php
<span class="nt">---</span>
&lt;?php
<span class="nv">$CONFIG</span> <span class="o">=</span> array <span class="o">(</span>
  <span class="s1">'instanceid'</span> <span class="o">=&gt;</span> <span class="s1">'ocb5j2nyqboj'</span>,
  <span class="s1">'passwordsalt'</span> <span class="o">=&gt;</span> <span class="s1">'0+8FRHWahLRZ/Gv9OlXNLB8alnnPop'</span>,
  <span class="s1">'secret'</span> <span class="o">=&gt;</span> <span class="s1">'X/kjusk8xkH7PHSmSb+T9LjlfKZgeTvqVsHoJ3l56CmdbiLM'</span>,
  <span class="s1">'trusted_domains'</span> <span class="o">=&gt;</span> 
  array <span class="o">(</span>
    0 <span class="o">=&gt;</span> <span class="s1">'www.maria.org'</span>,
  <span class="o">)</span>,
  <span class="s1">'datadirectory'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/owncloud/data'</span>,
  <span class="s1">'overwrite.cli.url'</span> <span class="o">=&gt;</span> <span class="s1">'http://www.maria.org'</span>,
  <span class="s1">'dbtype'</span> <span class="o">=&gt;</span> <span class="s1">'mysql'</span>,
  <span class="s1">'version'</span> <span class="o">=&gt;</span> <span class="s1">'10.11.0.6'</span>,
  <span class="s1">'dbname'</span> <span class="o">=&gt;</span> <span class="s1">'owncloud'</span>,
  <span class="s1">'dbhost'</span> <span class="o">=&gt;</span> <span class="s1">'[IP de la máquina]'</span>,
  <span class="s1">'dbtableprefix'</span> <span class="o">=&gt;</span> <span class="s1">'oc_'</span>,
  <span class="s1">'mysql.utf8mb4'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
  <span class="s1">'dbuser'</span> <span class="o">=&gt;</span> <span class="s1">'[usuario de la base de datos]'</span>,
  <span class="s1">'dbpassword'</span> <span class="o">=&gt;</span> <span class="s1">'[contraseña de la base de datos]'</span>,
  <span class="s1">'allow_user_to_change_mail_address'</span> <span class="o">=&gt;</span> <span class="s1">''</span>,
  <span class="s1">'logtimezone'</span> <span class="o">=&gt;</span> <span class="s1">'UTC'</span>,
  <span class="s1">'apps_paths'</span> <span class="o">=&gt;</span> 
  array <span class="o">(</span>
    0 <span class="o">=&gt;</span> 
    array <span class="o">(</span>
      <span class="s1">'path'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/owncloud/apps'</span>,
      <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="s1">'/apps'</span>,
      <span class="s1">'writable'</span> <span class="o">=&gt;</span> <span class="nb">false</span>,
    <span class="o">)</span>,
    1 <span class="o">=&gt;</span> 
    array <span class="o">(</span>
      <span class="s1">'path'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/owncloud/apps-external'</span>,
      <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="s1">'/apps-external'</span>,
      <span class="s1">'writable'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
    <span class="o">)</span>,
  <span class="o">)</span>,
  <span class="s1">'installed'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="reiniciamos-el-servicio-apache">Reiniciamos el servicio apache</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>systemctl restart apache2
</code></pre></div></div>

<p>Y modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/hosts</code> para añadir la IP de la máquina y el nombre de dominio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nano /etc/hosts
<span class="nt">---</span>
<span class="o">[</span>IP de la máquina] maria.org  www.maria.org
</code></pre></div></div>

<p><img src="/assets/images/migracion/2.png" alt="2" /></p>

<p>Comprobamos que la aplicación web funciona correctamente:</p>

<p><img src="/assets/images/migracion/3.png" alt="3" /></p>

<p>Y en mi caso he instalado módulos de galería y música para poder probarlos:</p>

<p><img src="/assets/images/migracion/4.png" alt="4" /></p>

<h3 id="nextcloud">NEXTCLOUD</h3>

<p><img src="/assets/images/migracion/nextcloud.png" alt="nextcloud" /></p>

<p>Nextcloud es un software de código abierto, desarrollado por primera vez en 2016, que le permite ejecutar un servicio de almacenamiento en la nube personal. Tiene características que son comparables a otros servicios como Dropbox.</p>

<p>El software del servidor Nextcloud se puede instalar de forma gratuita en Linux, y el software del cliente se puede instalar en computadoras con Windows, OS X o Linux. Las aplicaciones móviles también están disponibles para Android e iOS.</p>

<h4 id="descargamos-nextcloud">Descargamos Nextcloud</h4>

<p>Descargamos la aplicación web desde la página oficial de Nextcloud:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wget https://download.nextcloud.com/server/releases/nextcloud-22.0.2.zip
</code></pre></div></div>

<h4 id="creamos-el-virtualhost-para-la-aplicación-web-1">Creamos el virtualhost para la aplicación web</h4>

<p>Creamos el virtualhost en el fichero <code class="language-plaintext highlighter-rouge">/etc/apache2/sites-available/owncloud.conf</code> con el siguiente contenido:</p>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nl">VirtualHost</span><span class="sr"> *:80</span><span class="p">&gt;
</span>    <span class="nc">ServerName</span> www.cloud.maria.org
    <span class="nc">ServerAlias</span> cloud.maria.org
    <span class="nc">DocumentRoot</span> /var/www/cms/nextcloud
    <span class="nc">ErrorLog</span> /var/log/apache2/cms-error.log
    <span class="nc">CustomLog</span> /var/log/apache2/cms-access.log combined
<span class="p">&lt;/</span><span class="nl">VirtualHost</span><span class="p">&gt;
</span></code></pre></div></div>

<p><img src="/assets/images/migracion/5.png" alt="5" /></p>

<h4 id="modificamos-el-fichero-de-configuración-de-nextcloud">Modificamos el fichero de configuración de Nextcloud</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nano /var/www/cms/nextcloud/config/config.php
<span class="nt">---</span>
&lt;?php
<span class="nv">$CONFIG</span> <span class="o">=</span> array <span class="o">(</span>
  <span class="s1">'instanceid'</span> <span class="o">=&gt;</span> <span class="s1">'ocg57xu3tev6'</span>,
  <span class="s1">'passwordsalt'</span> <span class="o">=&gt;</span> <span class="s1">'z3kK/NjSDcqfrEvfLi6PoZAbnL4gYk'</span>,
  <span class="s1">'secret'</span> <span class="o">=&gt;</span> <span class="s1">'OswK3Xxvl7YzGtVbtpf/brvT/niZD4NIziidcWtWG5nqd/ny'</span>,
  <span class="s1">'trusted_domains'</span> <span class="o">=&gt;</span>
  array <span class="o">(</span>
    0 <span class="o">=&gt;</span> <span class="s1">'www.maria.org'</span>,
    1 <span class="o">=&gt;</span> <span class="s1">'cloud.maria.org'</span>,
  <span class="o">)</span>,
  <span class="s1">'datadirectory'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/cms/nextcloud/data'</span>,
  <span class="s1">'dbtype'</span> <span class="o">=&gt;</span> <span class="s1">'mysql'</span>,
  <span class="s1">'version'</span> <span class="o">=&gt;</span> <span class="s1">'20.0.2.2'</span>,
  <span class="s1">'overwrite.cli.url'</span> <span class="o">=&gt;</span> <span class="s1">'http://www.maria.org'</span>,
  <span class="s1">'dbname'</span> <span class="o">=&gt;</span> <span class="s1">'nextcloud'</span>,
  <span class="s1">'dbhost'</span> <span class="o">=&gt;</span> <span class="s1">'[IP de la máquina]'</span>,
  <span class="s1">'dbport'</span> <span class="o">=&gt;</span> <span class="s1">''</span>,
  <span class="s1">'dbtableprefix'</span> <span class="o">=&gt;</span> <span class="s1">'oc_'</span>,
  <span class="s1">'mysql.utf8mb4'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
  <span class="s1">'dbuser'</span> <span class="o">=&gt;</span> <span class="s1">'[usuario de la base de datos]'</span>,
  <span class="s1">'dbpassword'</span> <span class="o">=&gt;</span> <span class="s1">'[contraseña de la base de datos]'</span>,
  <span class="s1">'installed'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="reiniciamos-el-servicio-apache-1">Reiniciamos el servicio apache</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>systemctl restart apache2
</code></pre></div></div>

<p>Ya no es necesario modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/hosts</code> ya que lo hemos hecho en el anterior virtualhost.</p>

<p>Comprobamos que la aplicación web funciona correctamente:</p>

<p><img src="/assets/images/migracion/6.png" alt="6" /></p>

<h2 id="preparando-la-migración">Preparando la migración</h2>

<ol>
  <li>Realizamos una copia de seguridad de la base de datos.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#nextcloud</span>
mysqldump <span class="nt">-v</span> <span class="nt">--opt</span> <span class="nt">--events</span> <span class="nt">--routines</span> <span class="nt">--triggers</span> <span class="nt">--default-character-set</span><span class="o">=</span>utf8 <span class="nt">-u</span> maria <span class="nt">-p</span> nextcloud <span class="o">&gt;</span> db_backup_nextcloud<span class="sb">`</span><span class="nb">date</span> +%Y%m%d_%H%M%S<span class="sb">`</span>.sql
<span class="nt">---</span>
<span class="c">#owncloud</span>
mysqldump <span class="nt">-v</span> <span class="nt">--opt</span> <span class="nt">--events</span> <span class="nt">--routines</span> <span class="nt">--triggers</span> <span class="nt">--default-character-set</span><span class="o">=</span>utf8 <span class="nt">-u</span> maria1 <span class="nt">-p</span> ouncloud <span class="o">&gt;</span> db_backup_owncloud<span class="sb">`</span><span class="nb">date</span> +%Y%m%d_%H%M%S<span class="sb">`</span>.sql
</code></pre></div></div>

<ol>
  <li>Comprimimos el directorio de la copia de la base de datos.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zip <span class="nt">-r</span> owncloud owncloud
zip <span class="nt">-r</span> nextcloud nextcloud
</code></pre></div></div>

<ol>
  <li>Copiamos los ficheros de las aplicaciones web y las copias de seguridad de las bases de datos a la nueva máquina.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#aplicaciones web</span>
scp <span class="nt">-r</span> owncloud.zip nextcloud.zip maria@asir.mariatec.es:/home/maria
<span class="c">#copias de seguridad de las bases de datos</span>
scp <span class="nt">-r</span> db_backup_nextcloud20221123_220950.sql maria@mariatec.es:/home/maria
scp <span class="nt">-r</span> db_backup_owncloud20221123_220959.sql maria@mariatec.es:/home/maria
</code></pre></div></div>

<ol>
  <li>Creamos la base de datos en el nuevo servidor.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-u</span> root <span class="nt">-p</span>
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">nextcloud</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'maria'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">nextcloud</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">'maria'</span><span class="o">@</span><span class="s1">'localhost'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">'****'</span><span class="p">;</span>
<span class="n">FLUSH</span> <span class="k">PRIVILEGES</span><span class="p">;</span>
<span class="c1">---</span>
<span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">owncloud</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'maria1'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">owncloud</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">'maria1'</span><span class="o">@</span><span class="s1">'localhost'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">'****'</span><span class="p">;</span>
<span class="n">FLUSH</span> <span class="k">PRIVILEGES</span><span class="p">;</span>
</code></pre></div></div>

<ol>
  <li>Realizamos la restauración de la base de datos.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-u</span> maria <span class="nt">--password</span><span class="o">=</span><span class="k">****</span> nextcloud &lt; db_backup_nextcloud20221123_220950.sql
mysql <span class="nt">-u</span> maria1 <span class="nt">--password</span><span class="o">=</span><span class="k">****</span> owncloud &lt; db_backup_owncloud20221123_220959.sql
</code></pre></div></div>

<ol>
  <li>Descomprimimos los ficheros de las aplicaciones web.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unzip owncloud.zip <span class="nt">-d</span> /var/www/
unzip nextcloud.zip <span class="nt">-d</span> /var/www/
</code></pre></div></div>

<h2 id="migración-de-ambas-aplicaciones-a-un-mismo-virtualhost">Migración de ambas aplicaciones a un mismo virtualhost</h2>

<p>La migración es un proceso que consiste en pasar de un sistema a otro, en este caso, de un servidor a otro. Para ello, vamos a realizar una serie de pasos que nos permitirán realizar la migración de la aplicación web.</p>

<p>En este caso, vamos a realizar la migración, pero vamos a realizarlo en un LEMP. Pero, ¿que es un LEMP? Para simplificar, es exactamente lo mismo que un LAMP, pero con Nginx en lugar de Apache.</p>

<h3 id="preparando-el-nuevo-servidor">Preparando el nuevo servidor</h3>

<p>Instalamos el LEMP:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt update
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> nginx
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> mariadb-server
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> php
</code></pre></div></div>

<blockquote>
  <p><strong>Nota:</strong> A veces, cuando instalamos php no debería de instalarse apache2, pero en ocasiones, si que lo hace. Si es así, lo desinstalamos o lo deshabilitamos.</p>
</blockquote>

<h3 id="nextcloud-1">Nextcloud</h3>

<p><img src="/assets/images/migracion/nextcloud.png" alt="nextcloud" /></p>

<ul>
  <li>Primero crearemos el fichero para configurar el virtualhost en el servidor web. Lo haremos de forma en la que podamos acceder a través de <code class="language-plaintext highlighter-rouge">www.maria.es/cloud</code>.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/nginx/sites-available/nextcloud.conf
</code></pre></div></div>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
        <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>

        <span class="kn">server_name</span> <span class="s">www.mariatec.es</span><span class="p">;</span>

        <span class="kn">root</span> <span class="n">/var/www</span><span class="p">;</span>

        <span class="kn">index</span> <span class="s">index.html</span> <span class="s">index.htm</span> <span class="s">index.php</span><span class="p">;</span>

        <span class="kn">location</span> <span class="p">=</span><span class="n">/</span> <span class="p">{</span>
                <span class="kn">return</span> <span class="mi">301</span> <span class="nv">$scheme</span><span class="p">:</span><span class="n">//www.mariatec.es/cloud</span><span class="p">;</span>
                <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri</span><span class="n">/</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kn">location</span> <span class="s">@rewrite</span> <span class="p">{</span>
                <span class="kn">rewrite</span> <span class="s">^/(.*)</span>$ <span class="n">/index.php?q=</span><span class="nv">$1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php$</span> <span class="p">{</span>
                <span class="kn">include</span> <span class="nc">snippets/fastcgi-php</span><span class="s">.conf</span><span class="p">;</span>
                <span class="kn">fastcgi_pass</span> <span class="s">unix:/run/php/php7.4-fpm.sock</span><span class="p">;</span>
        <span class="p">}</span>

	<span class="kn">location</span> <span class="p">=</span> <span class="n">/robots.txt</span> <span class="p">{</span>
                <span class="kn">allow</span> <span class="s">all</span><span class="p">;</span>
                <span class="kn">log_not_found</span> <span class="no">off</span><span class="p">;</span>
                <span class="kn">access_log</span> <span class="no">off</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kn">location</span> <span class="n">/.well-known</span> <span class="p">{</span>
                <span class="kn">rewrite</span> <span class="s">^/</span><span class="err">\</span><span class="s">.well-known/host-meta</span><span class="err">\</span><span class="s">.json</span>  <span class="n">/cloud/public.php?service=host-meta-json</span>    <span class="s">last</span><span class="p">;</span>
                <span class="kn">rewrite</span> <span class="s">^/</span><span class="err">\</span><span class="s">.well-known/host-meta</span>        <span class="n">/cloud/public.php?service=host-meta</span>         <span class="s">last</span><span class="p">;</span>
                <span class="kn">rewrite</span> <span class="s">^/</span><span class="err">\</span><span class="s">.well-known/webfinger</span>        <span class="n">/cloud/public.php?service=webfinger</span>         <span class="s">last</span><span class="p">;</span>
                <span class="kn">rewrite</span> <span class="s">^/</span><span class="err">\</span><span class="s">.well-known/nodeinfo</span>         <span class="n">/cloud/public.php?service=nodeinfo</span>          <span class="s">last</span><span class="p">;</span>

                <span class="kn">location</span> <span class="p">=</span> <span class="n">/.well-known/carddav</span>   <span class="p">{</span> <span class="kn">return</span> <span class="mi">301</span> <span class="n">/cloud/remote.php/dav/</span><span class="p">;</span> <span class="p">}</span>
                <span class="kn">location</span> <span class="p">=</span> <span class="n">/.well-known/caldav</span>    <span class="p">{</span> <span class="kn">return</span> <span class="mi">301</span> <span class="n">/cloud/remote.php/dav/</span><span class="p">;</span> <span class="p">}</span>

                <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri</span><span class="n">/</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
        <span class="p">}</span>

<span class="c1">#Nextcloud Configuration</span>

        <span class="kn">location</span> <span class="s">^~</span> <span class="n">/cloud</span> <span class="p">{</span>
                <span class="kn">client_max_body_size</span> <span class="mi">512M</span><span class="p">;</span>
                <span class="kn">fastcgi_buffers</span> <span class="mi">64</span> <span class="mi">4K</span><span class="p">;</span>

                <span class="kn">gzip</span> <span class="no">on</span><span class="p">;</span>
                <span class="kn">gzip_vary</span> <span class="no">on</span><span class="p">;</span>
                <span class="kn">gzip_comp_level</span> <span class="mi">4</span><span class="p">;</span>
                <span class="kn">gzip_min_length</span> <span class="mi">256</span><span class="p">;</span>
                <span class="kn">gzip_proxied</span> <span class="s">expired</span> <span class="s">no-cache</span> <span class="s">no-store</span> <span class="s">private</span> <span class="s">no_last_modified</span> <span class="s">no_etag</span> <span class="s">auth</span><span class="p">;</span>
                <span class="kn">gzip_types</span> <span class="nc">application/atom</span><span class="s">+xml</span> <span class="nc">application/javascript</span> <span class="nc">application/json</span> <span class="nc">application/ld</span><span class="s">+json</span> <span class="nc">application/manifest</span><span class="s">+json</span> <span class="nc">application/rss</span><span class="s">+xml</span> <span class="nc">application/vnd</span><span class="s">.geo+json</span> <span class="nc">application/vnd</span><span class="s">.ms-fontobject</span> <span class="s">a</span>$

                <span class="s">add_header</span> <span class="s">Referrer-Policy</span>                      <span class="s">"no-referrer"</span>   <span class="s">always</span><span class="p">;</span>
                <span class="kn">add_header</span> <span class="s">X-Content-Type-Options</span>               <span class="s">"nosniff"</span>       <span class="s">always</span><span class="p">;</span>
                <span class="kn">add_header</span> <span class="s">X-Download-Options</span>                   <span class="s">"noopen"</span>        <span class="s">always</span><span class="p">;</span>
                <span class="kn">add_header</span> <span class="s">X-Frame-Options</span>                      <span class="s">"SAMEORIGIN"</span>    <span class="s">always</span><span class="p">;</span>
                <span class="kn">add_header</span> <span class="s">X-Permitted-Cross-Domain-Policies</span>    <span class="s">"none"</span>          <span class="s">always</span><span class="p">;</span>
                <span class="kn">add_header</span> <span class="s">X-Robots-Tag</span>                         <span class="s">"none"</span>          <span class="s">always</span><span class="p">;</span>
                <span class="kn">add_header</span> <span class="s">X-XSS-Protection</span>                     <span class="s">"1</span><span class="p">;</span> <span class="kn">mode=block"</span> <span class="s">always</span><span class="p">;</span>

                <span class="kn">fastcgi_hide_header</span> <span class="s">X-ed-By</span><span class="p">;</span>
                <span class="kn">index</span> <span class="s">index.php</span> <span class="s">index.html</span> <span class="n">/cloud/index.php</span><span class="nv">$request_uri</span><span class="p">;</span>

                <span class="kn">expires</span> <span class="mi">1m</span><span class="p">;</span>

        	<span class="kn">location</span> <span class="p">=</span> <span class="n">/cloud</span> <span class="p">{</span>
            		<span class="kn">if</span> <span class="s">(</span> <span class="nv">$http_user_agent</span> <span class="p">~</span> <span class="sr">^DavClnt</span> <span class="s">)</span> <span class="p">{</span>
                		<span class="kn">return</span> <span class="mi">302</span> <span class="n">/cloud/remote.php/webdav/</span><span class="nv">$is_args$args</span><span class="p">;</span>
            		<span class="p">}</span>
        	<span class="p">}</span>

        	<span class="kn">location</span> <span class="p">~</span> <span class="sr">^/cloud/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)</span>    <span class="p">{</span> <span class="kn">return</span> <span class="mi">404</span><span class="p">;</span> <span class="p">}</span>
        	<span class="kn">location</span> <span class="p">~</span> <span class="sr">^/cloud/(?:\.|autotest|occ|issue|indie|db_|console)</span>                <span class="p">{</span> <span class="kn">return</span> <span class="mi">404</span><span class="p">;</span> <span class="p">}</span>

        	<span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php(?:$|/)</span> <span class="p">{</span>
            		<span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+?</span><span class="err">\</span><span class="s">.php)(/.*)</span>$<span class="p">;</span>
           		<span class="kn">set</span> <span class="nv">$path_info</span> <span class="nv">$fastcgi_path_info</span><span class="p">;</span>

            		<span class="kn">try_files</span> <span class="nv">$fastcgi_script_name</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>

            		<span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
            		<span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
            		<span class="kn">fastcgi_param</span> <span class="s">PATH_INFO</span> <span class="nv">$path_info</span><span class="p">;</span>

            		<span class="kn">fastcgi_param</span> <span class="s">modHeadersAvailable</span> <span class="s">true</span><span class="p">;</span>
            		<span class="kn">fastcgi_param</span> <span class="s">front_controller_active</span> <span class="s">true</span><span class="p">;</span>
            		<span class="kn">fastcgi_pass</span> <span class="s">unix:/run/php/php7.4-fpm.sock</span><span class="p">;</span>

            		<span class="kn">fastcgi_intercept_errors</span> <span class="no">on</span><span class="p">;</span>
            		<span class="kn">fastcgi_request_buffering</span> <span class="no">off</span><span class="p">;</span>
        	<span class="p">}</span>

        	<span class="kn">location</span> <span class="p">~</span> <span class="sr">\.(?:css|js|svg|gif)$</span> <span class="p">{</span>
            		<span class="kn">try_files</span> <span class="nv">$uri</span> <span class="n">/cloud/index.php</span><span class="nv">$request_uri</span><span class="p">;</span>
            		<span class="kn">expires</span> <span class="mi">6M</span><span class="p">;</span>
            		<span class="kn">access_log</span> <span class="no">off</span><span class="p">;</span>
        	<span class="p">}</span>

        	<span class="kn">location</span> <span class="p">~</span> <span class="sr">\.woff2?$</span> <span class="p">{</span>
            		<span class="kn">try_files</span> <span class="nv">$uri</span> <span class="n">/cloud/index.php</span><span class="nv">$request_uri</span><span class="p">;</span>
            		<span class="kn">expires</span> <span class="s">7d</span><span class="p">;</span>
            		<span class="kn">access_log</span> <span class="no">off</span><span class="p">;</span>
        	<span class="p">}</span>

        	<span class="kn">location</span> <span class="n">/cloud</span> <span class="p">{</span>
            		<span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri</span><span class="n">/</span> <span class="n">/cloud/index.php</span><span class="nv">$request_uri</span><span class="p">;</span>
        	<span class="p">}</span>

   	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="modificamos-el-fichero-de-configuración-de-nextcloud-1">Modificamos el fichero de configuración de Nextcloud</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nano /var/www/cloud/config/config.php
<span class="nt">---</span>
&lt;?php
<span class="nv">$CONFIG</span> <span class="o">=</span> array <span class="o">(</span>
  <span class="s1">'instanceid'</span> <span class="o">=&gt;</span> <span class="s1">'ocg57xu3tev6'</span>,
  <span class="s1">'passwordsalt'</span> <span class="o">=&gt;</span> <span class="s1">'z3kK/NjSDcqfrEvfLi6PoZAbnL4gYk'</span>,
  <span class="s1">'secret'</span> <span class="o">=&gt;</span> <span class="s1">'OswK3Xxvl7YzGtVbtpf/brvT/niZD4NIziidcWtWG5nqd/ny'</span>,
  <span class="s1">'trusted_domains'</span> <span class="o">=&gt;</span>
  array <span class="o">(</span>
    0 <span class="o">=&gt;</span> <span class="s1">'www.mariatec.es'</span>,
    1 <span class="o">=&gt;</span> <span class="s1">'maria.es'</span>,
  <span class="o">)</span>,
  <span class="s1">'datadirectory'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/cloud/data'</span>,
  <span class="s1">'dbtype'</span> <span class="o">=&gt;</span> <span class="s1">'mysql'</span>,
  <span class="s1">'version'</span> <span class="o">=&gt;</span> <span class="s1">'20.0.2.2'</span>,
  <span class="s1">'overwrite.cli.url'</span> <span class="o">=&gt;</span> <span class="s1">'http://www.mariatec.es/cloud'</span>,
  <span class="s1">'dbname'</span> <span class="o">=&gt;</span> <span class="s1">'nextcloud'</span>,
  <span class="s1">'dbhost'</span> <span class="o">=&gt;</span> <span class="s1">'[IP de la máquina]'</span>,
  <span class="s1">'dbport'</span> <span class="o">=&gt;</span> <span class="s1">''</span>,
  <span class="s1">'dbtableprefix'</span> <span class="o">=&gt;</span> <span class="s1">'oc_'</span>,
  <span class="s1">'mysql.utf8mb4'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
  <span class="s1">'dbuser'</span> <span class="o">=&gt;</span> <span class="s1">'[usuario de la base de datos]'</span>,
  <span class="s1">'dbpassword'</span> <span class="o">=&gt;</span> <span class="s1">'[contraseña de la base de datos]'</span>,
  <span class="s1">'installed'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<ol>
  <li>
    <p>Realizamos el enlace simbólico para activar el virtualhost.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/nextcloud.conf /etc/apache2/sites-enabled/nextcloud.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Reiniciamos el servicio de nginx.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">sudo </span>systemctl restart nginx
</code></pre></div>    </div>
  </li>
  <li>
    <p>Y comprobamos que todo funciona correctamente.</p>

    <p><a href="www.mariatec.es/cloud">www.mariatec.es/cloud</a></p>

    <p><img src="/assets/images/migracion/7.png" alt="7" /></p>
  </li>
</ol>

<h3 id="owncloud-1">Owncloud</h3>

<p><img src="/assets/images/migracion/owncloud.png" alt="nextcloud" /></p>
<h4 id="configuramos-de-nuevo-el-virtualhost">Configuramos de nuevo el virtualhost</h4>

<p>Esta vez lo vamos a configurar para que Owncloud esté disponible en la ruta <code class="language-plaintext highlighter-rouge">/portal</code>. Al acceder a <a href="www.mariatec.es">www.mariatec.es</a> nos redirigirá a <a href="www.mariatec.es/portal">www.mariatec.es/portal</a>.</p>

<p>El fichero de configuración de nginx quedaría de la siguiente forma:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Default server configuration</span>
<span class="c">#</span>
server <span class="o">{</span>
        listen 80<span class="p">;</span>
        listen <span class="o">[</span>::]:80<span class="p">;</span>

        server_name www.mariatec.es<span class="p">;</span>

        root /var/www<span class="p">;</span>

        index index.html index.htm index.php<span class="p">;</span>

        location <span class="o">=</span>/ <span class="o">{</span>
                <span class="k">return </span>301 <span class="nv">$scheme</span>://www.mariatec.es/portal<span class="p">;</span>
                try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
        <span class="o">}</span>

        location @rewrite <span class="o">{</span>
                rewrite ^/<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>/index.php?q<span class="o">=</span><span class="nv">$1</span><span class="p">;</span>
        <span class="o">}</span>

        location ~ <span class="se">\.</span>php<span class="nv">$ </span><span class="o">{</span>
                include snippets/fastcgi-php.conf<span class="p">;</span>
                fastcgi_pass unix:/run/php/php7.4-fpm.sock<span class="p">;</span>
        <span class="o">}</span>

	location <span class="o">=</span> /robots.txt <span class="o">{</span>
                allow all<span class="p">;</span>
                log_not_found off<span class="p">;</span>
                access_log off<span class="p">;</span>
        <span class="o">}</span>

        location /.well-known <span class="o">{</span>
                rewrite ^/<span class="se">\.</span>well-known/host-meta<span class="se">\.</span>json  /cloud/public.php?service<span class="o">=</span>host-meta-json    last<span class="p">;</span>
                rewrite ^/<span class="se">\.</span>well-known/host-meta        /cloud/public.php?service<span class="o">=</span>host-meta         last<span class="p">;</span>
                rewrite ^/<span class="se">\.</span>well-known/webfinger        /cloud/public.php?service<span class="o">=</span>webfinger         last<span class="p">;</span>
                rewrite ^/<span class="se">\.</span>well-known/nodeinfo         /cloud/public.php?service<span class="o">=</span>nodeinfo          last<span class="p">;</span>

                location <span class="o">=</span> /.well-known/carddav   <span class="o">{</span> <span class="k">return </span>301 /cloud/remote.php/dav/<span class="p">;</span> <span class="o">}</span>
                location <span class="o">=</span> /.well-known/caldav    <span class="o">{</span> <span class="k">return </span>301 /cloud/remote.php/dav/<span class="p">;</span> <span class="o">}</span>

                try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
        <span class="o">}</span>

<span class="c">#Nextcloud Configuration</span>

        location ^~ /cloud <span class="o">{</span>
                client_max_body_size 512M<span class="p">;</span>
                fastcgi_buffers 64 4K<span class="p">;</span>

                <span class="nb">gzip </span>on<span class="p">;</span>
                gzip_vary on<span class="p">;</span>
                gzip_comp_level 4<span class="p">;</span>
                gzip_min_length 256<span class="p">;</span>
                gzip_proxied expired no-cache no-store private no_last_modified no_etag auth<span class="p">;</span>
                gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject a<span class="err">$</span>

                add_header Referrer-Policy                      <span class="s2">"no-referrer"</span>   always<span class="p">;</span>
                add_header X-Content-Type-Options               <span class="s2">"nosniff"</span>       always<span class="p">;</span>
                add_header X-Download-Options                   <span class="s2">"noopen"</span>        always<span class="p">;</span>
                add_header X-Frame-Options                      <span class="s2">"SAMEORIGIN"</span>    always<span class="p">;</span>
                add_header X-Permitted-Cross-Domain-Policies    <span class="s2">"none"</span>          always<span class="p">;</span>
                add_header X-Robots-Tag                         <span class="s2">"none"</span>          always<span class="p">;</span>
                add_header X-XSS-Protection                     <span class="s2">"1; mode=block"</span> always<span class="p">;</span>

                fastcgi_hide_header X-ed-By<span class="p">;</span>
                index index.php index.html /cloud/index.php<span class="nv">$request_uri</span><span class="p">;</span>

                expires 1m<span class="p">;</span>

        	location <span class="o">=</span> /cloud <span class="o">{</span>
            		<span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ ^DavClnt <span class="o">)</span> <span class="o">{</span>
                		<span class="k">return </span>302 /cloud/remote.php/webdav/<span class="nv">$is_args$args</span><span class="p">;</span>
            		<span class="o">}</span>
        	<span class="o">}</span>

        	location ~ ^/cloud/<span class="o">(</span>?:build|tests|config|lib|3rdparty|templates|data<span class="o">)(</span>?:<span class="nv">$|</span>/<span class="o">)</span>    <span class="o">{</span> <span class="k">return </span>404<span class="p">;</span> <span class="o">}</span>
        	location ~ ^/cloud/<span class="o">(</span>?:<span class="se">\.</span>|autotest|occ|issue|indie|db_|console<span class="o">)</span>                <span class="o">{</span> <span class="k">return </span>404<span class="p">;</span> <span class="o">}</span>

        	location ~ <span class="se">\.</span>php<span class="o">(</span>?:<span class="nv">$|</span>/<span class="o">)</span> <span class="o">{</span>
            		fastcgi_split_path_info ^<span class="o">(</span>.+?<span class="se">\.</span>php<span class="o">)(</span>/.<span class="k">*</span><span class="o">)</span><span class="nv">$;</span>
           		<span class="nb">set</span> <span class="nv">$path_info</span> <span class="nv">$fastcgi_path_info</span><span class="p">;</span>

            		try_files <span class="nv">$fastcgi_script_name</span> <span class="o">=</span>404<span class="p">;</span>

            		include fastcgi_params<span class="p">;</span>
            		fastcgi_param SCRIPT_FILENAME <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
            		fastcgi_param PATH_INFO <span class="nv">$path_info</span><span class="p">;</span>

            		fastcgi_param modHeadersAvailable <span class="nb">true</span><span class="p">;</span>
            		fastcgi_param front_controller_active <span class="nb">true</span><span class="p">;</span>
            		fastcgi_pass unix:/run/php/php7.4-fpm.sock<span class="p">;</span>

            		fastcgi_intercept_errors on<span class="p">;</span>
            		fastcgi_request_buffering off<span class="p">;</span>
        	<span class="o">}</span>

        	location ~ <span class="se">\.</span><span class="o">(</span>?:css|js|svg|gif<span class="o">)</span><span class="nv">$ </span><span class="o">{</span>
            		try_files <span class="nv">$uri</span> /cloud/index.php<span class="nv">$request_uri</span><span class="p">;</span>
            		expires 6M<span class="p">;</span>
            		access_log off<span class="p">;</span>
        	<span class="o">}</span>

        	location ~ <span class="se">\.</span>woff2?<span class="nv">$ </span><span class="o">{</span>
            		try_files <span class="nv">$uri</span> /cloud/index.php<span class="nv">$request_uri</span><span class="p">;</span>
            		expires 7d<span class="p">;</span>
            		access_log off<span class="p">;</span>
        	<span class="o">}</span>

        	location /cloud <span class="o">{</span>
            		try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ /cloud/index.php<span class="nv">$request_uri</span><span class="p">;</span>
        	<span class="o">}</span>

   	<span class="o">}</span>

<span class="c">#OwnCloud Configuration</span>

        location ^~ /portal <span class="o">{</span>
                client_max_body_size 512M<span class="p">;</span>
                fastcgi_buffers 64 4K<span class="p">;</span>

                <span class="nb">gzip </span>on<span class="p">;</span>
                gzip_vary on<span class="p">;</span>
                gzip_comp_level 4<span class="p">;</span>
                gzip_min_length 256<span class="p">;</span>
                gzip_proxied expired no-cache no-store private no_last_modified no_etag auth<span class="p">;</span>
                gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject a<span class="err">$</span>

                add_header Referrer-Policy                      <span class="s2">"no-referrer"</span>   always<span class="p">;</span>
                add_header X-Content-Type-Options               <span class="s2">"nosniff"</span>       always<span class="p">;</span>
                add_header X-Download-Options                   <span class="s2">"noopen"</span>        always<span class="p">;</span>
                add_header X-Frame-Options                      <span class="s2">"SAMEORIGIN"</span>    always<span class="p">;</span>
                add_header X-Permitted-Cross-Domain-Policies    <span class="s2">"none"</span>          always<span class="p">;</span>
                add_header X-Robots-Tag                         <span class="s2">"none"</span>          always<span class="p">;</span>
                add_header X-XSS-Protection                     <span class="s2">"1; mode=block"</span> always<span class="p">;</span>

                fastcgi_hide_header X-ed-By<span class="p">;</span>
                index index.php index.html /portal/index.php<span class="nv">$request_uri</span><span class="p">;</span>

                expires 1m<span class="p">;</span>

        	location <span class="o">=</span> /portal <span class="o">{</span>
            		<span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ ^DavClnt <span class="o">)</span> <span class="o">{</span>
                		<span class="k">return </span>302 /portal/remote.php/webdav/<span class="nv">$is_args$args</span><span class="p">;</span>
            		<span class="o">}</span>
        	<span class="o">}</span>

        	location ~ ^/portal/<span class="o">(</span>?:build|tests|config|lib|3rdparty|templates|data<span class="o">)(</span>?:<span class="nv">$|</span>/<span class="o">)</span>    <span class="o">{</span> <span class="k">return </span>404<span class="p">;</span> <span class="o">}</span>
        	location ~ ^/portal/<span class="o">(</span>?:<span class="se">\.</span>|autotest|occ|issue|indie|db_|console<span class="o">)</span>                <span class="o">{</span> <span class="k">return </span>404<span class="p">;</span> <span class="o">}</span>

        	location ~ <span class="se">\.</span>php<span class="o">(</span>?:<span class="nv">$|</span>/<span class="o">)</span> <span class="o">{</span>
            		fastcgi_split_path_info ^<span class="o">(</span>.+?<span class="se">\.</span>php<span class="o">)(</span>/.<span class="k">*</span><span class="o">)</span><span class="nv">$;</span>
           		<span class="nb">set</span> <span class="nv">$path_info</span> <span class="nv">$fastcgi_path_info</span><span class="p">;</span>

            		try_files <span class="nv">$fastcgi_script_name</span> <span class="o">=</span>404<span class="p">;</span>

            		include fastcgi_params<span class="p">;</span>
            		fastcgi_param SCRIPT_FILENAME <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
            		fastcgi_param PATH_INFO <span class="nv">$path_info</span><span class="p">;</span>

            		fastcgi_param modHeadersAvailable <span class="nb">true</span><span class="p">;</span>
            		fastcgi_param front_controller_active <span class="nb">true</span><span class="p">;</span>
            		fastcgi_pass unix:/run/php/php7.4-fpm.sock<span class="p">;</span>

            		fastcgi_intercept_errors on<span class="p">;</span>
            		fastcgi_request_buffering off<span class="p">;</span>
        	<span class="o">}</span>

        	location ~ <span class="se">\.</span><span class="o">(</span>?:css|js|svg|gif<span class="o">)</span><span class="nv">$ </span><span class="o">{</span>
            		try_files <span class="nv">$uri</span> /portal/index.php<span class="nv">$request_uri</span><span class="p">;</span>
            		expires 6M<span class="p">;</span>
            		access_log off<span class="p">;</span>
        	<span class="o">}</span>

        	location ~ <span class="se">\.</span>woff2?<span class="nv">$ </span><span class="o">{</span>
            		try_files <span class="nv">$uri</span> /portal/index.php<span class="nv">$request_uri</span><span class="p">;</span>
            		expires 7d<span class="p">;</span>
            		access_log off<span class="p">;</span>
        	<span class="o">}</span>

        	location /portal <span class="o">{</span>
            		try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ /portal/index.php<span class="nv">$request_uri</span><span class="p">;</span>
        	<span class="o">}</span>

   	<span class="o">}</span>


<span class="o">}</span>
</code></pre></div></div>
<h4 id="modificamos-el-fichero-de-configuración-de-owncloud-1">Modificamos el fichero de configuración de Owncloud</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nano /var/www/portal/config/config.php
<span class="nt">---</span>
&lt;?php
<span class="nv">$CONFIG</span> <span class="o">=</span> array <span class="o">(</span>
  <span class="s1">'instanceid'</span> <span class="o">=&gt;</span> <span class="s1">'ocb5j2nyqboj'</span>,
  <span class="s1">'passwordsalt'</span> <span class="o">=&gt;</span> <span class="s1">'0+8FRHWahLRZ/Gv9OlXNLB8alnnPop'</span>,
  <span class="s1">'secret'</span> <span class="o">=&gt;</span> <span class="s1">'X/kjusk8xkH7PHSmSb+T9LjlfKZgeTvqVsHoJ3l56CmdbiLM'</span>,
  <span class="s1">'trusted_domains'</span> <span class="o">=&gt;</span> 
  array <span class="o">(</span>
    0 <span class="o">=&gt;</span> <span class="s1">'0.0.0.0'</span>,
    1 <span class="o">=&gt;</span> <span class="s1">'mariatec.es/portal'</span>,
    2 <span class="o">=&gt;</span> <span class="s1">'www.mariatec.es/portal'</span>,
    3 <span class="o">=&gt;</span> <span class="s1">'mariatec.es'</span>,
    4 <span class="o">=&gt;</span> <span class="s1">'www.mariatec.es'</span>,
  <span class="o">)</span>,
  <span class="s1">'datadirectory'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/portal/data'</span>,
  <span class="s1">'overwrite.cli.url'</span> <span class="o">=&gt;</span> <span class="s1">'http://www.mariatec.es/portal'</span>,
  <span class="s1">'dbtype'</span> <span class="o">=&gt;</span> <span class="s1">'mysql'</span>,
  <span class="s1">'version'</span> <span class="o">=&gt;</span> <span class="s1">'10.11.0.6'</span>,
  <span class="s1">'dbname'</span> <span class="o">=&gt;</span> <span class="s1">'owncloud'</span>,
  <span class="s1">'dbhost'</span> <span class="o">=&gt;</span> <span class="s1">'localhost'</span>,
  <span class="s1">'dbtableprefix'</span> <span class="o">=&gt;</span> <span class="s1">'oc_'</span>,
  <span class="s1">'mysql.utf8mb4'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
  <span class="s1">'dbuser'</span> <span class="o">=&gt;</span> <span class="s1">'maria1'</span>,
  <span class="s1">'dbpassword'</span> <span class="o">=&gt;</span> <span class="s1">'admin'</span>,
  <span class="s1">'allow_user_to_change_mail_address'</span> <span class="o">=&gt;</span> <span class="s1">''</span>,
  <span class="s1">'logtimezone'</span> <span class="o">=&gt;</span> <span class="s1">'UTC'</span>,
  <span class="s1">'apps_paths'</span> <span class="o">=&gt;</span> 
  array <span class="o">(</span>
    0 <span class="o">=&gt;</span> 
    array <span class="o">(</span>
      <span class="s1">'path'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/portal/apps'</span>,
      <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="s1">'/apps'</span>,
      <span class="s1">'writable'</span> <span class="o">=&gt;</span> <span class="nb">false</span>,
    <span class="o">)</span>,
    1 <span class="o">=&gt;</span> 
    array <span class="o">(</span>
      <span class="s1">'path'</span> <span class="o">=&gt;</span> <span class="s1">'/var/www/portal/apps-external'</span>,
      <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="s1">'/apps-external'</span>,
      <span class="s1">'writable'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
    <span class="o">)</span>,
  <span class="o">)</span>,
  <span class="s1">'installed'</span> <span class="o">=&gt;</span> <span class="nb">true</span>,
<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="reiniciamos-servicios">Reiniciamos servicios</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>systemctl restart nginx
<span class="nv">$ </span><span class="nb">sudo </span>systemctl restart mariadb
</code></pre></div></div>

<p>Y comprobamos que todo funciona correctamente.</p>

<p><a href="www.mariatec.es/">www.mariatec.es/</a></p>

<p><img src="/assets/images/migracion/8.png" alt="8" /></p>

<h2 id="instalación-de-cliente-nextcloud-en-otro-cliente">Instalación de cliente Nextcloud en otro cliente</h2>

<p><img src="/assets/images/migracion/9.png" alt="9" /></p>]]></content><author><name></name></author><category term="iaw" /><summary type="html"><![CDATA[Instalación previa]]></summary></entry><entry><title type="html">Escenario en OpenStack</title><link href="/hlc+sri/2022/11/17/escenario.html" rel="alternate" type="text/html" title="Escenario en OpenStack" /><published>2022-11-17T08:17:50+01:00</published><updated>2022-11-17T08:17:50+01:00</updated><id>/hlc+sri/2022/11/17/escenario</id><content type="html" xml:base="/hlc+sri/2022/11/17/escenario.html"><![CDATA[<h2 id="descripción">Descripción</h2>
<p>En esta tarea se va a crear el escenario de trabajo que se va a usar durante todo el curso, que va a constar inicialmente de 4 máquinas: 2 instancias en OpenStack y dos contenedores LXC que se ejecutarán en una de las instancias.</p>

<p>Para nombrar las máquinas se va a utilizar <strong>alfa, bravo, charlie y delta</strong>, que son las primeras letras de un alfabeto que nació antes de la Primera Guerra Mundial en respuesta a los avances en la radio bidireccional compatible con la voz, para mejorar la comunicación en circuitos telefónicos de baja calidad y de larga distancia.</p>

<p>Además el dominio será un subdominio de la forma tunombre.gonzalonazareno.org. De esta forma tendremos:</p>

<ul>
  <li>Máquina 1: Instancia en OpenStack con Debian 11 Bullseye que se llama <code class="language-plaintext highlighter-rouge">alfa.tunombre.gonzalonazareno.org</code>.</li>
  <li>Máquina 2: Instancia en OpenStack con Rocky Linux 9 que se llama <code class="language-plaintext highlighter-rouge">bravo.tunombre.gonzalonazareno.org</code>.</li>
  <li>Máquina 3: Contenedor LXC con Ubuntu 20.04 que se llama <code class="language-plaintext highlighter-rouge">charlie.tunombre.gonzalonazareno.org</code>.</li>
  <li>Máquina 4: Contenedor LXC con Ubuntu 20.04 que se llama <code class="language-plaintext highlighter-rouge">delta.tunombre.gonzalonazareno.org</code>.</li>
</ul>

<p>La creación y configuración (conexión a las redes, creación de volumen, quitarle la seguridad alos puertos, …) de la <strong>máquina1 (alfa)</strong> la debes hacer con OSC. Lo demás lo puedes hacer con horizon.</p>

<h2 id="escenario">Escenario</h2>

<p><img src="/assets/images/escenario.png" alt="Escenario" /></p>

<h2 id="instalación-de-las-instancias-en-openstack">Instalación de las instancias en OpenStack</h2>

<ol>
  <li>Creamos una red interna que se llame <strong>Red DMZ de tu_usuario</strong>, con las siguientes características:
    <ul>
      <li>Direccionamiento: <code class="language-plaintext highlighter-rouge">172.16.0.0/16</code>.</li>
      <li>Con DHCP y DNS: <code class="language-plaintext highlighter-rouge">192.168.202.2</code>.</li>
      <li>La puerta de enlace de los dispositivos conectados a esta red será el <code class="language-plaintext highlighter-rouge">172.16.0.1</code>.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack network create Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus
 openstack subnet create <span class="nt">--network</span> Red DMZ de mariajesus <span class="nt">--subnet-range</span> 172.16.0.0/16 <span class="nt">--dhcp</span> <span class="nt">--gateway</span> 172.16.0.0 <span class="nt">--dns-nameserver</span> 192.168.202.2 Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus
</code></pre></div>    </div>
  </li>
  <li>Las dos instancias que vamos a crear se van a configurar con cloud-init de la siguiente manera:
    <ul>
      <li>Deben actualizar los paquetes de la distribución de la instancia.</li>
      <li>El dominio utilizado será del tipo <code class="language-plaintext highlighter-rouge">tunombre.gonzalonazareno.org</code>. Por lo tanto en la configuración con cloud-init habrá que indicar el hostname y el FQDN.</li>
      <li>Se crearán dos usuarios:
        <ul>
          <li>Un usuario sin privilegios. Se puede llamar como quieras (pero el nombre será el mismo en todas las máquinas) y accederás a las máquinas usando tu clave ssh privada.</li>
          <li>Un usuario <code class="language-plaintext highlighter-rouge">profesor</code>, que puede utilizar sudo sin contraseña. Copia de las claves públicas de todos los profesores en las instancias para que puedan acceder con el usuario <code class="language-plaintext highlighter-rouge">profesor</code>.</li>
        </ul>
      </li>
      <li>Cambia la contraseña al usuario root.</li>
    </ul>
  </li>
  <li>Creación de la <strong>máquina1</strong> (alfa):
    <ul>
      <li>Crea una instancia sobre un volumen de 30Gb, usando una imagen de <strong>Debian 11 Bullseye</strong>. Elige el sabor <code class="language-plaintext highlighter-rouge">vol.medium</code>. Y configuralá con <code class="language-plaintext highlighter-rouge">cloud-init</code> como se ha indicado anteriormente.</li>
      <li>Está instancia estará conectada a tu red interna. Asigna a la instancia una IP flotante.</li>
    </ul>
  </li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openstack volume create <span class="nt">--image</span> <span class="s2">"Debian 11 Bullseye"</span> <span class="nt">--size</span> 30 vol.alfa
<span class="nt">----</span>
openstack server create <span class="nt">--flavor</span> vol.medium <span class="se">\</span>
    <span class="nt">--volume</span> vol.alfa <span class="se">\</span>
    <span class="nt">--security-group</span> default <span class="se">\</span>
    <span class="nt">--key-name</span> pass <span class="se">\</span>
    <span class="nt">--network</span> <span class="s2">"red de mariajesus.alloza"</span> <span class="se">\</span>
    <span class="nt">--user-data</span> config-alfa.yaml <span class="se">\</span>
    alfa
<span class="nt">----</span>
openstack floating ip create ext-net
openstack server add floating ip alfa 
</code></pre></div></div>

<ol>
  <li>Configuración de la máquina1 (alfa):
    <ul>
      <li>
        <p>Conecta la instancia a tu Red DMZ, asígnale la dirección 172.16.0.1 para que sea la puerta de enlace las máquinas conectadas a esta red.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack port create <span class="nt">--network</span> Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus <span class="nt">--fixed-ip</span> ip-address<span class="o">=</span>172.16.0.1 alfa-port
  openstack server add port alfa port-alfa
</code></pre></div>        </div>
      </li>
      <li>
        <p>Deshabilita la seguridad de los puertos en las dos interfaces de red para que funcione de manera adecuada el NAT.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack server <span class="nb">set</span> <span class="nt">--port</span> alfa:port1 <span class="nt">--no-security-group</span>
  openstack server <span class="nb">set</span> <span class="nt">--port</span> alfa:port2 <span class="nt">--no-security-group</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Configura de forma permanente la regla SNAT para que las máquinas de la Red DMZ tengan acceso a internet.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack server add floating ip alfa
  <span class="nb">sudo </span>iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-o</span> ens3 <span class="nt">-j</span> SNAT 
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Creación de la máquina2 (bravo):
    <ul>
      <li>Está instancia se conectará a la red DMZ. Usando un puerto asigna a esta máquina la dirección 172.16.0.200.</li>
      <li>
        <p>Crea una instancia sobre un volumen de 30Gb, usando una imagen de Rocky Linux 9. Elige el sabor vol.normal. Y configurala con cloud-init como se ha indicado anteriormente.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack volume create <span class="nt">--image</span> <span class="s2">"Rocky Linux 9"</span> <span class="nt">--size</span> 30 vol.bravo
  openstack port create <span class="nt">--network</span> Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus <span class="nt">--fixed-ip</span> ip-address<span class="o">=</span>172.16.0.200 bravo-port 
  <span class="nt">----</span>
  openstack server create <span class="nt">--flavor</span> vol.normal <span class="se">\</span>
  <span class="nt">--volume</span> vol.bravo <span class="se">\</span>
  <span class="nt">--security-group</span> default <span class="se">\</span>
  <span class="nt">--key-name</span> pass <span class="se">\</span>
  <span class="nt">--port</span> bravo-port <span class="se">\</span>
  <span class="nt">--user-data</span> config-bravo.yaml <span class="se">\</span>
  bravo
</code></pre></div>        </div>
      </li>
      <li>Deshabilita la seguridad de los puertos en la interfaz de red para que funcione de manera adecuada el NAT.</li>
      <li>Comprueba que tiene acceso a internet. Si no tiene acceso a internet, no se han actualizado los paquetes con cloud-init, hazlo posteriormente.</li>
    </ul>
  </li>
</ol>

<h2 id="instalación-de-los-contenedores-lxc">Instalación de los contenedores LXC</h2>
<p>En <strong>maquina1</strong> vamos a crear dos contenedores en un red interna, para ello:</p>

<ol>
  <li>
    <p>Crea en <strong>máquina1 (alfa)</strong> un linux bridge llamado <code class="language-plaintext highlighter-rouge">br-intra</code> y asigna una dirección IP estática <code class="language-plaintext highlighter-rouge">192.168.0.1</code>. Esta será la IP de <strong>máquina1</strong> (alfa) conectada a este switch virtual y será la puerta de enlace de los contenedores.</p>
  </li>
  <li>
    <p>Instala LXC y crea dos contenedores con la distribución <strong>Ubuntu 20.04</strong>. Estos contenedores serán la <strong>máquina3</strong> (charlie) y la <strong>máquina4</strong> (delta).</p>
  </li>
  <li>
    <p>Configura de forma permanente la regla SNAT para que los contenedores tengan acceso a internet.</p>
  </li>
  <li>
    <p>Conecta los contenedores al bridge <code class="language-plaintext highlighter-rouge">br-intra</code> y configúralo de forma estática con las siguientes direcciones: <strong>máquina3</strong> (charlie) la <code class="language-plaintext highlighter-rouge">192.168.0.2</code> y <strong>máquina4</strong> (delta) la <code class="language-plaintext highlighter-rouge">192.168.0.3</code>.</p>
  </li>
  <li>
    <p>Para que la red de OpenStack funcione de forma adecuada las imágenes que usamos tienen configurado la mtu (Unidad máxima de transferencia) a 1450 bytes. Tenemos que adecuar los contenedores a este tamaño de trama. Para ello introduce en la configuración de los contenedores la línea: <code class="language-plaintext highlighter-rouge">lxc.net.0.mtu = 1450</code>.</p>
  </li>
  <li>
    <p>Configura los contenedores para que se auto inicien al reiniciar la instancia.</p>
  </li>
  <li>
    <p>Los contenedores tendrán características parecidas a las instancias anteriormente:</p>
    <ul>
      <li>Debes actualizar los paquetes de la distribución instalada.</li>
      <li>El dominio utilizado será del tipo <code class="language-plaintext highlighter-rouge">tunombre.gonzalonazareno.org</code>. Por lo tanto configura de manera adecuda el hostname y el FQDN.</li>
      <li>Para acceder a los contenedores vamos a usar ssh.</li>
      <li>Crea dos usuarios:
        <ul>
          <li>Un usuario sin privilegios. Se puede llamar como quieras (el nombre de usuario que usaste en las instancias) y accederás a los contenedores usando tu clave ssh privada.</li>
          <li>Un usuario <code class="language-plaintext highlighter-rouge">profesor</code>, que puede utilizar sudo sin contraseña. Copia de las claves públicas de todos los profesores en los contenedores para que puedan acceder con el usuario <code class="language-plaintext highlighter-rouge">profesor</code>.</li>
        </ul>
      </li>
      <li>Cambia la contraseña al usuario <code class="language-plaintext highlighter-rouge">root</code>.</li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="hlc+sri" /><summary type="html"><![CDATA[Descripción En esta tarea se va a crear el escenario de trabajo que se va a usar durante todo el curso, que va a constar inicialmente de 4 máquinas: 2 instancias en OpenStack y dos contenedores LXC que se ejecutarán en una de las instancias.]]></summary></entry><entry><title type="html">Migración CentOS</title><link href="/aso/2022/11/16/centOS.html" rel="alternate" type="text/html" title="Migración CentOS" /><published>2022-11-16T16:17:03+01:00</published><updated>2022-11-16T16:17:03+01:00</updated><id>/aso/2022/11/16/centOS</id><content type="html" xml:base="/aso/2022/11/16/centOS.html"><![CDATA[<h2 id="descripción">Descripción</h2>

<p>Debido al anuncio del fin de soporte por parte de Red Hat de Centos8 el pasado 31 de diciembre de 2021, y teniendo en cuentas que el fin de vida de centos 7 está programada para el 30 de junio de 2024. Han salido múltiples distribuciones que cubren el hueco dejado por esta distribución tan extendida y tan usada en el ámbito de servidores.</p>

<p>En la presente práctica, analiza posibles versiones candidatas y opciones desplegadas para la migración de tus servidores CentOS.</p>

<p>El espectro es amplio:</p>

<p>Cambiar el rumbo a una nueva distribución, debian, opensuse, slakware, etc.</p>

<p>Soluciones aportadas por Red Hat: Red Hat Enterprise Linux, CentOS Stream.</p>

<p>Solución aportada por Oracle Linux</p>

<p>Nuevas distribuciones surgidas para paliar el hueco dejado:</p>

<ul>
  <li>AlmaLinux</li>
  <li>Rocky Linux</li>
  <li>VZLinux</li>
  <li>euroLinux</li>
</ul>

<h3 id="analiza-el-desencadenante-de-la-retirada-de-centos-8-del-mercado-qué-opinión-tienes-al-respecto">Analiza el desencadenante de la retirada de centOS 8 del mercado. ¿Qué opinión tienes al respecto?</h3>

<p>CentOS es un acrónimo para <em>Community Enterprise Operating System</em> y está totalmente reconstruido por Red Hat Enterprise Linux. Si bien RHEL cuesta dinero, CentOS se ofrece como una distribución de Linux empresarial gratuita respaldada por la comunidad.</p>

<p>Uno de los ejecutivos de Red Hat dijo que CentOS estaba destruyendo las ventas de RHEL. Esto es cierto, pero no es culpa de CentOS. CentOS es una distribución de Linux empresarial gratuita que se basa en RHEL. Si bien RHEL cuesta dinero, CentOS se ofrece como una distribución de Linux empresarial gratuita respaldada por la comunidad. Los desarrolladores y las empresas que son buenos en Linux y no quieren pagar las tarifas de soporte de RHEL siempre seleccionaron CentOS para ahorrar dinero y obtener un software de clase empresarial. Sin embargo, el viaje gratis ha terminado. Red Hat anunció que CentOS Linux 8, como una reconstrucción de RHEL 8, finalizará en 2021. CentOS Stream continúa después de esa fecha, sirviendo como la rama upstream (desarrollo) de Red Hat Enterprise Linux.</p>

<p>Debido a un cambio de enfoque de CentOS Linux, anunciaron que CentOS Linux 8 se retirará el 31 de diciembre de 2021. Esto significa que no habrá más actualizaciones de seguridad o correcciones de errores para CentOS Linux 8 después de esa fecha. Esto también significa que CentOS Linux 8 no se convertirá en una versión de soporte a largo plazo (LTS) como CentOS Linux 7. Por lo tanto, los usuarios de CentOS Linux 8 deben migrar a CentOS Stream o a una nueva distribución de Linux.</p>

<p>Algunos de los usuarios, y con total normalidad, estaban en desacuerdo pero como es lógico, Red Hat tiene que hacer lo que tiene que hacer. Es cierto que la comunicación de tal hecho se hizo de una forma rápida e intempesta. Pero, como usuarios también debemos sopesar todo lo que CentOS nos ha aportado y a qué costo.</p>

<p>En mi opinión es un paso en falso por parte de Red Hat, ya que CentOS estaba pensado principalmente para pruebas que luego eran volcadas y migradas a RHEL. Como todo en las empresas, se busca una rentabilidad y un beneficio, y en este caso, Red Hat ha decidido que no es rentable mantener CentOS. Es cierto que podemos optar a una suscripción de RHEL por cuenta propia, pero no es lo mismo que tener una distribución gratuita y de código abierto. En el caso en el que una empresa tenga más de un desarrollador, esta tendría que lidiar con cuentas adicionales para ello.</p>

<p>Por eso, y desde mi punto de vista, creo que la mejor optativa podría ser Oracle Linux.</p>

<h3 id="crea-una-cuenta-en-red-hat-y-descárgate-la-iso-de-red-hat-enterprise-linux-rhel-y-evalúa-el-producto-comenta-el-procedimiento-de-alta">Crea una cuenta en Red Hat y descárgate la iso de Red Hat Enterprise Linux (RHEL) y evalúa el producto. Comenta el procedimiento de alta.</h3>

<p>Para poder acceder a la descarga de RHEL, es necesario tener una cuenta en Red Hat. Para ello, se debe acceder a la página de Red Hat y registrarse. Una vez hecho esto, se puede acceder a la descarga de RHEL.</p>

<p>De hecho, si se accede a la página de descarga de RHEL, se puede ver que se puede descargar una versión de prueba de 90 días. Una vez pasado este tiempo, se puede seguir usando la versión de prueba, pero se tendrá que reiniciar el sistema cada 24 horas.</p>

<h3 id="descargamos-la-iso-de-centos-stream-y-evalúa-el-producto">Descargamos la iso de CentOS Stream y evalúa el producto.</h3>

<p>Para comenzar, debemos decir que CentOs Stream es una variante o clon de Red Hat y esta variante, rolling, es decir, que se actualiza constantemente, es la que se ha decidido mantener.</p>

<p>Nos encontramos realmente ante un sistema que se encuentra entre Fedora y RedHat, aunque no hay nada oficial al respecto.</p>

<p>A la hora de instalarlo, tendríamos que irnos a la página oficial de centos/centos-stream. Una vez allí, nos encontramos con la opción de descargar la iso de CentOS Stream. Una vez descargada, la instalación es muy sencilla, ya que es muy similar a la de CentOS 7.</p>

<p><img src="/assets/images/centos/1.png" alt="1" /></p>

<p>El asistente de instalación es igual que el que nos podemos encontrar en CentOS 7 o Rocky.</p>

<p>Una vez iniciado el sistema, ingresamos con nuestras credenciales y nos encontramos con un escritorio muy similar al de CentOS 7.</p>

<p><img src="/assets/images/centos/2.png" alt="2" /></p>

<p>Dentro de las opciones de configuraciones nos encontramos las mismas que en CentOS 7, pero con algunas diferencias. Por ejemplo, en la opción de configuración de la red, nos encontramos con la opción de configurar la red con NetworkManager, pero también con la opción de configurarla con ifcfg.</p>

<p>Al ser una instalación mínima, nos encontraremos con un escritorio muy básico, pero con la posibilidad de instalar los escritorios que queramos, a lo igual que las aplicaciones.</p>

<p><img src="/assets/images/centos/3.png" alt="3" /></p>

<p>De momento no está pensado para administrar servidores, pero si que se puede usar para ello.</p>

<h3 id="descargamos-la-iso-de-una-de-las-otras-distribuciones-candidatas-indica-criterios-para-la-elección-de-la-nueva-distribución-y-evalúa-el-producto">Descargamos la iso de una de las otras distribuciones candidatas, indica criterios para la elección de la nueva distribución y evalúa el producto.</h3>

<p>Hace algo más de un año, llegó Rocky Linux y ha sido un éxito abrumador y aplastante. Primero la distribución estuvo disponible en las principales nubes públicas, y después llegó Rocky, un clon de RHEL 9.</p>

<p>Es cierto que, igual que alguno de los ribales, se basa en CentOS Stream y que duplica las funcionalidades de RHEL, pero para mi la gran diferencia es que Rocky viene con Peridot, que es un sistema de compilación de código abierto.</p>

<p>Al igual que el CentOS original, Rocky es un reemplazo directo gratuito para RHEL. En el momento de escribir este artículo, tiene disponible una instalación de versión candidata. Las imágenes están disponibles para los procesadores x86-64 y ARM. Para cada arquitectura, hay opciones “Mínimo”, “DVD” y “Arranque”. La definición de “Minimal” parece relativa porque pesa 1,73 GB.</p>

<p>La instalación es similar a CentOS y prácticamente a cualquier otro programa de instalación de Linux. Lo guía a través de la configuración de la distribución del teclado, la partición de su disco duro y la selección de paquetes. Una peculiaridad extraña del proceso de instalación es que no configura automáticamente su conexión de red. Tienes que habilitarlo en el instalador.</p>

<p>¿Por qué Rocky Linux?</p>

<p>Al igual que CentOS, es una excelente manera de aprender sobre el ecosistema de Red Hat de forma práctica y gratuita, ya que muchos centros de datos ejecutan RHEL. Si está interesado en la computación científica, no solo las principales supercomputadoras ejecutan Linux, sino que la gran mayoría ejecuta RHEL o una distribución derivada de RHEL. Tal vez podamos ver estas supercomputadoras ejecutando Rocky Linux en el futuro.</p>

<p>Hay una diferencia entre una estación de trabajo Linux y un servidor. La elección de una distribución puede afectar el rendimiento de su servidor hasta cierto punto. Y por eso es importante elegir la distribución de Linux adecuada para su servidor.</p>

<ol>
  <li>Instala CentOS 7, y evalúa la herramientas que ofrecen la distribución del punto 3.</li>
</ol>

<p>La instalación de CentOS 7 es muy sencilla, ya que es muy similar a la de CentOS 6. En cuanto a ss herramientas,</p>

<p>El menú del sistema funciona bien y también buscará por descripción. Ahora, las búsquedas genéricas funcionan, como por ejemplo, la palabra <strong>captura de pantalla</strong> evocará la aplicación correcta, Ksnapshot, en este caso.</p>

<p><img src="/assets/images/centos/4.jpeg" alt="4" /></p>

<p>En cuanto al hardware, no tenían unas vistas demasiado concisas y claras. La opción de conexión inalábrica, tanto de 2,4 GHz como de 5 GHz, de bluetooth, uso compartido de Samba en particiones NTFS, almacenamiento SSD local…está bastante bien, a decir verdad. De hecho, el sistema podría ser incluso un poco demasiado entusiasta al tratar de ser puntual.</p>

<p>El instalador es idéntico al de Fedora 18. Pero la cuestión está en que es una distribuición que se parece más a Fedora 19, pero no es altamente diferenciador. De igual manera, el instalador queda lejos de ser intuitivo y simple y algo, que desde mi perspectiva debería de mejorarse.</p>

<p>Es muy incómodo que la opción de <code class="language-plaintext highlighter-rouge">Hecho</code> esté en la parte superior de la ventana de configuración de la instalación, además de tener que presionarlo 2 veces dependiendo de la configuración de la que se trate. Por ejemplo, si se quiere instalar en un disco duro, se debe de presionar 2 veces la opción de <code class="language-plaintext highlighter-rouge">Hecho</code> para que se muestre la siguiente ventana.</p>

<p>Otra cosa que no me gusta es que no se pueda instalar en un disco duro sin particionar, ya que el instalador no permite crear una partición nueva. Por lo tanto, si se quiere instalar en un disco duro sin particionar, se debe de crear una partición desde otro sistema operativo, como Windows, y después instalar CentOS 7.</p>

<p>Después de eso, seleccionar las particiones deseadas a través de una configuración manual no es dificil, pero si confuso, por lo que a la hora de realizar un LVM es menos confuso realizarlo desde la terminal.</p>

<p>Una cosa es segura y es que, además de sus problemas de instalación, es realmente estable y rápido. No se ha quedado estático ni se ha bloqueado.</p>

<p>Como conclusión, es cierto que centos se lanzó al mercado muy pronto debido a todos su fallas inciales, demostrando tener un control de calidad poco estricto y pulcro. Esto hace que no se muestre como una distribución seria y profesional. Y dado que no puede tener ningún extra, su mérito como candidato de escritorio se reduce aún más.</p>

<p>Su instalador es su talón de Aquíles, aparte de su gran falta de aplicaciones y herramientas por parte de terceros. Pero si es verdad que existe un gran potencial en esta distribución.</p>]]></content><author><name></name></author><category term="ASO" /><summary type="html"><![CDATA[Descripción]]></summary></entry><entry><title type="html">Compilación de un kernel a medida</title><link href="/aso/2022/11/16/kernel.html" rel="alternate" type="text/html" title="Compilación de un kernel a medida" /><published>2022-11-16T16:17:03+01:00</published><updated>2022-11-16T16:17:03+01:00</updated><id>/aso/2022/11/16/kernel</id><content type="html" xml:base="/aso/2022/11/16/kernel.html"><![CDATA[<h2 id="qué-es-un-kernel">¿Qué es un kernel?</h2>

<p>Un kernel es el núcleo de un sistema operativo. Es el encargado de gestionar los recursos del sistema, como la memoria, los procesos, los dispositivos de entrada y salida, etc. Es el primer programa que se ejecuta cuando se enciende el ordenador.</p>

<h2 id="por-qué-compilar-un-kernel">¿Por qué compilar un kernel?</h2>

<p>La mayoría de los sistemas operativos modernos utilizan un kernel compilado por el fabricante del sistema. Esto es así porque el kernel es un programa muy complejo y que requiere de una gran cantidad de recursos para su compilación. Por ello, es más fácil que el fabricante del sistema lo compile y lo distribuya junto con el resto del sistema operativo.</p>

<p>Sin embargo, hay algunas ventajas de compilar un kernel a medida:</p>

<ul>
  <li><strong>Personalización</strong>: se puede personalizar el kernel para que se adapte a las necesidades del usuario. Por ejemplo, se puede añadir soporte para un dispositivo que no está soportado por el kernel del sistema operativo.</li>
  <li><strong>Optimización</strong>: se puede optimizar el kernel para que se adapte a las características del hardware del sistema. Por ejemplo, se puede añadir soporte para un procesador que no está soportado por el kernel del sistema operativo.</li>
  <li><strong>Seguridad</strong>: se puede añadir soporte para cifrado de disco, cifrado de memoria, etc.</li>
  <li><strong>Estabilidad</strong>: se puede añadir soporte para el uso de un sistema de ficheros de alto rendimiento, como Btrfs.</li>
  <li><strong>Rendimiento</strong>: se puede añadir soporte para el uso de un sistema de ficheros de alto rendimiento, como Btrfs.</li>
  <li><strong>Compatibilidad</strong>: se puede añadir soporte para el uso de un sistema de ficheros de alto rendimiento, como Btrfs.</li>
  <li><strong>Rendimiento</strong>: se puede añadir soporte para el uso de un sistema de ficheros de alto rendimiento, como Btrfs.</li>
</ul>

<p>Por ello, en este artículo vamos a ver cómo compilar un kernel a medida.</p>

<h2 id="qué-necesitamos">¿Qué necesitamos?</h2>

<p>Para compilar un kernel a medida necesitamos:</p>

<ul>
  <li>Un sistema operativo. En este artículo vamos a utilizar Ubuntu Debian 11 Bullseye.</li>
  <li>Un compilador de C. En este artículo vamos a utilizar qtbase5-dev.</li>
  <li>Un sistema de ficheros de alto rendimiento (Btrfs).</li>
</ul>

<h2 id="preparando-el-escenario">Preparando el escenario</h2>

<p>Lo primero de realizaremos será preparar la máquina en la que vamos a compilar el kernel. Para ello, crearemosun directorio donde gestionaremos todo el proceso de compilación del kernel. En este directorio descargaremos el código fuente del kernel.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>kernel
<span class="nb">cd </span>kernel
</code></pre></div></div>

<p>Tras esto, descargaremos el código fuente del kernel. Para averiguar la versión del kernel que tenemos instalado en nuestro sistema, ejecutaremos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-r</span>
5.10.0-19-amd64
</code></pre></div></div>
<p>Sabiendo nuestra versión, haremos uso del comando <em>wget</em> para descargarnoslo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span>wget https://www.kernel.org/pub/linux/kernel/v5.x/linux-5.10.tar.xz
</code></pre></div></div>
<p><img src="/assets/images/kernel/1.png" alt="1" /></p>

<p>Una vez descargado, comprobamos que efectivamente tenemos nuestro fichero descargado en el directorio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
total 113876
<span class="nt">-rw-r--r--</span> 1 maria maria 116606704 dic 14  2020 linux-5.10.tar.xz
</code></pre></div></div>
<p>Y procedemos a descomprimirlo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">-xvf</span> linux-5.10.tar.xz
</code></pre></div></div>
<p>Ya descomprimido todo elcontenido, si realizamos un <em>du -sh</em> veremos que el tamaño del directorio es de 1,1 GB:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~linux-5.10<span class="nv">$ </span><span class="nb">du</span> <span class="nt">-sh</span>
1,1G	<span class="nb">.</span>
</code></pre></div></div>

<h2 id="comenzamos">¡Comenzamos!</h2>

<p>Antes de comenzar, diremos que una vez finalizada la compilación, tenemos que teneren cuenta que el hardware básico incluirá como mínimo:</p>
<ul>
  <li>Teclado, ratón y monitor.</li>
  <li>Interfaz de red, ya sea por cable o por wifi.</li>
  <li>Consola gráfica de texto, para poder ver los mensajes de error.</li>
</ul>

<p>Una vez que tenemos todo preparado, vamos a comenzar con la compilación del kernel. Pero antes debemos tener en cuenta que la compilación del kernel es un proceso muy largo y que puede tardar varias horas. Por ello, es recomendable que no lo hagamos en una máquina que estemos utilizando para trabajar.</p>

<p>Otro punto importante a tener en cuenta será que necesitaremos un fichero donde especificaremos tanto los modulos que enlazaremos de forma dinámica o estática, como los que no enlazaremos. Para ello, haremos uso del comando make para generar dicho fichero, que contendrá la configuración actual de nuestro kernel.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make oldconfig
</code></pre></div></div>

<p>Después de ello, miramos cuantos módulos enlazados tenemos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span>egrep <span class="s1">'=y'</span> .config | <span class="nb">wc</span> <span class="nt">-l</span>
2187
maria@maria-debian:~kernel<span class="nv">$ </span>egrep <span class="s1">'=m'</span> .config | <span class="nb">wc</span> <span class="nt">-l</span>
4243
</code></pre></div></div>

<p>Ejecutamos el comando <em>make menuconfig</em> para configurar el kernel, y esta vez vamos a descartar algunos módulos que no necesitamos. Una vez terminado, volvemos a mirar cuantos módulos enlazados tenemos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span>egrep <span class="s1">'=y'</span> .config | <span class="nb">wc</span> <span class="nt">-l</span>
1487
maria@maria-debian:~kernel<span class="nv">$ </span>egrep <span class="s1">'=m'</span> .config | <span class="nb">wc</span> <span class="nt">-l</span>
100
</code></pre></div></div>
<p><img src="/assets/images/kernel/3.png" alt="3" /></p>

<p>Antes de ejecutar la compilación, vamos a comprobar que tenemos instaladas las dependencias necesarias para compilar el kernel. Para ello, ejecutaremos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>build-essential libncurses-dev bison flex libssl-dev libelf-dev libudev-dev libpci-dev libiberty-dev autoconf
</code></pre></div></div>

<p>Efectivamente, faltaban dependecias, por lo que ya podemos ejecutar la compilación del kernel:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span>make <span class="nt">-j4</span> bindeb-pkg
</code></pre></div></div>

<p>Tras varios minutos, (en mi caso, dado que tengo un procesador de 8 núcleos, he puesto -j4,), veremos que la compilación ha finalizado, pero nos salta el siguiente error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  MODPOST vmlinux.symvers
  MODINFO modules.builtin.modinfo
  GEN     modules.builtin
BTF: .tmp_vmlinux.btf: pahole <span class="o">(</span>pahole<span class="o">)</span> is not available
Failed to generate BTF <span class="k">for </span>vmlinux
Try to disable CONFIG_DEBUG_INFO_BTF
make[3]: <span class="k">***</span> <span class="o">[</span>Makefile:1170: vmlinux] Error 1
make[2]: <span class="k">***</span> <span class="o">[</span>debian/rules:7: build-arch] Error 2
dpkg-buildpackage: fallo: debian/rules binary subprocess returned <span class="nb">exit </span>status 2
make[1]: <span class="k">***</span> <span class="o">[</span>scripts/Makefile.package:83: bindeb-pkg] Error 2
make: <span class="k">***</span> <span class="o">[</span>Makefile:1533: bindeb-pkg] Error 2
</code></pre></div></div>

<p>Para solucionarlo, deberemos modificar el fichero <em>.config</em> y desactivar la opción <em>CONFIG_DEBUG_INFO_BTF</em>:</p>

<p><img src="/assets/images/kernel/2.png" alt="2" /></p>

<p>Tras finalizar la compilación, y quitar módulos innecesarios el tamaño del directorio ha bajado a GB:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-lh</span> ..
total 237M 
</code></pre></div></div>

<p><img src="/assets/images/kernel/5.png" alt="4" /></p>

<p>Como podemos ver en la siguiente imágen, el tamaño del fichero <em>.deb</em> es ahora de 5,6 MB, en lugar de los 1,1 GB que teníamos antes:</p>

<h2 id="instalación-del-kernel">Instalación del kernel</h2>

<ol>
  <li>Instalamos el kernel:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">sudo </span>dpkg <span class="nt">-i</span> linux-headers-5.10.0_5.10.0-1_amd64.deb
</code></pre></div></div>

<p><img src="/assets/images/kernel/4.png" alt="5" /></p>

<ol>
  <li>Reiniciamos el sistema:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">sudo </span>reboot
</code></pre></div></div>

<ol>
  <li>Comprobamos que el kernel se ha instalado correctamente:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-r</span>
5.10.0-1-amd64
</code></pre></div></div>

<p><img src="/assets/images/kernel/6.png" alt="6" /></p>

<ol>
  <li>Realizamos un ping al exterior para ver que la red funciona correctamente:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria@maria-debian:~kernel<span class="nv">$ </span>ping <span class="nt">-c</span> 5 8.8.8.8
</code></pre></div></div>

<p><img src="/assets/images/kernel/7.png" alt="7" /></p>

<h2 id="errores-encontrados-y-solución">Errores encontrados y solución</h2>

<p>Una vez compilado el kernel, al intentar instalarlo, nos salta el siguiente error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: os-prober will be executed to detect other bootable partitions.
Its output will be used to detect bootable binaries on them and create menu boot entries.
</code></pre></div></div>

<p>Para solucionarlo, tendremos que:</p>
<ul>
  <li>
    <p>Ignore la advertencia, es solo una advertencia, no un error.</p>
  </li>
  <li>
    <p>Configuramos la variable <code class="language-plaintext highlighter-rouge">GRUB_DISABLE_OS_PROBER=false</code> en <code class="language-plaintext highlighter-rouge">/etc/default/grub</code>. La advertencia cambiará a <code class="language-plaintext highlighter-rouge">os-prober se ejecutará para detectar...</code>.</p>
  </li>
  <li>
    <p>Eliminamos el bit ejecutable de <code class="language-plaintext highlighter-rouge">/etc/grub.d/30_os-prober</code>. Esto evitará la ejecución del script, por lo que no podrá recibir ninguna de estas advertencias. Podemos realizar:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod</span> <span class="nt">-x</span> /etc/grub.d/30_os-prober
</code></pre></div></div>

<ul>
  <li>Por último, editamos el script <code class="language-plaintext highlighter-rouge">/etc/grub.d/30_os-prober</code>. Si comentamos las líneas con <code class="language-plaintext highlighter-rouge">grub_warn</code>, el script se ejecutará sin emitir estas advertencias.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="k">if</span> <span class="o">[</span> <span class="s2">"x</span><span class="k">${</span><span class="nv">GRUB_DISABLE_OS_PROBER</span><span class="k">}</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"xtrue"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span>grub_warn <span class="s2">"</span><span class="si">$(</span>gettext_printf <span class="s2">"os-prober will not be executed to detect other &gt; bootable partitions. </span><span class="se">\n</span><span class="s2">Systems on them will not be added to the GRUB boot configuration.</span><span class="se">\n</span><span class="s2">Check GRUB_DISABLE_OS_PROBER documentation entry."</span><span class="si">)</span><span class="s2">"</span>
  <span class="nb">exit </span>0
<span class="k">fi

</span>grub_warn <span class="s2">"</span><span class="si">$(</span>gettext_printf <span class="s2">"os-prober will be executed to detect other bootable partitions.</span><span class="se">\n</span><span class="s2">Its output will be used to detect bootable binaries on them and create new boot entries."</span><span class="si">)</span><span class="s2">"</span>
...
</code></pre></div></div>

<h2 id="conclusiones">Conclusiones</h2>

<p>En este artículo hemos visto como compilar un kernel desde cero, y como instalarlo en nuestro sistema. También hemos visto como reducir el tamaño del kernel, y como comprobar que el kernel se ha instalado correctamente.</p>

<p>También debo aclarar que realice una reducción mínima del kernel, pero por incompatibilidad con mi tarjeta gráfica, no pude hacerlo funcionar. Sin embargo en otra máquina virtual, con una tarjeta gráfica compatible, si que pude hacerlo funcionar.</p>

<p><img src="/assets/images/kernel/8.jpg" alt="8" /></p>]]></content><author><name></name></author><category term="ASO" /><summary type="html"><![CDATA[¿Qué es un kernel?]]></summary></entry><entry><title type="html">Instalación de nginx con PHP con vagrant y ansible</title><link href="/hlc+sri/2022/11/13/ansible-nginx.html" rel="alternate" type="text/html" title="Instalación de nginx con PHP con vagrant y ansible" /><published>2022-11-13T16:17:03+01:00</published><updated>2022-11-13T16:17:03+01:00</updated><id>/hlc+sri/2022/11/13/ansible-nginx</id><content type="html" xml:base="/hlc+sri/2022/11/13/ansible-nginx.html"><![CDATA[<p>En esta entrada vamos a realizar una variante de <a href="https://sysmaria.netlify.app/hlc+sri/2022/11/08/proxy.html">este post</a> en el que lo haremos desde por completo con una receta de ansible y sustituyendo apache por nginx.</p>

<h2 id="descripción-del-escenario">Descripción del escenario</h2>

<ol>
  <li>Vamos a utilizar como base la receta de ansible de <a href="https://sysmaria.netlify.app/hlc+sri/2022/11/08/proxy.html">este post</a> y la vamos a modificarla para añadirle las siguientes funcionalidades:
    <ul>
      <li>Instalamos los servicios (con roles diferenciados).</li>
      <li>Copiamos un index en el DocumentRoot y un info.php.</li>
    </ul>
  </li>
</ol>

<ul>
  <li>La receta de ansible debe desactivar los virtualhost que tengamos definidos en otra lista.</li>
</ul>

<ol>
  <li>Configuramos sobre una máquina virtual, un servidor ngix con PHP con dos virtualhost:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">www.pagina1.org</code>, cuyo <em>DocumentRoot</em> es <code class="language-plaintext highlighter-rouge">/srv/www/pagina1.org</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">www.pagina2.org</code>, cuyo <em>DocumentRoot</em> es <code class="language-plaintext highlighter-rouge">/srv/www/pagina2.org</code>.</li>
    </ul>
  </li>
  <li>Una vez configurada la receta, debemos configurar de forma manual las siguientes características:
    <ul>
      <li>Cuando accedamos a <code class="language-plaintext highlighter-rouge">www.pagina1.org</code> se redireccionará a <code class="language-plaintext highlighter-rouge">www.pagina2.org/principal</code>. No se permitirá ver la lista de ficheros.</li>
      <li>Cuando accedamos a `www.pagina1.org/principal se debe mostrar una página web estática.</li>
      <li>Si accedemos a la página <code class="language-plaintext highlighter-rouge">www.pagina2.org/principal/documentos</code> se visualizarán los documentos que tengamos en <code class="language-plaintext highlighter-rouge">/srv/doc</code>. Y se permitirá el listado y el seguimiento de enlaces simbólicos.</li>
      <li>Limitaremos el accero a <code class="language-plaintext highlighter-rouge">www.pagina1.org/principal/secreto</code> con autenticación básica.</li>
    </ul>
  </li>
</ol>

<h2 id="la-receta-de-ansible">La receta de ansible</h2>

<p>Ya ejecutada la receta, y habiendo cambiando el fichero <em>hosts</em> para que apunte a la máquina virtual, podemos comprobar que tenemos instalado el servidor nginx con PHP. Y vamos a realizar las siguientes comprobaciones:</p>

<ol>
  <li>
    <p>Los virtualhost que tenemos definidos en la receta de ansible, están creados y funcionando correctamente.</p>

    <p><img src="/assets/images/nginx/1.png" alt="1" /></p>

    <p><img src="/assets/images/nginx/2.png" alt="2" /></p>

    <p><img src="/assets/images/nginx/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Comprobamos que al acceder a <em>www.pagina1.org</em> se produce la redirección a <em>www.pagina1.org/principal</em>.</p>

    <p>Si lo que queremos es que nginx redireccione a otra página, debemos añadir la siguiente línea en el fichero de configuración del virtualhost:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    server <span class="o">{</span>
     rewrite ^/<span class="nv">$ </span>/principal redirect<span class="p">;</span>

     location / <span class="o">{</span>
         try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
         autoindex off<span class="p">;</span>
         disable_symlinks if_not_owner <span class="nv">from</span><span class="o">=</span><span class="nv">$root</span><span class="p">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/nginx/4.png" alt="4" /></p>

    <p><img src="/assets/images/nginx/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Si accedemos a la página <em>www.pagina1.org/principal/documentos</em> se visualizarán los documentos que tengamos en <em>/srv/doc</em>. Y no se permitirá el listado y el seguimiento de enlaces simbólicos.</p>

    <ul>
      <li>
        <p>Creamos el directorio y le cambiamos los permisos:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir</span> /srv/doc
  <span class="nb">chown </span>www-data:www-data /srv/doc
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos un fichero en el directorio <em>/srv/doc</em> y lo enlazamos simbólicamente en el directorio <em>/srv/www/pagina1.org/principal/documentos</em>.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola Mundo"</span> <span class="o">&gt;</span> /srv/doc/doc1.txt
</code></pre></div>        </div>
      </li>
      <li>
        <p>Modificamos el fichero <em>pagina1.conf</em> para que liste los ficheros del directorio <em>/srv/doc</em>.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  location /principal/documentos <span class="o">{</span>
      <span class="nb">alias</span> /srv/doc<span class="p">;</span>
      autoindex on<span class="p">;</span>
  <span class="o">}</span>
</code></pre></div>        </div>
        <p><img src="/assets/images/nginx/6.png" alt="6" /></p>
      </li>
    </ul>

    <p><img src="/assets/images/nginx/7.png" alt="7" /></p>

    <p><img src="/assets/images/nginx/8.png" alt="8" /></p>
  </li>
  <li>
    <p>Limitaremos el acceso a <em>www.pagina1.org/secreto</em> en nginx con autenticación básica.</p>

    <ul>
      <li>
        <p>Creamos un fichero <em>.htpasswd</em> con el usuario y la contraseña que queramos dentro de */secreto.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  htpasswd <span class="nt">-c</span> <span class="nt">-b</span> <span class="nt">-B</span> /srv/www/pagina1/secreto/.htpasswd maria admin
</code></pre></div>        </div>
      </li>
      <li>
        <p>Modificamos el fichero <em>pagina1.conf</em> para que se aplique la autenticación básica y accederemos al index de <em>www.pagina1.com/secreto</em>.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  location /secreto <span class="o">{</span>
      auth_basic <span class="s2">"Acceso restringido"</span><span class="p">;</span>
      auth_basic_user_file /srv/www/pagina1/secreto/.htpasswd<span class="p">;</span>
  <span class="o">}</span>
</code></pre></div>        </div>
        <p><img src="/assets/images/nginx/9.png" alt="9" /></p>
      </li>
    </ul>

    <p><img src="/assets/images/nginx/10.png" alt="10" /></p>
  </li>
</ol>

<p>Tras todas las modificaciones, el fichero <em>pagina1.conf</em> quedaría de la siguiente forma:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 80<span class="p">;</span>
        root /srv/www/pagina1<span class="p">;</span>
        index index.php index.html index.htm index.nginx-debian.html<span class="p">;</span>
        server_name pagina1.org www.pagina1.org<span class="p">;</span>

        rewrite ^/<span class="nv">$ </span>/principal redirect<span class="p">;</span>

        error_log /var/log/nginx/error_pagina1.log<span class="p">;</span>
        access_log /var/log/nginx/access_pagina1.log<span class="p">;</span>

        location / <span class="o">{</span>
            try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
            autoindex off<span class="p">;</span>
            disable_symlinks if_not_owner <span class="nv">from</span><span class="o">=</span><span class="nv">$root</span><span class="p">;</span>
        <span class="o">}</span>
       location /principal/documentos <span class="o">{</span>
            autoindex on<span class="p">;</span>
            <span class="nb">alias</span> /srv/doc<span class="p">;</span>
        <span class="o">}</span>

        location /secreto <span class="o">{</span>
            try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
            auth_basic <span class="s2">"Acceso restringido"</span><span class="p">;</span>
            auth_basic_user_file /srv/www/pagina1/secreto/.htpasswd<span class="p">;</span>
        <span class="o">}</span>

        location ~ <span class="se">\.</span>php<span class="nv">$ </span><span class="o">{</span>
                include snippets/fastcgi-php.conf<span class="p">;</span>
                fastcgi_pass unix:/var/run/php/php7.4-fpm.sock<span class="p">;</span>
        <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="para-finalizar">Para finalizar</h2>

<p>Como podemos ver el virtualhost <em>www.pagina2.org</em> está activo.</p>

<p><img src="/assets/images/nginx/11.png" alt="11" /></p>

<p>Pero, vamos a cambiar la receta de ansible para desactivar el acceso a la página <em>www.pagina2.org</em> de la siguiente manera:</p>

<ol>
  <li>
    <p>Vamosa modificar el <em>all.yaml</em> para que se desactive.</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">del_virtualhost</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">pagina2</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>En el <em>main.yaml</em> vamos a añadir la siguiente tarea:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Delete vhost pagina2</span>
   <span class="na">file</span><span class="pi">:</span>
     <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/nginx/sites-enabled/.conf</span>
     <span class="na">state</span><span class="pi">:</span> <span class="s">absent</span>
   <span class="na">with_items</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s2">"</span><span class="s">"</span>
   <span class="na">notify</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s">restart nginx</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Ejecutamos la receta de ansible.</p>

    <p><img src="/assets/images/nginx/12.png" alt="12" /></p>

    <p><img src="/assets/images/nginx/13.png" alt="13" /></p>
  </li>
</ol>

<p>Y como podemos ver, el virtualhost <em>www.pagina2.org</em> ya no está activo.</p>

<p>La receta de ansible la podemos encontrar en el siguiente <a href="https://github.com/Legnakra/Nginx-Ansible">repositorio</a>.</p>]]></content><author><name></name></author><category term="hlc+sri" /><summary type="html"><![CDATA[En esta entrada vamos a realizar una variante de este post en el que lo haremos desde por completo con una receta de ansible y sustituyendo apache por nginx.]]></summary></entry><entry><title type="html">Apache como proxy inverso</title><link href="/hlc+sri/2022/11/08/proxy.html" rel="alternate" type="text/html" title="Apache como proxy inverso" /><published>2022-11-08T13:11:32+01:00</published><updated>2022-11-08T13:11:32+01:00</updated><id>/hlc+sri/2022/11/08/proxy</id><content type="html" xml:base="/hlc+sri/2022/11/08/proxy.html"><![CDATA[<h2 id="apache-como-proxy-inverso">Apache como proxy inverso</h2>

<p>Apache es un servidor web que se puede utilizar como proxy inverso. En este artículo se explica cómo configurar Apache para que actúe como proxy inverso.</p>

<h2 id="configuración">Configuración</h2>

<p>Lo primero que haremos será aplicar el <a href="https://fp.josedomingo.org/sri2223/3_http/files/ejercicio_proxy.zip">escenario</a> donde encontraremos:</p>

<ul>
  <li>Un escenario vagrant con dos máquinas virtuales:
    <ul>
      <li>Una máquina proxy conectada al exterior y a una red interna.</li>
      <li>Una máquina servidorweb conectada a la red interna.</li>
    </ul>
  </li>
  <li>Una receta ansible para configurar las dos máquinas virtuales del escenario anterior.</li>
</ul>

<p>Lo siguiente será instalar apache en la máquina proxy y configurarla para acceder a las páginas web de la máquina servidorweb. La primera URL es www.app1.org y la segunda es www.app2.org.</p>

<p>Activaremos el módulo proxy y proxy_http de apache:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a2enmod proxy
a2enmod proxy_http
</code></pre></div></div>

<p>Y reiniciaremos el servidor web:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart apache2
</code></pre></div></div>

<p>Ahora crearemos un archivo de configuración para cada una de las aplicaciones que queremos que se sirvan a través de apache. En este caso, crearemos dos archivos de configuración: app1.conf y app2.conf. Estos archivos de configuración se guardarán en la ruta /etc/apache2/sites-available.</p>

<p>El contenido de app1.conf será el siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;VirtualHost *:80&gt;
        ServerName www.app1.org
        ProxyPass               /       "http://interno.example1.org"
        ProxyPassReverse        /       "http://interno.example1.org"
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p>Y el contenido de app2.conf será el siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;VirtualHost *:80&gt;
        ServerName www.app2.org
        ProxyPass               /       "http://interno.example2.org"
        ProxyPassReverse        /       "http://interno.example2.org"
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p>Ahora activaremos los archivos de configuración de las aplicaciones:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a2ensite app1.conf
a2ensite app2.conf
</code></pre></div></div>

<p>Y reiniciaremos el servidor web:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart apache2
</code></pre></div></div>

<p>Ahora configuraremos el archivo /etc/hosts de la máquina host para que resuelva los nombres de las aplicaciones a las direcciones IP de las máquinas servidorweb. El contenido del archivo /etc/hosts será el siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>192.168.121.63 www.app1.org www.app2.org
</code></pre></div></div>

<p>Ahora configuraremos el archivo /etc/hosts de las máquinas servidorweb para que resuelva los nombres de las aplicaciones a las direcciones IP de la máquina proxy. El contenido del archivo /etc/hosts será el siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10.0.0.6 interno.example1.org interno.example2.org
</code></pre></div></div>

<p>Ahora, desde la máquina host, accederemos a las aplicaciones a través de la máquina proxy. Para ello, abriremos un navegador web y accederemos a las siguientes URLs:</p>

<p><img src="/assets/images/proxy/1.png" alt="1" /></p>

<p><img src="/assets/images/proxy/2.png" alt="2" /></p>

<h2 id="creamos-un-virtualhost-para-las-dos-aplicaciones">Creamos un virtualhost para las dos aplicaciones</h2>

<p>En vez de crear un virtualhost para cada aplicación, podemos crear un virtualhost para las dos aplicaciones. El contenido del archivo servidor.conf será el siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;VirtualHost *:80&gt;
    ServerName www.servidor.org
    &lt;Location "/app1"&gt;
        ProxyPass           "http://interno.example1.org"
        ProxyPassReverse    "http://interno.example1.org"
    &lt;/Location&gt;
    &lt;Location "/app2"&gt;
        ProxyPass           "http://interno.example2.org"
        ProxyPassReverse    "http://interno.example2.org"
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p>Ahora activaremos el archivo de configuración de la aplicación:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a2ensite servidor.conf
</code></pre></div></div>

<p>Y reiniciaremos el servidor web:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart apache2
</code></pre></div></div>

<p>Cambiaremos el contenido del archivo /etc/hosts de la máquina host para que resuelva el nombre de la aplicación a la dirección IP de la máquina proxy. El contenido del archivo /etc/hosts será el siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>192.168.121.63 www.app1.org www.app2.org www.servidor.org
</code></pre></div></div>

<p>Ahora, desde la máquina host, accederemos a las aplicaciones a través de la máquina proxy. Para ello, abriremos un navegador web y accederemos a las siguientes URLs:</p>

<p><img src="/assets/images/proxy/3.png" alt="3" /></p>

<p><img src="/assets/images/proxy/4.png" alt="4" /></p>

<h2 id="modificaciones">Modificaciones</h2>

<p>En el primer escenario, hemos configurado http://www.app1.org/directorio para que se sirva a través de la máquina proxy. Ahora vamos a modificarlo quitando la directiva ProxyPassReverse. El contenido del archivo app1.conf será el siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;VirtualHost *:80&gt;
        ServerName www.app1.org
        ProxyPass               /       "http://interno.example1.org"
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p>Si realizamos una petición HEAD con curl, veremos que cambia Location de la respuesta:</p>

<p><img src="/assets/images/proxy/5.png" alt="5" /></p>

<p><img src="/assets/images/proxy/6.png" alt="6" /></p>

<p>Si ponemos de nuevo la directiva ProxyPassReverse, y queremos comprobar que redirección se realiza, podemos comprobarlo en la cabecera de Location de la respuesta:</p>

<p><img src="/assets/images/proxy/7.png" alt="7" /></p>

<p><img src="/assets/images/proxy/8.png" alt="8" /></p>

<p>Como podemos ver en las siguientes imágenes, también sucede con el virtualhost <em>servidor.conf</em>.</p>

<p>(antes de quitar ProxyPassReverse)
<img src="/assets/images/proxy/9.png" alt="9" /></p>

<p><img src="/assets/images/proxy/10.png" alt="10" /></p>

<p>(despues de quitar ProxyPassReverse)</p>

<p><img src="/assets/images/proxy/11.png" alt="11" /></p>

<p><img src="/assets/images/proxy/12.png" alt="12" /></p>]]></content><author><name></name></author><category term="hlc+sri" /><summary type="html"><![CDATA[Apache como proxy inverso]]></summary></entry><entry><title type="html">Interconexiones de servidores</title><link href="/asgbd/2022/11/08/interconexion.html" rel="alternate" type="text/html" title="Interconexiones de servidores" /><published>2022-11-08T13:11:32+01:00</published><updated>2022-11-08T13:11:32+01:00</updated><id>/asgbd/2022/11/08/interconexion</id><content type="html" xml:base="/asgbd/2022/11/08/interconexion.html"><![CDATA[<p>En esta entrada vamos a configurar servicios gestores de bases de datos para realizar interconexiones entre ellos. Es una práctica habitual en entornos de producción, donde se suele tener un servidor de bases de datos principal y otros servidores de bases de datos secundarios, que se conectan al servidor principal para realizar consultas y actualizaciones de datos.</p>

<p>Decir que para realizar esta documentación las versiones de software que se han utilizado son las siguientes:</p>
<ul>
  <li>Debian 11</li>
  <li>Oracle 19c</li>
  <li>PostgreSQL 13</li>
</ul>

<h2 id="interconexión-entre-dos-servidores-con-oracle-19c">Interconexión entre dos servidores con Oracle 19c</h2>

<p><img src="/assets/images/interconexion/oracle.png" alt="oracle" /></p>

<p>En esta primera parte vamos a realizar una interconexión entre dos servidores con Oracle 19c. Para ello vamos a utilizar el servicio de bases de datos Oracle 19c que tenemos instalado y vamos a crear en cada máquina un usuario, <code class="language-plaintext highlighter-rouge">maria1</code> la máquina <code class="language-plaintext highlighter-rouge">oracle1</code> y <code class="language-plaintext highlighter-rouge">maria2</code> en la máquina <code class="language-plaintext highlighter-rouge">oracle2</code>.</p>

<p>Lo primero que debemos averiguar es la IP de cada una de nuestras máquinas, en mi caso son:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oracle1: 192.168.122.189
<span class="nt">---</span>
oracle2: 192.168.122.179
</code></pre></div></div>
<p>A continuación, vamos conectarnos con el usuario administrador de oracle en cada una de las máquinas y vamos a crear los usuarios que vamos a utilizar para la interconexión.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle1</span>
<span class="nv">$ </span>sqlplus / as sysdba
SQL&gt; create user maria1 identified by admin<span class="p">;</span>
SQL&gt; grant connect, resource to maria1<span class="p">;</span>
SQL&gt; unlimit tablespace to maria1<span class="p">;</span>
SQL&gt; <span class="nb">exit</span>
</code></pre></div></div>
<p><img src="/assets/images/interconexion/1.png" alt="1" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle2</span>
<span class="nv">$ </span>sqlplus / as sysdba
SQL&gt; create user maria2 identified by admin<span class="p">;</span>
SQL&gt; grant connect, resource to maria2<span class="p">;</span>
SQL&gt; unlimit tablespace to maria2<span class="p">;</span>
SQL&gt; <span class="nb">exit</span>
</code></pre></div></div>
<p><img src="/assets/images/interconexion/2.png" alt="2" /></p>

<p>Ya creados los usuarios, también deberemos comprobar que el servicio de escucha de la base de datos está activo en cada una de las máquinas. Para ello, en cada una de las máquinas, ejecutamos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>lsnrctl status
</code></pre></div></div>
<p>Para asegurarnos de que el servicio está activo, debemos ver la siguiente salida:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tnsping &lt;ip&gt;
</code></pre></div></div>

<p><img src="/assets/images/interconexion/3.png" alt="3" /></p>

<p><img src="/assets/images/interconexion/4.png" alt="4" /></p>

<p>En el caso de que nos aparezca desactivado, lo activamos con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>lsnrctl start
</code></pre></div></div>
<p><img src="/assets/images/interconexion/5.png" alt="5" /></p>

<h3 id="enrutamos-los-servidores">Enrutamos los servidores</h3>

<p>En este paso, vamos a añadirle una entrada a la tabla de enrutamiento de cada una de las máquinas, para que sepan cómo llegar al otro servidor. Para ello, en cada una de las máquinas, modificaremos el fichero tnsnames.ora, que se encuentra en la ruta <code class="language-plaintext highlighter-rouge">$ORACLE_HOME/network/admin/</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle1</span>
ORACLE2 <span class="o">=</span>
    <span class="o">(</span>DESCRIPTION <span class="o">=</span>
        <span class="o">(</span>ADDRESS <span class="o">=</span> <span class="o">(</span>PROTOCOL <span class="o">=</span> TCP<span class="o">)(</span>HOST <span class="o">=</span> 192.168.122.179<span class="o">)(</span>PORT <span class="o">=</span> 1521<span class="o">))</span>
        <span class="o">(</span>CONNECT_DATA <span class="o">=</span>
            <span class="o">(</span>SERVER <span class="o">=</span> DEDICATED<span class="o">)</span>
            <span class="o">(</span>SERVICE_NAME <span class="o">=</span> ORCLCDB<span class="o">)</span>
        <span class="o">)</span>
    <span class="o">)</span>
</code></pre></div></div>
<p><img src="/assets/images/interconexion/6.png" alt="6" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle2</span>
ORACLE1 <span class="o">=</span>
    <span class="o">(</span>DESCRIPTION <span class="o">=</span>
        <span class="o">(</span>ADDRESS <span class="o">=</span> <span class="o">(</span>PROTOCOL <span class="o">=</span> TCP<span class="o">)(</span>HOST <span class="o">=</span> 192.168.122.189<span class="o">)(</span>PORT <span class="o">=</span> 1521<span class="o">))</span>
        <span class="o">(</span>CONNECT_DATA <span class="o">=</span>
            <span class="o">(</span>SERVER <span class="o">=</span> DEDICATED<span class="o">)</span>
            <span class="o">(</span>SERVICE_NAME <span class="o">=</span> ORCLCDB<span class="o">)</span>
        <span class="o">)</span>
    <span class="o">)</span>
</code></pre></div></div>

<p><img src="/assets/images/interconexion/7.png" alt="7" /></p>

<h3 id="creamos-la-base-de-datos">Creamos la base de datos</h3>

<p>Ahora vamos a crear una base de datos en cada una de las máquinas. Para las comprobaciones he optado por el esquema SCOTT, que podéis encontrar <a href="https://github.com/Legnakra/esquema-scott/blob/main/scott.sql">aquí</a>. La única diferencia, es que el servidor oracle2 no tendrá la tabla empleados, ya que la vamos a crear en el servidor oracle1.</p>

<h3 id="creamos-los-enlaces">Creamos los enlaces</h3>

<p>Ambos servidores ya tienen la base de datos creada, ahora vamos a crear los enlaces entre ellos. Para ello, en la máquina oracle1, vamos a crear el enlace con el usuario maria1 y en la máquina oracle2, vamos a crear el enlace con el usuario maria2.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle1</span>
<span class="nv">$ </span>sqlplus maria1/admin
SQL&gt; CREATE DATABASE LINK interconexion2 CONNECT TO maria2 IDENTIFIED BY admin USING <span class="s1">'ORACLE2'</span><span class="p">;</span>
SQL&gt; <span class="nb">exit</span>
</code></pre></div></div>
<p><img src="/assets/images/interconexion/8.png" alt="8" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle2</span>
<span class="nv">$ </span>sqlplus maria2/admin
SQL&gt; CREATE DATABASE LINK interconexion1 CONNECT TO maria1 IDENTIFIED BY admin USING <span class="s1">'ORACLE1'</span><span class="p">;</span>
SQL&gt; <span class="nb">exit</span>
</code></pre></div></div>
<p><img src="/assets/images/interconexion/9.png" alt="9" /></p>

<h3 id="comprobamos-la-conexión">Comprobamos la conexión</h3>

<p>Ahora vamos a comprobar que la conexión entre los dos servidores funciona correctamente. Para ello, vamos a realizar una consulta en la máquina oracle2, que es la que no tiene la tabla empleados, y vamos a ver si podemos acceder a ella.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle1</span>
<span class="nv">$ </span>sqlplus maria1/admin
SQL&gt; SELECT <span class="k">*</span> FROM dept@interconexion2 WHERE dname <span class="o">=</span> <span class="s1">'SALES'</span><span class="p">;</span>
SQL&gt; <span class="nb">exit</span>
</code></pre></div></div>
<p><img src="/assets/images/interconexion/10.png" alt="10" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle2</span>
<span class="nv">$ </span>sqlplus maria2/admin
SQL&gt; SELECT <span class="k">*</span> FROM emp@interconexion1 WHERE deptno <span class="o">=</span> 20<span class="p">;</span>
SQL&gt; <span class="nb">exit</span>
</code></pre></div></div>
<p><img src="/assets/images/interconexion/11.png" alt="11" /></p>

<h2 id="interconexión-entre-dos-servidores-con-postgresql">Interconexión entre dos servidores con postgresql</h2>

<p><img src="/assets/images/interconexion/postgresql.png" alt="postgresql" /></p>

<p>Ahora le toca el turno a postgresql. Para realizar la interconexión entre dos servidores, vamos a utilizar el mismo esquema que en el caso de oracle, es decir, vamos a crear una base de datos en cada uno de los servidores y vamos a crear un enlace entre ellos.</p>

<p>Lo primero que debemos averiguar es la IP de cada una de nuestras máquinas, en mi caso son:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maria: 192.168.122.167
<span class="nt">---</span>
oracle: 192.168.122.189
</code></pre></div></div>

<h3 id="creamos-la-base-de-datos-1">Creamos la base de datos</h3>
<p>En este caso voy a utilizar el esquema scott de postgresql, que podéis encontrar <a href="">aquí</a>, para de esa forma hacer las mismas consultas que en el caso de oracle.</p>

<h3 id="creamos-los-usuarios">Creamos los usuarios</h3>
<p>A continuación, vamos conectarnos con el usuario administrador de postgres en cada una de las máquinas y vamos a crear los usuarios que vamos a utilizar para la interconexión.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># maria</span>
<span class="nv">$ </span><span class="nb">sudo </span>su - postgres psql
<span class="nv">postgres</span><span class="o">=</span><span class="c"># CREATE USER maria2 WITH PASSWORD 'admin';</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># GRANT CONNECT ON DATABASE scott2 TO maria2;</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># GRANT USAGE ON SCHEMA public TO maria2;</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># GRANT;</span>
EXIT<span class="p">;</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle</span>
<span class="nv">$ </span><span class="nb">sudo </span>su - postgres psql
<span class="nv">postgres</span><span class="o">=</span><span class="c"># CREATE USER maria1 WITH PASSWORD 'admin';</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># GRANT CONNECT ON DATABASE scott TO maria1;</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># GRANT USAGE ON SCHEMA public TO maria1;</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># GRANT;</span>
EXIT<span class="p">;</span>
</code></pre></div></div>

<h3 id="creamos-los-enlaces-1">Creamos los enlaces</h3>

<p>Antes de realizar los enlaces entre las dos máquinas, debemos de cerciorarnos de que el puerto 5432 está abierto en las dos máquinas. Para ello, vamos a comprobar con elsiguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tulpn</span> | <span class="nb">grep </span>5432
</code></pre></div></div>

<p>Si no está abierto, lo abrimos con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 5432/tcp
</code></pre></div></div>

<p>Ahora vamos a crear los enlaces entre las dos máquinas. Para ello realizaremos los siguientes pasos:</p>

<ol>
  <li>Nos conectamos como usuario postgres.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>su - postgres psql
</code></pre></div>    </div>
  </li>
  <li>Nos conectamos a la base de datos:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># maria</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># \c scott2</span>
<span class="nt">---</span>
<span class="c"># oracle</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c"># \c scott</span>
</code></pre></div>    </div>
  </li>
  <li>En las dos máquinas realizamos el mismo comando:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">postgres</span><span class="o">=</span><span class="c"># CREATE EXTENSION dblink;</span>
</code></pre></div>    </div>
  </li>
  <li>Comprobamos que los links están realizados:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">postgres</span><span class="o">=</span><span class="c"># \dx</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="comprobamos-la-conexión-1">Comprobamos la conexión</h3>

<p>Ahora vamos a comprobar que la conexión entre los dos servidores funciona correctamente. Para ello, vamos a realizar una consulta en la máquina oracle, que es la que no tiene la tabla empleados, y vamos a ver si podemos acceder a ella.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># maria</span>
<span class="nv">$ </span>psql <span class="nt">-U</span> maria2 <span class="nt">-d</span> scott2
<span class="nv">scott2</span><span class="o">=</span><span class="c"># SELECT * FROM dblink('host=192.168.122.189 port=5432 user=maria1 password=admin dbname=scott', 'SELECT * FROM emp WHERE deptno = 20') as t1 (empno int, ename varchar(10), job varchar(9), mgr int, hiredate date, sal numeric(7,2), comm numeric(7,2), deptno int);</span>
</code></pre></div></div>

<p><img src="/assets/images/interconexion/12.png" alt="12" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># oracle</span>
<span class="nv">$ </span>psql <span class="nt">-U</span> maria1 <span class="nt">-d</span> scott
<span class="nv">scott</span><span class="o">=</span><span class="c"># SELECT * FROM dblink('host=192.168.122.167 port=5432 user=maria2 password=admin dbname=scott2', 'SELECT * FROM dept WHERE deptno = 30') as t2 (deptno int, dname varchar(14), loc varchar(13));</span>
</code></pre></div></div>

<p><img src="/assets/images/interconexion/13.png" alt="13" /></p>

<blockquote>
  <p><strong>Nota:</strong> En el caso de posgresql, a diferencia de ORACLE, es necesario que a la hora de realizar la consulta, se especifique el formato de salida de la misma, ya que si no, dará error.</p>
</blockquote>

<p><img src="/assets/images/interconexion/14.png" alt="14" /></p>

<h2 id="interconexión-entre-un-servidor-oracle-y-un-servidor-postgresql">Interconexión entre un servidor Oracle y un servidor Postgresql</h2>

<p><img src="/assets/images/interconexion/oracle-postgresql.png" alt="postgresql-oracle" /></p>

<p>Para finalizar, vamos a realizar una interconexión entre un servidor oracle y un servidor postgresql. Para ello, vamos a utilizar el mismo esquema que en los casos anteriores, es decir, vamos a reutilizar las bases de datos que hemos creado en los casos anteriores.</p>

<p>En la máquina <code class="language-plaintext highlighter-rouge">maria</code> con ip <code class="language-plaintext highlighter-rouge">192.168.122.167</code> tenemos la base de datos <code class="language-plaintext highlighter-rouge">scott2</code> con la tabla <code class="language-plaintext highlighter-rouge">dept</code> y en la máquina <code class="language-plaintext highlighter-rouge">oracle</code> con ip <code class="language-plaintext highlighter-rouge">192.168.122.189</code> tenemos la base de datos <code class="language-plaintext highlighter-rouge">scott</code> con la tabla <code class="language-plaintext highlighter-rouge">emp</code>.</p>

<h3 id="creamos-los-enlaces-2">Creamos los enlaces</h3>

<p>Realmente, ambas máquinas ya están configuradas para acceder a ellas de forma remota, ya que en el caso de oracle, hemos creado un usuario remoto y en el caso de postgresql, hemos abierto el puerto 5432. Pero, siendo dos gestores de bases de datos diferentes, vamos a realizar los enlaces de forma diferente.</p>

<h4 id="conectándonos-de-oracle-a-postgresql">Conectándonos de Oracle a Postgresql</h4>

<p>Para que la interconexión entre estos gestores de bases de datos sea posible, debemos de tener instalado el paquete <code class="language-plaintext highlighter-rouge">postgresql-odbc</code> en la máquina oracle. Para ello, vamos a realizar los siguientes pasos:</p>

<ol>
  <li>Nos conectamos como usuario root.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>su
</code></pre></div>    </div>
  </li>
  <li>Actualizamos la lista de paquetes.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>apt-get update
</code></pre></div>    </div>
  </li>
  <li>Instalamos el paquete <code class="language-plaintext highlighter-rouge">postgresql-odbc</code> y <code class="language-plaintext highlighter-rouge">unixODCB</code>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>apt-get <span class="nb">install </span>odbc-postgresql unixodbc
</code></pre></div>    </div>
  </li>
  <li>Creamos el archivo de configuración de odbc.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano /etc/odbc.ini
</code></pre></div>    </div>
  </li>
  <li>Añadimos la siguiente configuración:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>PSQLORCL]
Debug <span class="o">=</span> 0
CommLog <span class="o">=</span> 0
ReadOnly <span class="o">=</span> 0
Driver <span class="o">=</span> PostgreSQL
Servername <span class="o">=</span> 192.168.122.172
Username <span class="o">=</span> maria2
Password <span class="o">=</span> admin
Port <span class="o">=</span> 5432
Database <span class="o">=</span> scott2
Trace <span class="o">=</span> 0
TraceFile <span class="o">=</span> /tmp/sql.log
</code></pre></div>    </div>
  </li>
  <li>Creamos el archivo de configuración de odbcinst.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano /etc/odbcinst.ini
</code></pre></div>    </div>
  </li>
  <li>Añadimos la siguiente configuración:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>PostgreSQL]
Description     <span class="o">=</span> ODBC <span class="k">for </span>PostgreSQL
Driver          <span class="o">=</span> psqlodbcw.so
Setup           <span class="o">=</span> libodbcpsqlS.so
Driver64        <span class="o">=</span> psqlodbcw.so
Setup64         <span class="o">=</span> libodbcpsqlS.so
FileUsage       <span class="o">=</span> 1
</code></pre></div>    </div>
  </li>
  <li>Reiniciamos el servicio odbc.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>service odbc restart
</code></pre></div>    </div>
  </li>
</ol>

<p>Una vez finalizada la configuración, vamos a realizar la conexión entre los dos servidores y comprobar que funciona correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>isql <span class="nt">-v</span> PSQLORCL
</code></pre></div></div>

<p>Y realizamos una consulta simple para comprobar que funciona correctamente.</p>

<p><img src="/assets/images/interconexion/16.png" alt="16" /></p>

<p>Realizamos el link de la base de datos pero esta vez desde Oracle, pero para ello, debemos realizar las siguientes modificaciones:</p>

<ol>
  <li>Creatermos el fichero <em>initPSQLORCL.ora</em> dentro de $ORACLE_HOME/network/admin.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano <span class="nv">$ORACLE_HOME</span>/network/admin/initPSQLORCL.ora
</code></pre></div>    </div>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HS_FDS_CONNECT_INFO <span class="o">=</span> PSQLU
HS_FDS_TRACE_LEVEL <span class="o">=</span> DEBUG
HS_FDS_SHAREABLE_NAME <span class="o">=</span> /usr/lib64/psqlodbcw.so
HS_LANGUAGE <span class="o">=</span> AMERICAN_AMERICA.WE8ISO8859P1
<span class="nb">set </span><span class="nv">ODBCINI</span><span class="o">=</span>/etc/odbc.ini
<span class="nb">set </span><span class="nv">ODBCSYSINI</span><span class="o">=</span>/etc
</code></pre></div>    </div>
  </li>
  <li>Lo siquiente que modificaremos, añadiendo lo descrito, será el fichero <em>listener.ora</em>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano <span class="nv">$ORACLE_HOME</span>/network/admin/listener.ora
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> LISTENER <span class="o">=</span>
     <span class="o">(</span>DESCRIPTION_LIST <span class="o">=</span>
         <span class="o">(</span>DESCRIPTION <span class="o">=</span>
             <span class="o">(</span>ADDRESS <span class="o">=</span> <span class="o">(</span>PROTOCOL <span class="o">=</span> TCP<span class="o">)(</span>HOST <span class="o">=</span> 192.168.122.189<span class="o">)(</span>PORT <span class="o">=</span> 1521<span class="o">))</span>
             <span class="o">(</span>ADDRESS <span class="o">=</span> <span class="o">(</span>PROTOCOL <span class="o">=</span> IPC<span class="o">)(</span>KEY <span class="o">=</span> EXTPROC1521<span class="o">))</span>
         <span class="o">)</span>
     <span class="o">)</span>

 SID_LIST_LISTENER <span class="o">=</span>
     <span class="o">(</span>SID_LIST <span class="o">=</span>
         <span class="o">(</span>SID_DESC <span class="o">=</span>
             <span class="o">(</span>SID_NAME <span class="o">=</span> PSQLORCL<span class="o">)</span>
             <span class="o">(</span><span class="nv">ORACLE_HOME</span><span class="o">=</span>/opt/oracle/product/19c/dbhome_1<span class="o">)</span>
             <span class="o">(</span><span class="nv">PROGRAM</span><span class="o">=</span>dg4odbc<span class="o">)</span>
         <span class="o">)</span>
     <span class="o">)</span>
</code></pre></div>    </div>
  </li>
  <li>Modicicamos tambien el fichero <em>tnsnames.ora</em>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PSQLORCL <span class="o">=</span>
 <span class="o">(</span><span class="nv">DESCRIPTION</span><span class="o">=</span>
     <span class="o">(</span><span class="nv">ADDRESS</span><span class="o">=(</span><span class="nv">PROTOCOL</span><span class="o">=</span>tcp<span class="o">)(</span><span class="nv">HOST</span><span class="o">=</span>192.168.122.189<span class="o">)(</span><span class="nv">PORT</span><span class="o">=</span>1521<span class="o">))</span>
     <span class="o">(</span><span class="nv">CONNECT_DATA</span><span class="o">=(</span><span class="nv">SID</span><span class="o">=</span>PSQLORCL<span class="o">))</span>
     <span class="o">(</span><span class="nv">HS</span><span class="o">=</span>OK<span class="o">)</span>
 <span class="o">)</span>
</code></pre></div>    </div>
  </li>
  <li>Reiniciamos el servicio de oracle.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>service oracle restart
</code></pre></div>    </div>
  </li>
</ol>

<p>Y como podemos comprobar, la conexión funciona correctamente. En la imagen de a continuación podemos ver que se lista la tabla que sí existe en la base de datos de postgres, es decir, la tabla dept.</p>

<p><img src="/assets/images/interconexion/17.png" alt="17" /></p>

<h2 id="interconexión-entre-un-servidor-postgresql-y-un-servidor-oracle">Interconexión entre un servidor Postgresql y un servidor Oracle</h2>

<p>Para que los dos servidores puedan realizar la interconexión, haremos uso de <code class="language-plaintext highlighter-rouge">oracle_fdw</code>. Para ello instalaremos los siguientes paquetes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>apt-get <span class="nb">install </span>postgresql-server-dev-all libaio1 build-essential
</code></pre></div></div>

<p>Una vez instalados los paquetes, vamos a descargarnos a través de wget los paquetes de Oracle Instant Client. Loguearemos con el usuario postgres y descargaremos los paquetes.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://download.oracle.com/otn_software/linux/instantclient/211000/instantclient-basic-linux.x64-21.1.0.0.0.zip
wget https://download.oracle.com/otn_software/linux/instantclient/211000/instantclient-sdk-linux.x64-21.1.0.0.0.zip
wget https://download.oracle.com/otn_software/linux/instantclient/211000/instantclient-sqlplus-linux.x64-21.1.0.0.0.zip
</code></pre></div></div>

<p>Descomprimimos los paquetes e introducimos las variables de entorno necesarias para no tener que usar el comando <code class="language-plaintext highlighter-rouge">export</code> cada vez que queramos usar los paquetes.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postgres@bbdd2:~<span class="nv">$ </span><span class="nb">export </span><span class="nv">ORACLE_HOME</span><span class="o">=</span>/var/lib/postgresql/instantclient_21_1
postgres@bbdd2:~<span class="nv">$ </span><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:<span class="nv">$ORACLE_HOME</span>
postgres@bbdd2:~<span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ORACLE_HOME</span>
</code></pre></div></div>

<p><img src="/assets/images/interconexion/18.png" alt="18" /></p>

<p>Comprobamos que se han hecho correctamente las variables de entorno.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postgres@bbdd2:~<span class="nv">$ </span>which sqlplus
</code></pre></div></div>

<p><img src="/assets/images/interconexion/19.png" alt="19" /></p>

<p>Y como podemos ver enla siguiente imagen, podemos conectarnos a la base de datos de Oracle.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postgres@bbdd2:~<span class="nv">$ </span>sqlplus maria1/admin@192.168.122.189/ORCLCDB
</code></pre></div></div>

<p><img src="/assets/images/interconexion/20.png" alt="20" /></p>

<p>Una vez comprobado que todo funciona correctamente, vamos a instalar el paquete de <code class="language-plaintext highlighter-rouge">oracle_fdw</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/laurenz/oracle_fdw/archive/refs/tags/ORACLE_FDW_2_3_0.zip
unzip ORACLE_FDW_2_3_0.zip
<span class="nb">mv </span>oracle_fdw-ORACLE_FDW_2_3_0/ oracle_fdw
<span class="nb">cd </span>oracle_fdw
make
make <span class="nb">install</span>
</code></pre></div></div>

<p>Y una vez instalado, vamos a entrar en la base de datos y crearemos la extensión, pero nos salta el siguiente error:</p>

<p><img src="/assets/images/interconexion/21.png" alt="21" /></p>

<p>Para solucionarlo, crearemos el fichero <code class="language-plaintext highlighter-rouge">/etc/ls.so.conf.d/oracle.conf</code> y añadiremos la siguiente línea:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/var/lib/postgresql/instantclient_21_1
/usr/share/postgresql/13/extension
</code></pre></div></div>

<h3 id="creamos-los-enlaces-3">Creamos los enlaces</h3>

<p>Creamos los vínculos a las librerías de los directorio que hemos descrito en el fichero anterior y reiniciamos el servicio de postgresql. Tras ello creamos la extensión y lo comprobamos con <code class="language-plaintext highlighter-rouge">\dx</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldconfig
service postgresql restart
</code></pre></div></div>

<p><img src="/assets/images/interconexion/22.png" alt="22" /></p>

<p>Creamos un nuevo esquema, y una vez creado, definimos el servidor remoto de Oracle y el mapeo de usuario para que nuestro usuario alojado en PostgreSQL pueda acceder en las tablas del servidor Oracle.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE SCHEMA oracle<span class="p">;</span>
create server oracle foreign data wrapper oracle_fdw options <span class="o">(</span>dbserver <span class="s1">'//192.168.122.189/ORCLCDB'</span><span class="o">)</span><span class="p">;</span>

create user mapping <span class="k">for </span>maria2 server oracle options <span class="o">(</span>user <span class="s1">'maria1'</span>, password <span class="s1">'admin'</span><span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="/assets/images/interconexion/23.png" alt="23" /></p>

<p>Salimos de la base de datos y nos conectamos con el usuario que hemos creado con anterioridad.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql <span class="nt">-h</span> localhost <span class="nt">-U</span> maria2 <span class="nt">-d</span> scott2
</code></pre></div></div>

<p><img src="/assets/images/interconexion/24.png" alt="24" /></p>

<h3 id="conectándonos-de-postgres-a-oracle">Conectándonos de Postgres a Oracle</h3>

<p>Como podemos ver en la siguiente imagen, podemos acceder a las tablas de la base de datos de PostgreSQL desde Oracle.</p>

<p><img src="/assets/images/interconexion/25.png" alt="25" /></p>]]></content><author><name></name></author><category term="asgbd" /><summary type="html"><![CDATA[En esta entrada vamos a configurar servicios gestores de bases de datos para realizar interconexiones entre ellos. Es una práctica habitual en entornos de producción, donde se suele tener un servidor de bases de datos principal y otros servidores de bases de datos secundarios, que se conectan al servidor principal para realizar consultas y actualizaciones de datos.]]></summary></entry><entry><title type="html">Introducción a GitHub</title><link href="/python/2022/11/06/github.html" rel="alternate" type="text/html" title="Introducción a GitHub" /><published>2022-11-06T16:45:16+01:00</published><updated>2022-11-06T16:45:16+01:00</updated><id>/python/2022/11/06/github</id><content type="html" xml:base="/python/2022/11/06/github.html"><![CDATA[<h2 id="qué-es-github">¿Qué es GitHub?</h2>
<p>Github es un portal creado para alojar el código de las aplicaciones de cualquier desarrollador, y que fue comprada por Microsoft en junio del 2018. La plataforma está creada para que los desarrolladores suban el código de sus aplicaciones y herramientas, y que como usuario no sólo puedas descargarte la aplicación, sino también entrar a su perfil para leer sobre ella o colaborar con su desarrollo.</p>

<h2 id="introducción-a-github">Introducción a GitHub</h2>

<ol>
  <li>
    <p>Creamos un repositorio en GitHub</p>

    <p><img src="/assets/images/github/1.png" alt="1" /></p>

    <p><img src="/assets/images/github/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Clonamos el repositorio en nuestro ordenador</p>

    <p><img src="/assets/images/github/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Creamos un archivo en nuestro ordenador</p>

    <p><img src="/assets/images/github/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Subimos el archivo al repositorio</p>

    <p><img src="/assets/images/github/5.png" alt="5" /></p>

    <p><img src="/assets/images/github/6.png" alt="6" /></p>
  </li>
</ol>

<h2 id="introducción-a-markdown">Introducción a Markdown</h2>

<p>Markdown es un lenguaje de texto que nos permite escribir de forma sencilla y rápida, y que se convierte en HTML. Es un lenguaje muy utilizado en la creación de blogs, ya que permite escribir de forma rápida y sencilla, y que se convierte en HTML.</p>

<pre>
Aprender la *sintaxis básica* del **lenguaje de marcas** `Markdown` para estructura la información en nuestro documentos.

Para ello, hemos creado este fichero de la siguiente manera:
`touch markdown.md`
`nano markdown.md`

Con este lenguaje de marcas podemos usar:
* Titulo principal.
* Subtítulo.
* Párrafos.
* Listas (ordenadas y desordenadas) como esta y la siguiente.

1. Título.
2. SUbtítulo.
3. Párrafos.
4. Listas.

También podemos incluir un enlace, a una página externa [Debian](https://www.debian.org/index.es.html) o a otro fichero Markdown [aqui](README.md)

Podemos visualizar una imagen

![Icono Markdown](markdown.png)

Y también tablas.
| Elemento | Sintaxis |
| ----------- | ----------- |
| Título | #h1 |
| Código | `code` |
| Enlace | \[titulo]\(enlace) |
</pre>

<p>En mi <a href="https://github.com/Legnakra/Prueba-MariaJesus/blob/main/markdown.md">repositorio</a> podéis encontrar el resultado de este fichero.</p>

<h2 id="ramas-y-uniones">Ramas y uniones</h2>

<p>Las ramas son una forma de trabajar en paralelo en un proyecto, y que nos permite trabajar en diferentes versiones de un mismo proyecto. Las ramas se crean a partir de la rama principal, y se pueden fusionar con la rama principal cuando se considera que la rama ya está lista para ser integrada en el proyecto.</p>

<p>Para crear una rama, podemos hacerlo desde la interfaz de GitHub, o desde la terminal. En mi caso, he creado una rama desde la terminal, y he fusionado la rama con la rama principal.</p>

<ol>
  <li>
    <p>Creamos una rama que se llame primera en tu local, y ejecuta la instrucción necesaria para comprobar que se ha creado.</p>

    <p><img src="/assets/images/github/7.png" alt="7" /></p>
  </li>
  <li>Creamos un nuevo fichero en esta rama y fusiónalo con la principal. ¿Se ha producido conflicto?
    <ul>
      <li>Si, dado que las ramas independientes han editado el mismo fichero, se han realizado una serie de commits que github no puede decidir cuál es la versión que debe elegir y nos alerta de que debemos resolverlo.</li>
    </ul>
  </li>
  <li>
    <p>Borramos la rama primera.</p>

    <p><img src="/assets/images/github/8.png" alt="8" /></p>
  </li>
  <li>
    <p>Creamos una rama que se llame segunda, y modifica un fichero en ella para producir un conflicto al unirlo a la rama principal.</p>

    <p><img src="/assets/images/github/9.png" alt="9" /></p>
  </li>
  <li>
    <p>Solucionamos el conflicto que has creado en el punto anterior y sincronizamos la rama segunda en el remoto.</p>

    <p><img src="/assets/images/github/10.png" alt="10" /></p>

    <p><img src="/assets/images/github/11.png" alt="11" /></p>
  </li>
</ol>

<h2 id="cómo-colaborar-en-un-proyecto-de-software-libre-qué-es-un-pull-request-pr">¿Cómo colaborar en un proyecto de software libre? ¿Qué es un Pull Request (PR)?</h2>

<p>Un Pull Request es una petición de extracción que se realiza a un repositorio de GitHub, y que se utiliza para solicitar que los cambios que se han realizado en una rama sean revisados y fusionados con la rama principal. Los Pull Request se utilizan para colaborar en proyectos de software libre, y para que los desarrolladores puedan revisar los cambios que se han realizado en el código.</p>

<ol>
  <li>
    <p>Nos dirigimos al repositorio en el que queremos hacer el PR, realizamos un fork del mismo.</p>

    <p><code>
 git clone git@github.com:Legnakra/prueba-pr-asir.git
 </code></p>
  </li>
  <li>
    <p>Tomamos el enlace de clonación por vía ssh y lo clonamos en nuestra máquina local. Como para este taller hemos clonado el repositorio de prueba de pr, el comando sería:</p>

    <p><img src="/assets/images/github/12.png" alt="12" /></p>
  </li>
  <li>
    <p>Creamos la nueva rama en la que vamos a realizar los cambios (en mi caso la he llamado maria). Una vez en ella, realizamos los cambios de la siguiente manera:</p>

    <p><code>
 nano mjar.md
 git add mjar.md
 nano README.md
 git commit -am "Ficheros modificados" 
 </code></p>

    <p><img src="/assets/images/github/13.png" alt="13" /></p>
  </li>
  <li>
    <p>Actualizamos los cambios.</p>

    <p><code>
 git push origin maria
 </code></p>

    <p><img src="/assets/images/github/14.png" alt="14" /></p>
  </li>
  <li>
    <p>Y por último, nos dirigimos al repositorio original para solicitar el Pull Request a su propietario y esperamos su validación de cambios, como podemos ver <a href="https://github.com/Legnakra/prueba-pr-asir/tree/main">aquí</a>.</p>
  </li>
</ol>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[¿Qué es GitHub? Github es un portal creado para alojar el código de las aplicaciones de cualquier desarrollador, y que fue comprada por Microsoft en junio del 2018. La plataforma está creada para que los desarrolladores suban el código de sus aplicaciones y herramientas, y que como usuario no sólo puedas descargarte la aplicación, sino también entrar a su perfil para leer sobre ella o colaborar con su desarrollo.]]></summary></entry></feed>