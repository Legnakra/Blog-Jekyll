<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-02-12T18:37:44+01:00</updated><id>/feed.xml</id><title type="html">sysmaria</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Implantación de aplicaciones web Python en docker</title><link href="/iaw/2023/02/11/docker-python.html" rel="alternate" type="text/html" title="Implantación de aplicaciones web Python en docker" /><published>2023-02-11T16:45:16+01:00</published><updated>2023-02-11T16:45:16+01:00</updated><id>/iaw/2023/02/11/docker-python</id><content type="html" xml:base="/iaw/2023/02/11/docker-python.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En este post vamos a configurar contenedores de Docker para ejecutar aplicaciones web Python. Para ello, vamos a utilizar una aplicación web Python sencilla que se encuentra en el repositorio de <a href="https://github.com/josedom24/django_tutorial">GitHub</a>.</p>

<h2 id="entorno-de-desarrollo">Entorno de desarrollo</h2>

<p>Vamos a crear un entorno de desarrollo en el que realizaremos las pruebas necesarias para la puesta a punto antes de lanzar nuestra aplicación en producción.</p>

<p>También vamos a crear dos contenedores que estarán conectados a la misma red. Una vez comprobado que la aplicación funciona, pasaremos a crear el docker-compose para pasarlo a producción.</p>

<h3 id="creación-de-la-red">Creación de la red</h3>

<p>Para crear la red, ejecutamos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network create net_django
</code></pre></div></div>

<h3 id="creación-del-contenedor-de-la-base-de-datos">Creación del contenedor de la base de datos</h3>

<p>Ya creada la red en la que van a ir conectados los contenedores, nos ponemos manos a la obra y creamos el contenedor de la base de datos. Para ello, ejecutamos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--name</span> mariadb <span class="nt">-v</span> vol_polls:/var/lib/mysql <span class="nt">--network</span> net_django <span class="nt">-e</span> <span class="nv">MARIADB_ROOT_PASSWORD</span><span class="o">=</span>admin <span class="nt">-e</span> <span class="nv">MARIADB_USER</span><span class="o">=</span>django <span class="nt">-e</span> <span class="nv">MARIADB_PASSWORD</span><span class="o">=</span>admin <span class="nt">-e</span> <span class="nv">MARIADB_DATABASE</span><span class="o">=</span>django mariadb
</code></pre></div></div>

<p>Tendremos que modificar el fichero <code class="language-plaintext highlighter-rouge">settings.py</code> de la aplicación web para que sea capaz de leer las variables de entorno:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>

<span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.mysql'</span><span class="p">,</span>
        <span class="s">'NAME'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"BASE_DATOS"</span><span class="p">),</span>
        <span class="s">'USER'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'USUARIO'</span><span class="p">),</span>
        <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"CONTRA"</span><span class="p">),</span>
        <span class="s">'HOST'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'HOST'</span><span class="p">),</span>
        <span class="s">'PORT'</span><span class="p">:</span> <span class="s">'3306'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ALLOWED_HOSTS</span> <span class="o">=</span> <span class="p">[</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"ALLOWED_HOSTS"</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">STATIC_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'static'</span><span class="p">)</span>
<span class="n">STATIC_URL</span> <span class="o">=</span> <span class="s">'/static/'</span>
<span class="n">CSRF_TRUSTED_ORIGINS</span> <span class="o">=</span> <span class="p">[</span><span class="s">'http://*.mariatec.es'</span><span class="p">,</span><span class="s">'http://*.127.0.0.1'</span><span class="p">,</span><span class="s">'https://*.mariatec.es'</span><span class="p">,</span><span class="s">'https://*.127.0.0.1'</span><span class="p">]</span>
</code></pre></div></div>

<p>La estructura del directorio de la aplicación web es la siguiente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── practica2
│   ├── django_tutorial
│   │   ├── manage.py
│   │   ├── requirements.txt
│   ├── docker-compose.yml
│   ├── Dockerfile
│   ├── polls.sh
</code></pre></div></div>

<p>Creamos el fichero <code class="language-plaintext highlighter-rouge">Dockerfile</code> a partir de la imagen de Python:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">FROM python:3</span>
<span class="s">WORKDIR /usr/src/app</span>
<span class="s">MAINTAINER Maria Jesús Alloza Rodríguez 'mariajesus.allozarodriguez@gmail.com'</span>
<span class="s">RUN apt-get install git &amp;&amp; pip install --root-user-action=ignore --upgrade pip &amp;&amp; pip install --root-user-action=ignore django mysqlclient</span>
<span class="s">RUN git clone https://github.com/Legnakra/django_tutorial.git /usr/src/app &amp;&amp; mkdir static</span>
<span class="s">ADD ./polls.sh /usr/src/app/</span>
<span class="s">RUN chmod +x /usr/src/app/polls.sh</span>
<span class="s">ENV ALLOWED_HOSTS=*</span>
<span class="s">ENV HOST=mariadb</span>
<span class="s">ENV USUARIO=django</span>
<span class="s">ENV CONTRA=django</span>
<span class="s">ENV BASE_DATOS=django</span>
<span class="s">ENV DJANGO_SUPERUSER_PASSWORD=admin</span>
<span class="s">ENV DJANGO_SUPERUSER_USERNAME=admin</span>
<span class="s">ENV DJANGO_SUPERUSER_EMAIL=admin@example.org</span>
<span class="s">ENTRYPOINT ["/usr/src/app/polls.sh"]</span>
</code></pre></div></div>

<p>Una vez terminado de crear el fichero <code class="language-plaintext highlighter-rouge">Dockerfile</code>, creamos el fichero <code class="language-plaintext highlighter-rouge">django_polls.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/sh</span>

python3 manage.py makemigrations
python3 manage.py migrate
python3 manage.py createsuperuser <span class="nt">--noinput</span>
python3 manage.py collectstatic <span class="nt">--noinput</span>
python3 manage.py runserver 0.0.0.0:8006
</code></pre></div></div>

<p>Creamos la imagen de Docker:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> legnakra/django:v1 <span class="nb">.</span>
</code></pre></div></div>

<p><img src="/assets/images/docker/p2/1.png" alt="1" /></p>

<p>Ejecutando <code class="language-plaintext highlighter-rouge">docker run -d --name polls --network django-net -p 8080:8006 legnakra/django:v1</code> podemos ver que la aplicación se ejecuta correctamente.</p>

<p><img src="/assets/images/docker/p2/2.png" alt="2" /></p>

<p>Tras ver como en la imagen anterior, todo funciona correctamente, nos disponemos a crear el docker-compose que levantará los dos contenedores que hemos creado.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi docker-compose.yml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.7'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">django-tutorial</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">django-tutorial</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">legnakra/django:v1</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">ALLOWED_HOSTS</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
      <span class="na">HOST</span><span class="pi">:</span> <span class="s">bd_mariadb_django</span>
      <span class="na">USUARIO</span><span class="pi">:</span> <span class="s">django</span>
      <span class="na">CONTRA</span><span class="pi">:</span> <span class="s">django</span>
      <span class="na">BASE_DATOS</span><span class="pi">:</span> <span class="s">django</span>
      <span class="na">DJANGO_SUPERUSER_PASSWORD</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">DJANGO_SUPERUSER_USERNAME</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">DJANGO_SUPERUSER_EMAIL</span><span class="pi">:</span> <span class="s">admin@admin.org</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8084:8006</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db_django</span>
  <span class="na">db_django</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bd_mariadb_django</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mariadb:latest</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MARIADB_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root</span>
      <span class="na">MARIADB_DATABASE</span><span class="pi">:</span> <span class="s">django</span>
      <span class="na">MARIADB_USER</span><span class="pi">:</span> <span class="s">django</span>
      <span class="na">MARIADB_PASSWORD</span><span class="pi">:</span> <span class="s">django</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mariadb_data_django:/var/lib/mysql</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">net-mariatec</span>
<span class="na">volumes</span><span class="pi">:</span>
    <span class="na">mariadb_data_django</span><span class="pi">:</span>
<span class="na">netwoks</span><span class="pi">:</span>
  <span class="na">net-mariatec</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">net-mariatec</span>
    <span class="na">external</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>Levantamos el escenario de nuestro entorno de desarrollo con <code class="language-plaintext highlighter-rouge">docker-compose up -d</code> y podemos comprobar que todo funciona correctamente.</p>

<p><img src="/assets/images/docker/p2/3.png" alt="3" /></p>

<p><img src="/assets/images/docker/p2/4.png" alt="4" /></p>

<p>Nos dirigimos a la zona de administración con las credenciales que hemos configurado en el fichero <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> y podemos ver que accedemos y podemos crear nuevas encuestas.</p>

<p><img src="/assets/images/docker/p2/5.png" alt="5" /></p>

<h2 id="entorno-de-producción">Entorno de producción</h2>

<p>Ya tenemos la aplicación funcionando en nuestro entorno de desarrollo, por lo que ahora solo queda que nos vayamos al entorno de producción y despleguemos la aplicación.</p>

<p>Para ello, nos vamos a crear un registro en nuestro servidor DNS para que podamos acceder a la aplicación desde el exterior.</p>

<p>⬜️ django.mariatec.es        CNAME    mariatec.es</p>

<p>Generamos el certificado SSL para poder acceder a la aplicación desde el exterior.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>certbot certonly <span class="nt">--standalone</span> <span class="nt">-d</span> django.mariatec.com
</code></pre></div></div>

<p><img src="/assets/images/docker/p2/6.png" alt="6" /></p>

<p>Tras generarlos, creamos el proxy de nginx para poder acceder a la aplicación desde el exterior.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/nginx/sites-available/django.mariatec.es
</code></pre></div></div>

<p>recuerda que debe ser escuchado por elpuerto 8084.</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
        <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>

        <span class="kn">server_name</span> <span class="s">django.mariatec.es</span><span class="p">;</span>

        <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>
        <span class="kn">listen</span> <span class="s">[::]:443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>

        <span class="kn">ssl</span>    <span class="no">on</span><span class="p">;</span>
        <span class="kn">ssl_certificate</span> <span class="n">/etc/letsencrypt/live/django.mariatec.es/fullchain.pem</span><span class="p">;</span>
        <span class="kn">ssl_certificate_key</span> <span class="n">/etc/letsencrypt/live/django.mariatec.es/privkey.pem</span><span class="p">;</span>

        <span class="kn">index</span> <span class="s">index.html</span> <span class="s">index.php</span> <span class="s">index.htm</span> <span class="s">index.nginx-debian.html</span><span class="p">;</span>

        <span class="kn">server_name</span> <span class="s">django.mariatec.es</span><span class="p">;</span>

        <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
                <span class="kn">proxy_pass</span> <span class="s">http://localhost:8084</span><span class="p">;</span>
                <span class="kn">include</span> <span class="s">proxy_params</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Creamos el enlace simbólico para que nginx pueda cargar la configuración y reniciamos el servicio de nginx.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/django /etc/nginx/sites-enabled/django

systemctl restart nginx
</code></pre></div></div>

<p>Si accedemos desde nuestro navegador a la dirección <code class="language-plaintext highlighter-rouge">https://django.mariatec.es</code> podemos ver que accedemos a la aplicación.</p>

<p><img src="/assets/images/docker/p2/7.png" alt="7" /></p>

<p>Y que podemos acceder a la zona de administración.</p>

<p><img src="/assets/images/docker/p2/8.png" alt="8" /></p>

<p><img src="/assets/images/docker/p2/9.png" alt="9" /></p>

<p><img src="/assets/images/docker/p2/10.png" alt="10" /></p>

<p><img src="/assets/images/docker/p2/11.png" alt="11" /></p>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Introducción En este post vamos a configurar contenedores de Docker para ejecutar aplicaciones web Python. Para ello, vamos a utilizar una aplicación web Python sencilla que se encuentra en el repositorio de GitHub. Entorno de desarrollo Vamos a crear un entorno de desarrollo en el que realizaremos las pruebas necesarias para la puesta a punto antes de lanzar nuestra aplicación en producción. También vamos a crear dos contenedores que estarán conectados a la misma red. Una vez comprobado que la aplicación funciona, pasaremos a crear el docker-compose para pasarlo a producción. Creación de la red Para crear la red, ejecutamos el siguiente comando: docker network create net_django Creación del contenedor de la base de datos Ya creada la red en la que van a ir conectados los contenedores, nos ponemos manos a la obra y creamos el contenedor de la base de datos. Para ello, ejecutamos el siguiente comando: docker run -d --name mariadb -v vol_polls:/var/lib/mysql --network net_django -e MARIADB_ROOT_PASSWORD=admin -e MARIADB_USER=django -e MARIADB_PASSWORD=admin -e MARIADB_DATABASE=django mariadb Tendremos que modificar el fichero settings.py de la aplicación web para que sea capaz de leer las variables de entorno: import os BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': os.environ.get("BASE_DATOS"), 'USER': os.environ.get('USUARIO'), 'PASSWORD': os.environ.get("CONTRA"), 'HOST': os.environ.get('HOST'), 'PORT': '3306', } } ALLOWED_HOSTS = [os.environ.get("ALLOWED_HOSTS")] STATIC_ROOT = os.path.join(BASE_DIR, 'static') STATIC_URL = '/static/' CSRF_TRUSTED_ORIGINS = ['http://*.mariatec.es','http://*.127.0.0.1','https://*.mariatec.es','https://*.127.0.0.1'] La estructura del directorio de la aplicación web es la siguiente: ├── practica2 │   ├── django_tutorial │   │   ├── manage.py │   │   ├── requirements.txt │   ├── docker-compose.yml │   ├── Dockerfile │   ├── polls.sh Creamos el fichero Dockerfile a partir de la imagen de Python: FROM python:3 WORKDIR /usr/src/app MAINTAINER Maria Jesús Alloza Rodríguez 'mariajesus.allozarodriguez@gmail.com' RUN apt-get install git &amp;&amp; pip install --root-user-action=ignore --upgrade pip &amp;&amp; pip install --root-user-action=ignore django mysqlclient RUN git clone https://github.com/Legnakra/django_tutorial.git /usr/src/app &amp;&amp; mkdir static ADD ./polls.sh /usr/src/app/ RUN chmod +x /usr/src/app/polls.sh ENV ALLOWED_HOSTS=* ENV HOST=mariadb ENV USUARIO=django ENV CONTRA=django ENV BASE_DATOS=django ENV DJANGO_SUPERUSER_PASSWORD=admin ENV DJANGO_SUPERUSER_USERNAME=admin ENV DJANGO_SUPERUSER_EMAIL=admin@example.org ENTRYPOINT ["/usr/src/app/polls.sh"] Una vez terminado de crear el fichero Dockerfile, creamos el fichero django_polls.sh: #! /bin/sh python3 manage.py makemigrations python3 manage.py migrate python3 manage.py createsuperuser --noinput python3 manage.py collectstatic --noinput python3 manage.py runserver 0.0.0.0:8006 Creamos la imagen de Docker: docker build -t legnakra/django:v1 . Ejecutando docker run -d --name polls --network django-net -p 8080:8006 legnakra/django:v1 podemos ver que la aplicación se ejecuta correctamente. Tras ver como en la imagen anterior, todo funciona correctamente, nos disponemos a crear el docker-compose que levantará los dos contenedores que hemos creado. vi docker-compose.yml version: '3.7' services: django-tutorial: container_name: django-tutorial image: legnakra/django:v1 restart: always environment: ALLOWED_HOSTS: "*" HOST: bd_mariadb_django USUARIO: django CONTRA: django BASE_DATOS: django DJANGO_SUPERUSER_PASSWORD: admin DJANGO_SUPERUSER_USERNAME: admin DJANGO_SUPERUSER_EMAIL: admin@admin.org ports: - 8084:8006 depends_on: - db_django db_django: container_name: bd_mariadb_django image: mariadb:latest restart: always environment: MARIADB_ROOT_PASSWORD: root MARIADB_DATABASE: django MARIADB_USER: django MARIADB_PASSWORD: django volumes: - mariadb_data_django:/var/lib/mysql networks: - net-mariatec volumes: mariadb_data_django: netwoks: net-mariatec: name: net-mariatec external: true Levantamos el escenario de nuestro entorno de desarrollo con docker-compose up -d y podemos comprobar que todo funciona correctamente. Nos dirigimos a la zona de administración con las credenciales que hemos configurado en el fichero docker-compose.yml y podemos ver que accedemos y podemos crear nuevas encuestas. Entorno de producción Ya tenemos la aplicación funcionando en nuestro entorno de desarrollo, por lo que ahora solo queda que nos vayamos al entorno de producción y despleguemos la aplicación. Para ello, nos vamos a crear un registro en nuestro servidor DNS para que podamos acceder a la aplicación desde el exterior. ⬜️ django.mariatec.es CNAME mariatec.es Generamos el certificado SSL para poder acceder a la aplicación desde el exterior. certbot certonly --standalone -d django.mariatec.com Tras generarlos, creamos el proxy de nginx para poder acceder a la aplicación desde el exterior. vi /etc/nginx/sites-available/django.mariatec.es recuerda que debe ser escuchado por elpuerto 8084. server { listen 80; listen [::]:80; server_name django.mariatec.es; return 301 https://$host$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; ssl on; ssl_certificate /etc/letsencrypt/live/django.mariatec.es/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/django.mariatec.es/privkey.pem; index index.html index.php index.htm index.nginx-debian.html; server_name django.mariatec.es; location / { proxy_pass http://localhost:8084; include proxy_params; } } Creamos el enlace simbólico para que nginx pueda cargar la configuración y reniciamos el servicio de nginx. ln -s /etc/nginx/sites-available/django /etc/nginx/sites-enabled/django systemctl restart nginx Si accedemos desde nuestro navegador a la dirección https://django.mariatec.es podemos ver que accedemos a la aplicación. Y que podemos acceder a la zona de administración.]]></summary></entry><entry><title type="html">Implantación de aplicaciones web PHP en docker</title><link href="/iaw/2023/02/09/docker-bookmedik.html" rel="alternate" type="text/html" title="Implantación de aplicaciones web PHP en docker" /><published>2023-02-09T16:45:16+01:00</published><updated>2023-02-09T16:45:16+01:00</updated><id>/iaw/2023/02/09/docker-bookmedik</id><content type="html" xml:base="/iaw/2023/02/09/docker-bookmedik.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En este post vamos a reaizar la implantación de una aplicación web PHP en docker. Vamos a hacer uso de <a href="https://github.com/evilnapsis/bookmedik">Bookmedik</a>. Crearemos una imagen Docker para implementar dicha aplicación.</p>

<h2 id="aspectos-a-tener-en-cuenta">Aspectos a tener en cuenta</h2>

<ul>
  <li>Contenedor mariadb
    <ul>
      <li>Es necesario que nuestra aplicación guarde su información en un contenedor docker mariadb.</li>
      <li>El script para generar la base de datos y los registros lo encuentras en el repositorio y se llama schema.sql. Deberemos crear un usuario con su contraseña en la base de datos. La base de datos se llama bookmedik y se crea al ejecutar el script.</li>
      <li>Ejecuta el contenedor mariadb y carga los datos del script schema.sql. Para más información.</li>
      <li>El contenedor mariadb debe tener un volumen para guardar la base de datos.</li>
    </ul>
  </li>
  <li>Contenedor bookmedik
    <ul>
      <li>Vamos a crear tres versiones de la imagen que nos permite implantar la aplicación PHP.</li>
      <li>La imagen deberá crear las variables de entorno necesarias con datos de conexión por defecto.</li>
      <li>Al crear un contenedor a partir de estas imágenes se ejecutará un script bash que realizará las siguientes tareas:
        <ul>
          <li>Que modifique el fichero <code class="language-plaintext highlighter-rouge">core\controller\Database.php</code> para que lea las variables de entorno. Para obtener las variables de entorno en PHP usar la función getenv. Para más información.</li>
          <li>Que se inicialice la base de datos con el fichero <code class="language-plaintext highlighter-rouge">schema.sql</code>.</li>
          <li>Que ejecute el servidor web.</li>
        </ul>
      </li>
      <li>El contenedor que crearemos debe tener un volumen para guardar los logs del servidor web.</li>
      <li>La imagen la tenemos que crear en tu entorno de desarrollo con el comando docker build.</li>
    </ul>
  </li>
</ul>

<h2 id="preparamos-el-escenario">Preparamos el escenario</h2>

<p>Lo primero que deberemos hacer es cerciorarnos de que tenemos instalado docker en nuestro entorno de desarrollo. Para ello, ejecutamos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nt">--version</span>
</code></pre></div></div>

<p>En caso de no tenerlo, lo instalaremos con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>docker.io docker compose
</code></pre></div></div>

<p>Clonamos el repositorio de la aplicación web:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/evilnapsis/bookmedik.git
</code></pre></div></div>

<h2 id="tarea-1-creación-de-una-imagen-docker-con-una-aplicación-web-desde-una-imagen-base">Tarea 1: Creación de una imagen docker con una aplicación web desde una imagen base</h2>

<p>Llegados a este punto, y teniendo el repositorio forkado a nuestro usuario, vamos a modificar el fichero <code class="language-plaintext highlighter-rouge">schema.sql</code> para que se ejecute al crear el contenedor. Por ello, deberemos eliminar las siguientes líneas:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">bookmedik</span><span class="p">;</span>
<span class="n">USE</span> <span class="n">bookmedik</span><span class="p">;</span>
</code></pre></div></div>

<p>Nos dirigimos al fichero <code class="language-plaintext highlighter-rouge">core/controller/Database.php</code> para que lea las variables de entorno. Para ello, debemos modificar las siguientes líneas:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kd">class</span> <span class="nc">Database</span> <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="nv">$db</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="nv">$con</span><span class="p">;</span>
        <span class="k">function</span> <span class="n">Database</span><span class="p">(){</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span><span class="o">=</span><span class="nb">getenv</span><span class="p">(</span><span class="s1">'USUARIO_BOOKMEDIK'</span><span class="p">);</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pass</span><span class="o">=</span><span class="nb">getenv</span><span class="p">(</span><span class="s1">'CONTRA_BOOKMEDIK'</span><span class="p">);</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">host</span><span class="o">=</span><span class="nb">getenv</span><span class="p">(</span><span class="s1">'DATABASE_HOST'</span><span class="p">);</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">ddbb</span><span class="o">=</span><span class="nb">getenv</span><span class="p">(</span><span class="s1">'NOMBRE_DB'</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">function</span> <span class="n">connect</span><span class="p">(){</span>
                <span class="nv">$con</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">mysqli</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pass</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">ddbb</span><span class="p">);</span>
                <span class="nv">$con</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s2">"set sql_mode=''"</span><span class="p">);</span>
                <span class="k">return</span> <span class="nv">$con</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">getCon</span><span class="p">(){</span>
                <span class="k">if</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="nv">$con</span><span class="o">==</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="k">self</span><span class="o">::</span><span class="nv">$db</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span>
                        <span class="k">self</span><span class="o">::</span><span class="nv">$db</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Database</span><span class="p">();</span>
                        <span class="k">self</span><span class="o">::</span><span class="nv">$con</span> <span class="o">=</span> <span class="k">self</span><span class="o">::</span><span class="nv">$db</span><span class="o">-&gt;</span><span class="nf">connect</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="k">self</span><span class="o">::</span><span class="nv">$con</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Ya teniendo todo esto realizado, vamos a crear el fichero <code class="language-plaintext highlighter-rouge">Dockerfile</code> para crear la imagen docker. Para ello, debemos crear un fichero llamado <code class="language-plaintext highlighter-rouge">Dockerfile</code> en la raíz del proyecto y añadir el siguiente contenido:</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> debian:bullseye</span>
<span class="k">MAINTAINER</span><span class="s"> María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com"</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>apache2 libapache2-mod-php php php-mysql mariadb-client <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get clean <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>
<span class="k">COPY</span><span class="s"> bookmedik /var/www/html/</span>
<span class="k">ADD</span><span class="s"> script.sh /opt/</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /opt/script.sh <span class="o">&amp;&amp;</span> <span class="nb">rm</span> /var/www/html/index.html
<span class="k">ENTRYPOINT</span><span class="s"> ["/opt/script.sh"]</span>
</code></pre></div></div>

<p>Y el fichero <code class="language-plaintext highlighter-rouge">script.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/sh</span>

mysql <span class="nt">-u</span> <span class="nv">$USUARIO_BOOKMEDIK</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$CONTRA_BOOKMEDIK</span> <span class="nt">-h</span> <span class="nv">$DATABASE_HOST</span> <span class="nv">$NOMBRE_DB</span> &lt; /var/www/html/schema.sql

/usr/sbin/apache2ctl <span class="nt">-D</span> FOREGROUND
</code></pre></div></div>

<p>El script que hemos creado, tendrá como destino el directorio raíz del repositorio, para añadirlo al contenedor. Y ya podríamos crear la imagen del contenedor con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> legnakra/bookmedik:v1 <span class="nb">.</span>
</code></pre></div></div>

<p>Si ejecutamos <code class="language-plaintext highlighter-rouge">docker images</code>, podremos ver que la imagen se ha creado correctamente:</p>

<h2 id="tarea-2-despliegue-en-el-entorno-de-desarrollo">Tarea 2: Despliegue en el entorno de desarrollo</h2>

<p>En esta tarea, crearemos un scritp con docker-compose que levantará el escenario con los contenedores. Debemos tener en cuenta que para acceder a la aplicación, las credenciales serán: <code class="language-plaintext highlighter-rouge">Usuario: admin // contraseña: admin.</code></p>

<p>Por ello, creamos el fichero <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> para levantar ambos contenedores:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">bookmedik</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bookmedik-app</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">legnakra/bookmedik:v1</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">USUARIO_BOOKMEDIK</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">CONTRA_BOOKMEDIK</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">DATABASE_HOST</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
      <span class="na">NOMBRE_DB</span><span class="pi">:</span> <span class="s">bookmedik</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8081:80</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mariadb</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MARIADB_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root</span>
      <span class="na">MARIADB_DATABASE</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">MARIADB_USER</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">MARIADB_PASSWORD</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mariadb_data:/var/lib/mysql</span>
<span class="na">volumes</span><span class="pi">:</span>
    <span class="na">mariadb_data</span><span class="pi">:</span>
</code></pre></div></div>

<p>Levantamos el escenario con <code class="language-plaintext highlighter-rouge">docker compose up -d</code>y con <code class="language-plaintext highlighter-rouge">docker ps</code> podemos ver que los contenedores se han levantado correctamente:</p>

<p><img src="/assets/images/docker/p1/1.png" alt="1" /></p>

<p>Si accedemos a la aplicación, podremos ver que funciona correctamente:</p>

<p><img src="/assets/images/docker/p1/2.png" alt="2" /></p>

<h2 id="tarea-3-creación-de-una-imagen-docker-con-una-aplicación-web-desde-una-imagen-php">Tarea 3: Creación de una imagen docker con una aplicación web desde una imagen PHP</h2>

<p>Ahora le toca el turno a la imagen de PHP. Para ello, crearemos un fichero llamado <code class="language-plaintext highlighter-rouge">Dockerfile</code> en la raíz del proyecto y añadiremos el siguiente contenido:</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> php:7.4-apache-bullseye</span>
<span class="k">MAINTAINER</span><span class="s"> María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com"</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade <span class="nt">-y</span> <span class="o">&amp;&amp;</span> docker-php-ext-install mysqli pdo pdo_mysql <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>mariadb-client <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get clean <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>
<span class="k">ADD</span><span class="s"> bookmedik /var/www/html/</span>
<span class="k">ADD</span><span class="s"> script.sh /opt/</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /opt/script.sh
<span class="k">ENTRYPOINT</span><span class="s"> ["/opt/script.sh"]</span>
</code></pre></div></div>

<p>Y creamos una nueva imagen:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> legnakra/bookmedik:v2 <span class="nb">.</span>
</code></pre></div></div>

<p>EL fichero <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> quedaría de la siguiente forma:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">bookmedik</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bookmedik-app</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">legnakra/bookmedik:v2</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">USUARIO_BOOKMEDIK</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">CONTRA_BOOKMEDIK</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">DATABASE_HOST</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
      <span class="na">NOMBRE_DB</span><span class="pi">:</span> <span class="s">bookmedik</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8081:80</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mariadb:latest</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MARIADB_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root</span>
      <span class="na">MARIADB_DATABASE</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">MARIADB_USER</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">MARIADB_PASSWORD</span><span class="pi">:</span> <span class="s">bookmedik</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mariadb_data:/var/lib/mysql</span>
<span class="na">volumes</span><span class="pi">:</span>
    <span class="na">mariadb_data</span><span class="pi">:</span>
</code></pre></div></div>

<p>Realizamos el despliegue con <code class="language-plaintext highlighter-rouge">docker-compose up -d</code> y como vemos en la imagen anterior, ambos contenedores se están ejecutando y en la siguiente, comprobamos que la imagen se ha creado correctamente:</p>

<p><img src="/assets/images/docker/p1/3.png" alt="3" /></p>

<p>Si accedemos a la aplicación, podremos ver que funciona correctamente:</p>

<p><img src="/assets/images/docker/p1/4.png" alt="4" /></p>

<p><img src="/assets/images/docker/p1/5.png" alt="5" /></p>

<h2 id="tarea-4-ejecución-de-una-aplicación-php-en-docker-con-nginx">Tarea 4: Ejecución de una aplicación PHP en docker con nginx</h2>

<p>En esta tarea, vamos a tener que crear dos imágenes:</p>
<ul>
  <li>Una que contrendrá la aplicación PHP y será nginx la encargada de servirla.</li>
  <li>Otra que tendrá los modulos de PHP necesarios para que la aplicación funcione.</li>
</ul>

<p>Creamos el <code class="language-plaintext highlighter-rouge">Dockerfile</code> con php-fpm y sus correspondientes modulos:</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> php:7.4-fpm</span>
<span class="k">MAINTAINER</span><span class="s"> María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com"</span>
<span class="k">RUN </span>docker-php-ext-install mysqli
</code></pre></div></div>

<p>Creamos la imagen:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> legnakra/php-fpm-mysql:v1 <span class="nb">.</span>
</code></pre></div></div>

<p><img src="/assets/images/docker/p1/6.png" alt="6" /></p>

<p>Para crear el dockerfile con la aplicación y nginx como servidor web, añadimos el siguiente contenido:</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> nginx</span>
<span class="k">MAINTAINER</span><span class="s"> María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com"</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>mariadb-client <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get clean <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>
<span class="k">ADD</span><span class="s"> default.conf /etc/nginx/conf.d/</span>
<span class="k">ADD</span><span class="s"> bookmedik /usr/share/nginx/html</span>
<span class="k">ADD</span><span class="s"> script.sh /opt/</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /opt/script.sh <span class="o">&amp;&amp;</span> <span class="nb">rm</span> /usr/share/nginx/html/index.html
<span class="k">ENTRYPOINT</span><span class="s"> ["/opt/script.sh"]</span>
</code></pre></div></div>

<p>En el docker file anterior, hemos establecido el fichero <code class="language-plaintext highlighter-rouge">default.conf</code> como el fichero de configuración de nginx. Este fichero contendrá la siguiente información:</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">nano</span> <span class="s">default.conf</span>

<span class="s">server</span> <span class="p">{</span>
    <span class="kn">listen</span>       <span class="mi">80</span><span class="p">;</span>
    <span class="kn">listen</span>  <span class="s">[::]:80</span><span class="p">;</span>
    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>
    <span class="kn">error_log</span>  <span class="n">/var/log/nginx/error.log</span><span class="p">;</span>
    <span class="kn">access_log</span> <span class="n">/var/log/nginx/access.log</span><span class="p">;</span>
    <span class="kn">root</span>   <span class="n">/usr/share/nginx/html</span><span class="p">;</span>
    <span class="kn">index</span>  <span class="s">index.php</span> <span class="s">index.html</span><span class="p">;</span>

    <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php$</span> <span class="p">{</span>
        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
        <span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+</span><span class="err">\</span><span class="s">.php)(/.+)</span>$<span class="p">;</span>
        <span class="kn">fastcgi_pass</span> <span class="s">book_php:9000</span><span class="p">;</span>
        <span class="kn">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
        <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
        <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
        <span class="kn">fastcgi_param</span> <span class="s">PATH_INFO</span> <span class="nv">$fastcgi_path_info</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Y también deberemos modificar <code class="language-plaintext highlighter-rouge">script.sh</code> para adaptarlo a nginx:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/sh</span>

<span class="nb">sleep </span>10

mysql <span class="nt">-u</span> <span class="nv">$USUARIO_BOOKMEDIK</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$CONTRA_BOOKMEDIK</span> <span class="nt">-h</span> <span class="nv">$DATABASE_HOST</span> <span class="nv">$NOMBRE_DB</span> &lt; /usr/share/nginx/html/schema.sql

nginx <span class="nt">-g</span> <span class="s2">"daemon off;"</span>
</code></pre></div></div>

<p>Creamos la imagen:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> legnakra/bookmedik:v3 <span class="nb">.</span>
</code></pre></div></div>

<p><img src="/assets/images/docker/p1/7.png" alt="7" /></p>

<p>Antes de modificar el <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> debemos tener en cuenta que:</p>
<ul>
  <li>Los contenedores que tienen php-fpm y nginx, deben estar en la misma ruta.</li>
  <li>Las variables de entorno que se pasan al contenedor de nginx, deben también estar en el contenedor de php-fpm.</li>
</ul>

<p>Por lo que el fichero <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> quedaría de la siguiente forma:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">bookmedik</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bookmedik-app</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">legnakra/bookmedik:v3</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">USUARIO_BOOKMEDIK</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">CONTRA_BOOKMEDIK</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">DATABASE_HOST</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
      <span class="na">NOMBRE_DB</span><span class="pi">:</span> <span class="s">bookmedik</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8082:80</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
      <span class="pi">-</span> <span class="s">php</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">phpdocs:/usr/share/nginx/html/</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mariadb</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MARIADB_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root</span>
      <span class="na">MARIADB_DATABASE</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">MARIADB_USER</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">MARIADB_PASSWORD</span><span class="pi">:</span> <span class="s">bookmedik</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mariadb_data:/var/lib/mysql</span>
  <span class="na">php</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">book_php</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">legnakra/php-fpm-mysql:v1</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">USUARIO_BOOKMEDIK</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">CONTRA_BOOKMEDIK</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">DATABASE_HOST</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
      <span class="na">NOMBRE_DB</span><span class="pi">:</span> <span class="s">bookmedik</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">phpdocs:/usr/share/nginx/html/</span> 

<span class="na">volumes</span><span class="pi">:</span>
    <span class="na">mariadb_data</span><span class="pi">:</span>
    <span class="na">phpdocs</span><span class="pi">:</span>
</code></pre></div></div>

<p>Tras todos los pasos anteriores, podemos cerciorarnos en la imagen anterior, que las imágenes que hemos confeccionado se han creado correctamente.</p>

<p>Ahora, ejecutamos el <code class="language-plaintext highlighter-rouge">docker compose.yaml</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div>

<p><img src="/assets/images/docker/p1/8.png" alt="8" /></p>

<p>Y comprobamos que todo funciona como esperábamos:</p>

<p><img src="/assets/images/docker/p1/9.png" alt="9" /></p>

<p>Si accedemos a la aplicación, podremos ver que funciona correctamente:</p>

<p><img src="/assets/images/docker/p1/10.png" alt="10" /></p>

<p><img src="/assets/images/docker/p1/11.png" alt="11" /></p>

<h2 id="tarea-5-puesta-en-producción-de-nuestra-aplicación">Tarea 5: Puesta en producción de nuestra aplicación</h2>

<p>Vamos a poner en producción la aplicación a través de nuestro VPS, por lo que lo primero que deberemo de hacer es crear un registro CNAME en nuestro DNS para que apunte a la IP de nuestro VPS.</p>

<p>⬜️ bookmedik.mariatec.es     CNAME       mariatec.es</p>

<p>Y le generamos un certificado de <code class="language-plaintext highlighter-rouge">Let's Encrypt</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>certbot certonly <span class="nt">--standalone</span> <span class="nt">-d</span> bookmedik.mariatec.es
</code></pre></div></div>

<p>Instalamos docker y docker-compose en nuestro VPS:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt upgrade <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt <span class="nb">install </span>docker.io docker-compose-plugin <span class="nt">-y</span>
</code></pre></div></div>

<p>Al tener las imágenes creadas subidas a Docker Hub, podemos descargarlas en nuestro VPS:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull legnakra/bookmedik:v2
</code></pre></div></div>

<p>En mi caso he elegido la versión 2, ya que es la que tiene el fichero <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> adaptado para el VPS.</p>

<p>Creamos el virtualhost en nginx para que actúe de proxy inverso:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/nginx/sites-available/bookmedik.mariatec.es
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
        listen 80<span class="p">;</span>
        listen <span class="o">[</span>::]:80<span class="p">;</span>

        server_name bookmedik.mariatec.es<span class="p">;</span>

        <span class="k">return </span>301 https://<span class="nv">$host$request_uri</span><span class="p">;</span>
<span class="o">}</span>

server <span class="o">{</span>
        listen 443 ssl http2<span class="p">;</span>
        listen <span class="o">[</span>::]:443 ssl http2<span class="p">;</span>

        ssl    on<span class="p">;</span>
        ssl_certificate /etc/letsencrypt/live/bookmedik.mariatec.es/fullchain.pem<span class="p">;</span>
        ssl_certificate_key     /etc/letsencrypt/live/bookmedik.mariatec.es/privkey.pem<span class="p">;</span>

        index index.html index.php index.htm index.nginx-debian.html<span class="p">;</span>

        server_name bookmedik.mariatec.es<span class="p">;</span>

        location / <span class="o">{</span>
                proxy_pass http://localhost:8083<span class="p">;</span>
                include proxy_params<span class="p">;</span>
        <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Creamos el enlace simbólico y reiniciamos nginx:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/bookmedik /etc/nginx/sites-enabled/
systemctl restart nginx
</code></pre></div></div>

<p>En mi caso, he subido los ficheros a github, por lo que he clonado <a href="https://github.com/Legnakra/Docker-Bookmedik/tree/main/Tarea%204">el repositorio</a> y el repositorio de <a href="https://github.com/evilnapsis/bookmedik">Bookmedik</a> en mi VPS, dejando la estructura de carpetas de la siguiente forma:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── Bookmedik
│   ├── docker-compose.yaml
│   ├── Dockerfile
│   ├── scripts
│   ├── bookmedik
│   │   ├── PhpWord
│   │   ├── core
│   │   ├── assets
│   │   ├── report
│   │   ├── index.php
│   │   ├── instalation.txt
│   │   ├── schema.sql
│   │   ├── logout.php
│   │   ├── README.md
</code></pre></div></div>

<p>Realizamos la ejecución del comando <code class="language-plaintext highlighter-rouge">docker-compose up -d</code> y comprobamos que todo funciona correctamente:</p>

<p><img src="/assets/images/docker/p1/12.png" alt="12" /></p>

<p>Y como podemos comprobar en la siguiente imagen, la aplicación funciona correctamente.</p>

<p><img src="/assets/images/docker/p1/13.png" alt="13" /></p>

<p><strong>NOTA</strong>: A la hora de hacer el despliegue, debemos cerciorarnos de cambiar el puerto de escucha, dado que puede caber la posibilidad (o que sea muy probable) de que el puerto 8080 esté ocupado. En mi caso, he puesto el puerto de escucha en el 8083 debido a que ya tengo aplicaciones desplegadas en mi VPS.</p>

<p><img src="/assets/images/docker/p1/14.png" alt="14" /></p>

<h2 id="tarea-6-modificación-de-la-aplicación">Tarea 6: Modificación de la aplicación</h2>

<p>Vamos a modificar la aplicación para que nos muestre nuestro nombre en la línea <code class="language-plaintext highlighter-rouge">&lt;h4 class="title"&gt;Acceder a BookMedik&lt;/h4&gt;</code>.</p>

<p>Para ello, vamos a utilizar la imagen de <code class="language-plaintext highlighter-rouge">legnakra/bookmedik:v1</code> que ya tiene el fichero <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> para generar la nueva imagen.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano <span class="sb">`</span>core/app/view/login-view.php<span class="sb">`</span>
<span class="nt">---</span>
&lt;h4 <span class="nv">class</span><span class="o">=</span><span class="s2">"title"</span><span class="o">&gt;</span>María Jesús Alloza Rodríguez&lt;/h4&gt;
</code></pre></div></div>

<p><img src="/assets/images/docker/p1/15.png" alt="15" /></p>

<p>Creamos la nueva imagen</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> legnakra/bookmedik:v1_2 <span class="nb">.</span>
</code></pre></div></div>
<p><img src="/assets/images/docker/p1/16.png" alt="16" /></p>

<p>La resubimos a DockerHub:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker push legnakra/bookmedik:v1_2
</code></pre></div></div>

<p>Eliminamos los contenedores que están en ejecución, modificamos el fichero <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> para que descargue la nueva imagen y ejecutamos el <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose down
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano docker-compose.yaml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">bookmedik</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bookmedik-app</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">legnakra/bookmedik:v1_2</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">USUARIO_BOOKMEDIK</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">CONTRA_BOOKMEDIK</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">DATABASE_HOST</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
      <span class="na">NOMBRE_DB</span><span class="pi">:</span> <span class="s">bookmedik</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8081:80</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bd_mariadb</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mariadb</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MARIADB_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root</span>
      <span class="na">MARIADB_DATABASE</span><span class="pi">:</span> <span class="s">bookmedik</span>
      <span class="na">MARIADB_USER</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">MARIADB_PASSWORD</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mariadb_data:/var/lib/mysql</span>
<span class="na">volumes</span><span class="pi">:</span>
    <span class="na">mariadb_data</span><span class="pi">:</span>
</code></pre></div></div>

<p><img src="/assets/images/docker/p1/17.png" alt="17" /></p>

<p>Y con esto daríamos terminado como desplegar una aplicación PHP en un VPS con contenedores Docker.</p>

<h2 id="conclusiones">Conclusiones</h2>

<p>Docker es una herramienta muy útil para el despliegue de aplicaciones, ya que nos permite crear contenedores que contienen todo lo necesario para que la aplicación funcione correctamente. Además, nos permite crear imágenes que podemos subir a Docker Hub para que otras personas puedan descargarlas y utilizarlas.</p>

<h2 id="bibliografía">Bibliografía</h2>

<p><a href="https://www.docker.com/">https://www.docker.com/</a></p>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-es">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-es</a></p>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Introducción En este post vamos a reaizar la implantación de una aplicación web PHP en docker. Vamos a hacer uso de Bookmedik. Crearemos una imagen Docker para implementar dicha aplicación. Aspectos a tener en cuenta Contenedor mariadb Es necesario que nuestra aplicación guarde su información en un contenedor docker mariadb. El script para generar la base de datos y los registros lo encuentras en el repositorio y se llama schema.sql. Deberemos crear un usuario con su contraseña en la base de datos. La base de datos se llama bookmedik y se crea al ejecutar el script. Ejecuta el contenedor mariadb y carga los datos del script schema.sql. Para más información. El contenedor mariadb debe tener un volumen para guardar la base de datos. Contenedor bookmedik Vamos a crear tres versiones de la imagen que nos permite implantar la aplicación PHP. La imagen deberá crear las variables de entorno necesarias con datos de conexión por defecto. Al crear un contenedor a partir de estas imágenes se ejecutará un script bash que realizará las siguientes tareas: Que modifique el fichero core\controller\Database.php para que lea las variables de entorno. Para obtener las variables de entorno en PHP usar la función getenv. Para más información. Que se inicialice la base de datos con el fichero schema.sql. Que ejecute el servidor web. El contenedor que crearemos debe tener un volumen para guardar los logs del servidor web. La imagen la tenemos que crear en tu entorno de desarrollo con el comando docker build. Preparamos el escenario Lo primero que deberemos hacer es cerciorarnos de que tenemos instalado docker en nuestro entorno de desarrollo. Para ello, ejecutamos el siguiente comando: $ docker --version En caso de no tenerlo, lo instalaremos con el siguiente comando: sudo apt install docker.io docker compose Clonamos el repositorio de la aplicación web: git clone https://github.com/evilnapsis/bookmedik.git Tarea 1: Creación de una imagen docker con una aplicación web desde una imagen base Llegados a este punto, y teniendo el repositorio forkado a nuestro usuario, vamos a modificar el fichero schema.sql para que se ejecute al crear el contenedor. Por ello, deberemos eliminar las siguientes líneas: CREATE DATABASE bookmedik; USE bookmedik; Nos dirigimos al fichero core/controller/Database.php para que lea las variables de entorno. Para ello, debemos modificar las siguientes líneas: &lt;?php class Database { public static $db; public static $con; function Database(){ $this-&gt;user=getenv('USUARIO_BOOKMEDIK');$this-&gt;pass=getenv('CONTRA_BOOKMEDIK');$this-&gt;host=getenv('DATABASE_HOST');$this-&gt;ddbb=getenv('NOMBRE_DB'); } function connect(){ $con = new mysqli($this-&gt;host,$this-&gt;user,$this-&gt;pass,$this-&gt;ddbb); $con-&gt;query("set sql_mode=''"); return $con; } public static function getCon(){ if(self::$con==null &amp;&amp; self::$db==null){ self::$db = new Database(); self::$con = self::$db-&gt;connect(); } return self::$con; } } ?&gt; Ya teniendo todo esto realizado, vamos a crear el fichero Dockerfile para crear la imagen docker. Para ello, debemos crear un fichero llamado Dockerfile en la raíz del proyecto y añadir el siguiente contenido: FROM debian:bullseye MAINTAINER María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com" RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install apache2 libapache2-mod-php php php-mysql mariadb-client -y &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* COPY bookmedik /var/www/html/ ADD script.sh /opt/ RUN chmod +x /opt/script.sh &amp;&amp; rm /var/www/html/index.html ENTRYPOINT ["/opt/script.sh"] Y el fichero script.sh: #! /bin/sh mysql -u $USUARIO_BOOKMEDIK --password=$CONTRA_BOOKMEDIK -h $DATABASE_HOST $NOMBRE_DB &lt; /var/www/html/schema.sql /usr/sbin/apache2ctl -D FOREGROUND El script que hemos creado, tendrá como destino el directorio raíz del repositorio, para añadirlo al contenedor. Y ya podríamos crear la imagen del contenedor con el siguiente comando: docker build -t legnakra/bookmedik:v1 . Si ejecutamos docker images, podremos ver que la imagen se ha creado correctamente: Tarea 2: Despliegue en el entorno de desarrollo En esta tarea, crearemos un scritp con docker-compose que levantará el escenario con los contenedores. Debemos tener en cuenta que para acceder a la aplicación, las credenciales serán: Usuario: admin // contraseña: admin. Por ello, creamos el fichero docker-compose.yaml para levantar ambos contenedores: version: '3.8' services: bookmedik: container_name: bookmedik-app image: legnakra/bookmedik:v1 restart: always environment: USUARIO_BOOKMEDIK: admin CONTRA_BOOKMEDIK: admin DATABASE_HOST: bd_mariadb NOMBRE_DB: bookmedik ports: - 8081:80 depends_on: - db db: container_name: bd_mariadb image: mariadb restart: always environment: MARIADB_ROOT_PASSWORD: root MARIADB_DATABASE: bookmedik MARIADB_USER: admin MARIADB_PASSWORD: admin volumes: - mariadb_data:/var/lib/mysql volumes: mariadb_data: Levantamos el escenario con docker compose up -dy con docker ps podemos ver que los contenedores se han levantado correctamente: Si accedemos a la aplicación, podremos ver que funciona correctamente: Tarea 3: Creación de una imagen docker con una aplicación web desde una imagen PHP Ahora le toca el turno a la imagen de PHP. Para ello, crearemos un fichero llamado Dockerfile en la raíz del proyecto y añadiremos el siguiente contenido: FROM php:7.4-apache-bullseye MAINTAINER María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com" RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; docker-php-ext-install mysqli pdo pdo_mysql &amp;&amp; apt-get install mariadb-client -y &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* ADD bookmedik /var/www/html/ ADD script.sh /opt/ RUN chmod +x /opt/script.sh ENTRYPOINT ["/opt/script.sh"] Y creamos una nueva imagen: docker build -t legnakra/bookmedik:v2 . EL fichero docker-compose.yaml quedaría de la siguiente forma: version: '3.8' services: bookmedik: container_name: bookmedik-app image: legnakra/bookmedik:v2 restart: always environment: USUARIO_BOOKMEDIK: bookmedik CONTRA_BOOKMEDIK: bookmedik DATABASE_HOST: bd_mariadb NOMBRE_DB: bookmedik ports: - 8081:80 depends_on: - db db: container_name: bd_mariadb image: mariadb:latest restart: always environment: MARIADB_ROOT_PASSWORD: root MARIADB_DATABASE: bookmedik MARIADB_USER: bookmedik MARIADB_PASSWORD: bookmedik volumes: - mariadb_data:/var/lib/mysql volumes: mariadb_data: Realizamos el despliegue con docker-compose up -d y como vemos en la imagen anterior, ambos contenedores se están ejecutando y en la siguiente, comprobamos que la imagen se ha creado correctamente: Si accedemos a la aplicación, podremos ver que funciona correctamente: Tarea 4: Ejecución de una aplicación PHP en docker con nginx En esta tarea, vamos a tener que crear dos imágenes: Una que contrendrá la aplicación PHP y será nginx la encargada de servirla. Otra que tendrá los modulos de PHP necesarios para que la aplicación funcione. Creamos el Dockerfile con php-fpm y sus correspondientes modulos: FROM php:7.4-fpm MAINTAINER María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com" RUN docker-php-ext-install mysqli Creamos la imagen: docker build -t legnakra/php-fpm-mysql:v1 . Para crear el dockerfile con la aplicación y nginx como servidor web, añadimos el siguiente contenido: FROM nginx MAINTAINER María Jesús Alloza Rodríguez "mariajesus.allozarodriguez@gmail.com" RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install mariadb-client -y &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* ADD default.conf /etc/nginx/conf.d/ ADD bookmedik /usr/share/nginx/html ADD script.sh /opt/ RUN chmod +x /opt/script.sh &amp;&amp; rm /usr/share/nginx/html/index.html ENTRYPOINT ["/opt/script.sh"] En el docker file anterior, hemos establecido el fichero default.conf como el fichero de configuración de nginx. Este fichero contendrá la siguiente información: nano default.conf server { listen 80; listen [::]:80; server_name localhost; error_log /var/log/nginx/error.log; access_log /var/log/nginx/access.log; root /usr/share/nginx/html; index index.php index.html; location ~ \.php$ { try_files $uri =404; fastcgi_split_path_info ^(.+\.php)(/.+)$; fastcgi_pass book_php:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; } } Y también deberemos modificar script.sh para adaptarlo a nginx: #! /bin/sh sleep 10 mysql -u $USUARIO_BOOKMEDIK --password=$CONTRA_BOOKMEDIK -h $DATABASE_HOST $NOMBRE_DB &lt; /usr/share/nginx/html/schema.sql nginx -g "daemon off;" Creamos la imagen: docker build -t legnakra/bookmedik:v3 . Antes de modificar el docker-compose.yaml debemos tener en cuenta que: Los contenedores que tienen php-fpm y nginx, deben estar en la misma ruta. Las variables de entorno que se pasan al contenedor de nginx, deben también estar en el contenedor de php-fpm. Por lo que el fichero docker-compose.yaml quedaría de la siguiente forma: version: '3.8' services: bookmedik: container_name: bookmedik-app image: legnakra/bookmedik:v3 restart: always environment: USUARIO_BOOKMEDIK: bookmedik CONTRA_BOOKMEDIK: bookmedik DATABASE_HOST: bd_mariadb NOMBRE_DB: bookmedik ports: - 8082:80 depends_on: - db - php volumes: - phpdocs:/usr/share/nginx/html/ db: container_name: bd_mariadb image: mariadb restart: always environment: MARIADB_ROOT_PASSWORD: root MARIADB_DATABASE: bookmedik MARIADB_USER: bookmedik MARIADB_PASSWORD: bookmedik volumes: - mariadb_data:/var/lib/mysql php: container_name: book_php image: legnakra/php-fpm-mysql:v1 restart: always environment: USUARIO_BOOKMEDIK: bookmedik CONTRA_BOOKMEDIK: bookmedik DATABASE_HOST: bd_mariadb NOMBRE_DB: bookmedik volumes: - phpdocs:/usr/share/nginx/html/ volumes: mariadb_data: phpdocs: Tras todos los pasos anteriores, podemos cerciorarnos en la imagen anterior, que las imágenes que hemos confeccionado se han creado correctamente. Ahora, ejecutamos el docker compose.yaml: docker-compose up -d Y comprobamos que todo funciona como esperábamos: Si accedemos a la aplicación, podremos ver que funciona correctamente: Tarea 5: Puesta en producción de nuestra aplicación Vamos a poner en producción la aplicación a través de nuestro VPS, por lo que lo primero que deberemo de hacer es crear un registro CNAME en nuestro DNS para que apunte a la IP de nuestro VPS. ⬜️ bookmedik.mariatec.es CNAME mariatec.es Y le generamos un certificado de Let's Encrypt: certbot certonly --standalone -d bookmedik.mariatec.es Instalamos docker y docker-compose en nuestro VPS: sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt install docker.io docker-compose-plugin -y Al tener las imágenes creadas subidas a Docker Hub, podemos descargarlas en nuestro VPS: docker pull legnakra/bookmedik:v2 En mi caso he elegido la versión 2, ya que es la que tiene el fichero docker-compose.yaml adaptado para el VPS. Creamos el virtualhost en nginx para que actúe de proxy inverso: nano /etc/nginx/sites-available/bookmedik.mariatec.es server { listen 80; listen [::]:80; server_name bookmedik.mariatec.es; return 301 https://$host$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; ssl on; ssl_certificate /etc/letsencrypt/live/bookmedik.mariatec.es/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bookmedik.mariatec.es/privkey.pem; index index.html index.php index.htm index.nginx-debian.html; server_name bookmedik.mariatec.es; location / { proxy_pass http://localhost:8083; include proxy_params; } } Creamos el enlace simbólico y reiniciamos nginx: ln -s /etc/nginx/sites-available/bookmedik /etc/nginx/sites-enabled/ systemctl restart nginx En mi caso, he subido los ficheros a github, por lo que he clonado el repositorio y el repositorio de Bookmedik en mi VPS, dejando la estructura de carpetas de la siguiente forma: ├── Bookmedik │   ├── docker-compose.yaml │   ├── Dockerfile │   ├── scripts │   ├── bookmedik │   │   ├── PhpWord │   │   ├── core │   │   ├── assets │   │   ├── report │   │   ├── index.php │   │   ├── instalation.txt │   │   ├── schema.sql │   │   ├── logout.php │   │   ├── README.md Realizamos la ejecución del comando docker-compose up -d y comprobamos que todo funciona correctamente: Y como podemos comprobar en la siguiente imagen, la aplicación funciona correctamente. NOTA: A la hora de hacer el despliegue, debemos cerciorarnos de cambiar el puerto de escucha, dado que puede caber la posibilidad (o que sea muy probable) de que el puerto 8080 esté ocupado. En mi caso, he puesto el puerto de escucha en el 8083 debido a que ya tengo aplicaciones desplegadas en mi VPS. Tarea 6: Modificación de la aplicación Vamos a modificar la aplicación para que nos muestre nuestro nombre en la línea &lt;h4 class="title"&gt;Acceder a BookMedik&lt;/h4&gt;. Para ello, vamos a utilizar la imagen de legnakra/bookmedik:v1 que ya tiene el fichero docker-compose.yaml para generar la nueva imagen. nano `core/app/view/login-view.php` --- &lt;h4 class="title"&gt;María Jesús Alloza Rodríguez&lt;/h4&gt; Creamos la nueva imagen docker build -t legnakra/bookmedik:v1_2 . La resubimos a DockerHub: docker push legnakra/bookmedik:v1_2 Eliminamos los contenedores que están en ejecución, modificamos el fichero docker-compose.yaml para que descargue la nueva imagen y ejecutamos el docker-compose.yaml: docker compose down nano docker-compose.yaml version: '3.8' services: bookmedik: container_name: bookmedik-app image: legnakra/bookmedik:v1_2 restart: always environment: USUARIO_BOOKMEDIK: admin CONTRA_BOOKMEDIK: admin DATABASE_HOST: bd_mariadb NOMBRE_DB: bookmedik ports: - 8081:80 depends_on: - db db: container_name: bd_mariadb image: mariadb restart: always environment: MARIADB_ROOT_PASSWORD: root MARIADB_DATABASE: bookmedik MARIADB_USER: admin MARIADB_PASSWORD: admin volumes: - mariadb_data:/var/lib/mysql volumes: mariadb_data: Y con esto daríamos terminado como desplegar una aplicación PHP en un VPS con contenedores Docker. Conclusiones Docker es una herramienta muy útil para el despliegue de aplicaciones, ya que nos permite crear contenedores que contienen todo lo necesario para que la aplicación funcione correctamente. Además, nos permite crear imágenes que podemos subir a Docker Hub para que otras personas puedan descargarlas y utilizarlas. Bibliografía https://www.docker.com/ https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-es]]></summary></entry><entry><title type="html">Escenario - Configuración de LDAP en Alfa</title><link href="/aso/2023/02/07/ldap2.html" rel="alternate" type="text/html" title="Escenario - Configuración de LDAP en Alfa" /><published>2023-02-07T16:45:16+01:00</published><updated>2023-02-07T16:45:16+01:00</updated><id>/aso/2023/02/07/ldap2</id><content type="html" xml:base="/aso/2023/02/07/ldap2.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En nuestro <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a> vamos a realizar la instalación y configuración de OpenLDAP en la máquina <code class="language-plaintext highlighter-rouge">Alfa</code>. Lo haremos utilizando como base el nombre DNS asignado a la máquina, <code class="language-plaintext highlighter-rouge">alfa.mariajesus.gonzalonazareno.org</code>.</p>

<p>En esta ocasión, vamos a crear entre todos los alumnos de la clase, los que vayamos a hacer dicha práctica, un fichero CSV que incluya la siguiente información:</p>

<ul>
  <li>Nombre del alumno</li>
  <li>Apellidos del alumno</li>
  <li>Dirección de correo electrónico</li>
  <li>Nombre del equipo</li>
  <li>Dirección IP del equipo</li>
  <li>Clave pública SSH del equipo</li>
</ul>

<p>El mío quedaría así:</p>

<pre><code class="language-csv">Ivan,Pina Castillo,ivanpicas88@gmail.com,ivan,ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCfYm123AV12rRYM+tPkrd0Hrzc9Py32Ov8JVZCnH5zVBj3I/IxE08LUhccSSx9aD0DrW+RdfpmLCSBTgGnbdM9eYlq3jxoBqqye4DQeXLSPyXcp/qRPGPsNO+eGypVhRB+Oq9B+ktrHgzAXQSP1yjmjN57H7GVBnMEJhpCEVXk5vWgMhVNxsDSF6lHrbiaYLtunTtt+fNgrprzXuUqhUwEDRt6/ktwad420J7kmqkB4dQuex3hV+16l1GyNH8AJzNzoinTiLr/jW8Ja0udgIknsxFvZ5Df+ACCrXfIFwvdPTm6Nya0jCm9vFx5yc5O1E07qlbAAn3FiIfS5Udjs6rNZjfFH5GmlpodhcGy4nkCYZvylnEayIa/ak4wA7oDft60hlHBMCHMoyY3ZcIkWGmVkwnTB3xfxfykPeD14zQAlIuMol9RNmPUbDYtbfY64npLPmagUIHSpwwbs1byEBbzzqzG8qcCAPUk3mK6oB5+OKUNJDv+4MM+suj+Y/PnWM8= debian@delta
Juan Jesus,Alejo Sillero,juanjesusalejosillero@gmail.com,juanje,ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDzLgcT2qKvflOcKWjUGX0ecoVWN+phHx7dEws3b/rY/xAichGJ6oP8ucD4lVJ8XVrEOaUgqQ1laPK33+u9MmzARx4g17/jKcwepUWdkKVA2++RWG3bsNgxCCkR1Gi7XMAAjwq8/17OjCj+4bvfTPlW5FSjDqaLhfqqeDtKpFJ3wjGG5sjNPC0GU4cRKzggZaR40ld7siaOiMteQ8X6bIggeXw+ULGiUhB4/uoLu0z69AzGgDfoPJuJEx4pPlcnOip/TAuL/pUjTjdUUDTsrZSJegWoLmRwylKvwtX8WojqI2TnTOyLT0IG1oStq4gC4AKOiCqfiBOm25bFfX0lW0uUaR1RjEuGz3jV0vkH3pCiuarNk5KnEQQqUO0x6ZvdCvOlsWYoiDQ6MclGKfUkUzC1uST5khs4xB1zQAZ5795on4SV8STASTwjpxuTuk7v4lTxrm8bTAF4bWiezgOQ0aFr7P0APygX0rbCR1aXoGfSyrrvqOUtkUzpiWwZwOpj0K0= juanjesus@delta.juanjesus.gonzalonazareno.org
Angel,Suarez Perez,angelsuarezperez@gmail.com,angel,ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDFEJGJIWb1KviE3kwQRoUV2C4E0d9L0mq9XjSt1kmznXSXMODJBdHwa7GOb9iwmW3OKkTa6RGokB2nKvs+2IBm9HcPYM0WM78wxEazuUvwpHR4mV58gzif/ETM48/ceQcf1fqADW1456Mfk7zFHwgf8vjyNfFCtR6NGve7wb7ojm79a9CJpqZEJ9X+EVxjbKysdvhS3BsNo5L3aJwPsAHE29+lFhDmOOzuEXWTjvFRkC1aFN1iVyxdolNJuh3onWXZDzPI55Q/DHtkpjKZ4cYqBsmwZFjWlum5aWRltgYMZtvoGOBglIxBQWjY4sl7WCiW89b+6zIcG4vWq48qhoO76ROYEPJL4pdkxxUZbjk4xApHLoO56+fXCtoo+fO/zQiHyTElzXBg/v2MmqxUrFQmQCzhbAuKK88rycZVFdIknuc+Raoi3faiX2x5N9AL4PMpEVJaTi7b/n7NMZVTkuVT9U/X9pwABSi1yngxlr2BpTg2FJD5iId15v51nx1ynXE= angelsuarez@charlie
Maria Jesus,Alloza Rodriguez, mariajesus.allozarodriguez@gmail.com, ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDd4xzwnydw85ipOR35RhK/S4750Z+PDsr8JILUh3abXczA25pR/CoXmMdSqTOTG8QqA2eKyJtATbz7W7nbaniIO8vWlyYYBYiiq3gXIW8u5hZl791Odgl5V1INEuQFgdwyABk60m2kPzc8pzvBJc65TGq3C8YrpOY/k3DoXd0dBEmZe5bCUqCcSF9j1J+4FQj0NxF1sXrnP0ZNL0y70CPROzwZw0ECz1eB/WhfH4niQhF3jHSw9WEYy548JIy4xAbeexnenwVua5W0Wyu7Rfk2NIGuMnq0Ese06wSu1x7sX8rBOljs+E3+eAsPmBDGXzNlpi8x8k9ZAdSjLCY5mpPeXauOR7LKfVpqjXNDzBBoodQrDQOA8QbbUxOtYz2srno3KF0RmAzhk/puEn19rkhWulOBMr322Kom+br7Rzc/WiML7YHEYhAY1GE8eyCSzH3Mkv7dqLAfP3WZ6pgbVXe/OdHkpuXBw+RS/GqvlVTbl//gHsMbEMav3CZBZttiIpU= maria@delta.mariajesus.gonzalonazareno.org
</code></pre>

<h3 id="esquema-openssh-lpk">Esquema openssh-lpk</h3>

<p>Tras haber creado los ficheros, vamos a añadir el esquema openssh-lpk al servidor LDAP. Para ello, vamos a crear un fichero llamado openssh-lpk.ldif:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/ldap/schema/openssh-lpk.ldif
</code></pre></div></div>

<p>Y añadimos el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dn: <span class="nv">cn</span><span class="o">=</span>openssh-lpk,cn<span class="o">=</span>schema,cn<span class="o">=</span>config
objectClass: olcSchemaConfig
cn: openssh-lpk
olcAttributeTypes: <span class="o">(</span> 1.3.6.1.4.1.24552.500.1.1.1.13 NAME <span class="s1">'sshPublicKey'</span>
  DESC <span class="s1">'MANDATORY: OpenSSH Public key'</span>
  EQUALITY octetStringMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.40 <span class="o">)</span>
olcObjectClasses: <span class="o">(</span> 1.3.6.1.4.1.24552.500.1.1.2.0 NAME <span class="s1">'ldapPublicKey'</span> SUP top AUXILIARY
  DESC <span class="s1">'MANDATORY: OpenSSH LPK objectclass'</span>
  MAY <span class="o">(</span> sshPublicKey <span class="nv">$ </span>uid <span class="o">)</span>
  <span class="o">)</span>
</code></pre></div></div>

<p>Lo siguiente será añadir el esquema al directorio que utilizamos para el servidor LDAP ejecutando el siguiente comando en nuestra terminal en la máquina <code class="language-plaintext highlighter-rouge">alfa</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapadd <span class="nt">-Y</span> EXTERNAL <span class="nt">-H</span> ldapi:/// <span class="nt">-f</span> /etc/ldap/schema/openssh-lpk.ldif
</code></pre></div></div>

<h3 id="script-en-python-">Script en Python 🐍</h3>

<h2 id="referencias">Referencias</h2>

<p>[1] <a href="https://www.openldap.org/">https://www.openldap.org/</a></p>

<p>[2] <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-openldap-and-phpldapadmin-on-ubuntu-18-04-es">https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-openldap-and-phpldapadmin-on-ubuntu-18-04-es</a></p>

<ul>
  <li>
    <p>Disk Image or VM file: Esto incluye el archivo de imagen que puede ser una copia exacta de un disco duro, una tarjeta multimedia o    incluso una máquina virtual.</p>
  </li>
  <li>
    <p>Local Disk: Esta opción incluye dispositivos como discos duros, pen drives, tarjetas de memoria, etc.</p>
  </li>
  <li>
    <p>Logical Files: Incluye la imagen de cualquier carpeta o archivo local.</p>
  </li>
  <li>
    <p>Unallocated Space Image File: Incluyen archivos que no contienen ningún sistema de archivos y se ejecutan con la ayuda del módulo      Ingest.</p>
  </li>
  <li>
    <p>Autopsy Logical Imager Results: Incluyen la fuente de datos de la ejecución del generador de imágenes lógicas.</p>
  </li>
  <li>
    <p>XRY Text Export: Incluyen la fuente de datos de la exportación de archivos de texto desde XRY.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="ASO" /><summary type="html"><![CDATA[Introducción En nuestro escenario vamos a realizar la instalación y configuración de OpenLDAP en la máquina Alfa. Lo haremos utilizando como base el nombre DNS asignado a la máquina, alfa.mariajesus.gonzalonazareno.org. En esta ocasión, vamos a crear entre todos los alumnos de la clase, los que vayamos a hacer dicha práctica, un fichero CSV que incluya la siguiente información: Nombre del alumno Apellidos del alumno Dirección de correo electrónico Nombre del equipo Dirección IP del equipo Clave pública SSH del equipo El mío quedaría así: Ivan,Pina Castillo,ivanpicas88@gmail.com,ivan,ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCfYm123AV12rRYM+tPkrd0Hrzc9Py32Ov8JVZCnH5zVBj3I/IxE08LUhccSSx9aD0DrW+RdfpmLCSBTgGnbdM9eYlq3jxoBqqye4DQeXLSPyXcp/qRPGPsNO+eGypVhRB+Oq9B+ktrHgzAXQSP1yjmjN57H7GVBnMEJhpCEVXk5vWgMhVNxsDSF6lHrbiaYLtunTtt+fNgrprzXuUqhUwEDRt6/ktwad420J7kmqkB4dQuex3hV+16l1GyNH8AJzNzoinTiLr/jW8Ja0udgIknsxFvZ5Df+ACCrXfIFwvdPTm6Nya0jCm9vFx5yc5O1E07qlbAAn3FiIfS5Udjs6rNZjfFH5GmlpodhcGy4nkCYZvylnEayIa/ak4wA7oDft60hlHBMCHMoyY3ZcIkWGmVkwnTB3xfxfykPeD14zQAlIuMol9RNmPUbDYtbfY64npLPmagUIHSpwwbs1byEBbzzqzG8qcCAPUk3mK6oB5+OKUNJDv+4MM+suj+Y/PnWM8= debian@delta Juan Jesus,Alejo Sillero,juanjesusalejosillero@gmail.com,juanje,ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDzLgcT2qKvflOcKWjUGX0ecoVWN+phHx7dEws3b/rY/xAichGJ6oP8ucD4lVJ8XVrEOaUgqQ1laPK33+u9MmzARx4g17/jKcwepUWdkKVA2++RWG3bsNgxCCkR1Gi7XMAAjwq8/17OjCj+4bvfTPlW5FSjDqaLhfqqeDtKpFJ3wjGG5sjNPC0GU4cRKzggZaR40ld7siaOiMteQ8X6bIggeXw+ULGiUhB4/uoLu0z69AzGgDfoPJuJEx4pPlcnOip/TAuL/pUjTjdUUDTsrZSJegWoLmRwylKvwtX8WojqI2TnTOyLT0IG1oStq4gC4AKOiCqfiBOm25bFfX0lW0uUaR1RjEuGz3jV0vkH3pCiuarNk5KnEQQqUO0x6ZvdCvOlsWYoiDQ6MclGKfUkUzC1uST5khs4xB1zQAZ5795on4SV8STASTwjpxuTuk7v4lTxrm8bTAF4bWiezgOQ0aFr7P0APygX0rbCR1aXoGfSyrrvqOUtkUzpiWwZwOpj0K0= juanjesus@delta.juanjesus.gonzalonazareno.org Angel,Suarez Perez,angelsuarezperez@gmail.com,angel,ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDFEJGJIWb1KviE3kwQRoUV2C4E0d9L0mq9XjSt1kmznXSXMODJBdHwa7GOb9iwmW3OKkTa6RGokB2nKvs+2IBm9HcPYM0WM78wxEazuUvwpHR4mV58gzif/ETM48/ceQcf1fqADW1456Mfk7zFHwgf8vjyNfFCtR6NGve7wb7ojm79a9CJpqZEJ9X+EVxjbKysdvhS3BsNo5L3aJwPsAHE29+lFhDmOOzuEXWTjvFRkC1aFN1iVyxdolNJuh3onWXZDzPI55Q/DHtkpjKZ4cYqBsmwZFjWlum5aWRltgYMZtvoGOBglIxBQWjY4sl7WCiW89b+6zIcG4vWq48qhoO76ROYEPJL4pdkxxUZbjk4xApHLoO56+fXCtoo+fO/zQiHyTElzXBg/v2MmqxUrFQmQCzhbAuKK88rycZVFdIknuc+Raoi3faiX2x5N9AL4PMpEVJaTi7b/n7NMZVTkuVT9U/X9pwABSi1yngxlr2BpTg2FJD5iId15v51nx1ynXE= angelsuarez@charlie Maria Jesus,Alloza Rodriguez, mariajesus.allozarodriguez@gmail.com, ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDd4xzwnydw85ipOR35RhK/S4750Z+PDsr8JILUh3abXczA25pR/CoXmMdSqTOTG8QqA2eKyJtATbz7W7nbaniIO8vWlyYYBYiiq3gXIW8u5hZl791Odgl5V1INEuQFgdwyABk60m2kPzc8pzvBJc65TGq3C8YrpOY/k3DoXd0dBEmZe5bCUqCcSF9j1J+4FQj0NxF1sXrnP0ZNL0y70CPROzwZw0ECz1eB/WhfH4niQhF3jHSw9WEYy548JIy4xAbeexnenwVua5W0Wyu7Rfk2NIGuMnq0Ese06wSu1x7sX8rBOljs+E3+eAsPmBDGXzNlpi8x8k9ZAdSjLCY5mpPeXauOR7LKfVpqjXNDzBBoodQrDQOA8QbbUxOtYz2srno3KF0RmAzhk/puEn19rkhWulOBMr322Kom+br7Rzc/WiML7YHEYhAY1GE8eyCSzH3Mkv7dqLAfP3WZ6pgbVXe/OdHkpuXBw+RS/GqvlVTbl//gHsMbEMav3CZBZttiIpU= maria@delta.mariajesus.gonzalonazareno.org Esquema openssh-lpk Tras haber creado los ficheros, vamos a añadir el esquema openssh-lpk al servidor LDAP. Para ello, vamos a crear un fichero llamado openssh-lpk.ldif: vi /etc/ldap/schema/openssh-lpk.ldif Y añadimos el siguiente contenido: dn: cn=openssh-lpk,cn=schema,cn=config objectClass: olcSchemaConfig cn: openssh-lpk olcAttributeTypes: ( 1.3.6.1.4.1.24552.500.1.1.1.13 NAME 'sshPublicKey' DESC 'MANDATORY: OpenSSH Public key' EQUALITY octetStringMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.40 ) olcObjectClasses: ( 1.3.6.1.4.1.24552.500.1.1.2.0 NAME 'ldapPublicKey' SUP top AUXILIARY DESC 'MANDATORY: OpenSSH LPK objectclass' MAY ( sshPublicKey $ uid ) ) Lo siguiente será añadir el esquema al directorio que utilizamos para el servidor LDAP ejecutando el siguiente comando en nuestra terminal en la máquina alfa: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/openssh-lpk.ldif Script en Python 🐍 Referencias [1] https://www.openldap.org/ [2] https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-openldap-and-phpldapadmin-on-ubuntu-18-04-es Disk Image or VM file: Esto incluye el archivo de imagen que puede ser una copia exacta de un disco duro, una tarjeta multimedia o incluso una máquina virtual. Local Disk: Esta opción incluye dispositivos como discos duros, pen drives, tarjetas de memoria, etc. Logical Files: Incluye la imagen de cualquier carpeta o archivo local. Unallocated Space Image File: Incluyen archivos que no contienen ningún sistema de archivos y se ejecutan con la ayuda del módulo Ingest. Autopsy Logical Imager Results: Incluyen la fuente de datos de la ejecución del generador de imágenes lógicas. XRY Text Export: Incluyen la fuente de datos de la exportación de archivos de texto desde XRY.]]></summary></entry><entry><title type="html">Taller de Almacenamiento - Creación de un cluster DRBD + OCFS2</title><link href="/hlc+sri/2023/01/29/DRBD+OCFS2.html" rel="alternate" type="text/html" title="Taller de Almacenamiento - Creación de un cluster DRBD + OCFS2" /><published>2023-01-29T17:47:32+01:00</published><updated>2023-01-29T17:47:32+01:00</updated><id>/hlc+sri/2023/01/29/DRBD+OCFS2</id><content type="html" xml:base="/hlc+sri/2023/01/29/DRBD+OCFS2.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En este post vamos a ver cómo crear un cluster DRBD + OCFS2 para almacenar datos en un entorno de alta disponibilidad. Para ello, vamos a utilizar dos maquinas virtuales, a las que les vamos a añadir dos discos adicionales de 2GB para que la sincronización de los datos sea más rápida.</p>

<h2 id="creación-de-las-máquinas-virtuales">Creación de las máquinas virtuales</h2>

<p>Para crear las máquinas virtuales, vamos a montarlas con Vagrant con el siguiente fichero:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Vagrant</span><span class="p">.</span><span class="nf">configure</span><span class="p">(</span><span class="s2">"2"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">define</span> <span class="ss">:mac1</span> <span class="k">do</span> <span class="o">|</span><span class="n">mac1</span><span class="o">|</span>
    <span class="n">mac1</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">box</span> <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
    <span class="n">mac1</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">hostname</span> <span class="o">=</span> <span class="s2">"mac1"</span>
    <span class="n">mac1</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">synced_folder</span> <span class="s2">"."</span><span class="p">,</span> <span class="s2">"/vagrant"</span><span class="p">,</span> <span class="ss">disabled: </span><span class="kp">true</span>
    <span class="n">mac1</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">network</span> <span class="s2">"private_network"</span><span class="p">,</span> <span class="ss">ip: </span><span class="s2">"10.0.0.20"</span>
    <span class="n">mac1</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">provider</span> <span class="ss">:libvirt</span> <span class="k">do</span> <span class="o">|</span><span class="n">libvirt</span><span class="o">|</span>
        <span class="n">libvirt</span><span class="p">.</span><span class="nf">storage</span> <span class="ss">:file</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="s1">'2G'</span>
        <span class="n">libvirt</span><span class="p">.</span><span class="nf">storage</span> <span class="ss">:file</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="s1">'2G'</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">define</span> <span class="ss">:mac2</span> <span class="k">do</span> <span class="o">|</span><span class="n">mac2</span><span class="o">|</span>
    <span class="n">mac2</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">box</span> <span class="o">=</span> <span class="s2">"debian/bullseye64"</span>
    <span class="n">mac2</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">hostname</span> <span class="o">=</span> <span class="s2">"mac2"</span>
    <span class="n">mac2</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">synced_folder</span> <span class="s2">"."</span><span class="p">,</span> <span class="s2">"/vagrant"</span><span class="p">,</span> <span class="ss">disabled: </span><span class="kp">true</span>
    <span class="n">mac2</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">network</span> <span class="s2">"private_network"</span><span class="p">,</span> <span class="ss">ip: </span><span class="s2">"10.0.0.30"</span>
    <span class="n">mac2</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">provider</span> <span class="ss">:libvirt</span> <span class="k">do</span> <span class="o">|</span><span class="n">libvirt</span><span class="o">|</span>
        <span class="n">libvirt</span><span class="p">.</span><span class="nf">storage</span> <span class="ss">:file</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="s1">'2G'</span>
        <span class="n">libvirt</span><span class="p">.</span><span class="nf">storage</span> <span class="ss">:file</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="s1">'2G'</span>
  <span class="k">end</span>
 <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="instalación">Instalación</h2>

<p>Para realizar este establecimiento, instalar el paquete DRBD:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>drbd-utils <span class="nt">-y</span>
</code></pre></div></div>

<p>Y para la implementación del sistema de ficheros, vamos a instalar OCFS2:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>ocfs2-tools <span class="nt">-y</span>
</code></pre></div></div>

<h2 id="creación-de-los-recursos-drdb">Creación de los recursos DRDB</h2>

<p>Una vez realizada la instalación de ambos paquetes, vamos a configurar el DRBD. Para ello, vamos a editar el fichero <code class="language-plaintext highlighter-rouge">/etc/drbd.d/wwwdata.res</code>. Deberemos añadir los dos discos que hemos creado en las máquinas virtuales, y añadir la siguiente configuración:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource wwwdata <span class="o">{</span>
  protocol C<span class="p">;</span>
  meta-disk internal<span class="p">;</span>
  device /dev/drbd1<span class="p">;</span>
  syncer <span class="o">{</span>
    verify-alg sha1<span class="p">;</span>
  <span class="o">}</span>
  net <span class="o">{</span>
    allow-two-primaries<span class="p">;</span>
  <span class="o">}</span>
  on mac1 <span class="o">{</span>
    disk /dev/vdb<span class="p">;</span>
    address 10.0.0.20:7789<span class="p">;</span>
  <span class="o">}</span>
  on mac2 <span class="o">{</span>
    disk /dev/vdb<span class="p">;</span>
    address 10.0.0.30:7789<span class="p">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Creado el fichero anterior, lo siguiente es crear el recurso en ambas máquinas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drbdadm create-md wwwdata
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/1.png" alt="1" /></p>

<p><img src="/assets/images/almacenamiento/taller3/2.png" alt="2" /></p>

<p>Lo mismo que hemos hecho ahora lo haremos con el segundo recurso, que se llamará <code class="language-plaintext highlighter-rouge">dbdata.res</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource dbdata <span class="o">{</span>
  protocol C<span class="p">;</span>
  meta-disk internal<span class="p">;</span>
  device /dev/drbd2<span class="p">;</span>
  syncer <span class="o">{</span>
    verify-alg sha1<span class="p">;</span>
  <span class="o">}</span>
  net <span class="o">{</span>
    allow-two-primaries<span class="p">;</span>
  <span class="o">}</span>
  on mac1 <span class="o">{</span>
    disk /dev/vdc<span class="p">;</span>
    address 10.0.0.20:7790<span class="p">;</span>
  <span class="o">}</span>
  on mac2 <span class="o">{</span>
    disk /dev/vdc<span class="p">;</span>
    address 10.0.0.30:7790<span class="p">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Creado el fichero anterior, lo siguientees crear el recurso en ambas máquinas:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drbdadm create-md dbdata
</code></pre></div></div>
<p><img src="/assets/images/almacenamiento/taller3/3.png" alt="3" /></p>

<p><img src="/assets/images/almacenamiento/taller3/4.png" alt="4" /></p>

<h2 id="configuración-single-primary-de-wwwdata">Configuración Single-Primary de wwwdata</h2>
<p>Ahora vamos a configurar <code class="language-plaintext highlighter-rouge">wwwdata</code> en modo <code class="language-plaintext highlighter-rouge">Single Primary</code>. Para ello, los activamos con el comando <code class="language-plaintext highlighter-rouge">drbdadm up wwwdata</code> y miramos el estado en ambas máquinas:</p>

<p><img src="/assets/images/almacenamiento/taller3/5.png" alt="5" /></p>

<p><img src="/assets/images/almacenamiento/taller3/6.png" alt="6" /></p>

<p>Como podemos ver en las imágenes anteriores, ambos recursos están en modo <code class="language-plaintext highlighter-rouge">Secondary/Secondary</code>. Para cambiar esto, vamos a hacer que uno de los recursos sea primario, en este caso, <code class="language-plaintext highlighter-rouge">wwwdata</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drbdadm primary <span class="nt">--force</span> wwwdata
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/7.png" alt="7" /></p>

<p><img src="/assets/images/almacenamiento/taller3/8.png" alt="8" /></p>

<p>Al pasar escaso tiempo, podemos ver que el estado del recurso pasará a <code class="language-plaintext highlighter-rouge">UpToDate/UpToDate</code>. Esto quiere decir están sincronizados.</p>

<p><img src="/assets/images/almacenamiento/taller3/9.png" alt="9" /></p>

<p><img src="/assets/images/almacenamiento/taller3/10.png" alt="10" /></p>

<p>El siguiente paso que deberíamos hacer es darle formato al recurso que acabamos de crear, de momento en la primera máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>xfsprogs

mkfs.xfs /dev/drbd1
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/11.png" alt="11" /></p>

<p>Lo montamos y creamos un fichero para comprobar su funcionamiento:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/drbd1 /mnt

<span class="nb">echo</span> <span class="s2">"Hola mundo"</span> <span class="o">&gt;</span> /mnt/hola.txt
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/12.png" alt="12" /></p>

<p>Si intentásemos montar el mismo recurso en la segunda máquina, no podríamos, ya que el recurso está en modo <code class="language-plaintext highlighter-rouge">Secondary</code>. Para poder montarlo, deberíamos desmontar el recurso, cambiar los roles y volver a montarlo pero en la segunda máquina:</p>

<ul>
  <li>Error de montaje:</li>
</ul>

<p><img src="/assets/images/almacenamiento/taller3/13.png" alt="13" /></p>

<ul>
  <li>Desmontaje del recurso en <code class="language-plaintext highlighter-rouge">mac1</code>:</li>
</ul>

<p><img src="/assets/images/almacenamiento/taller3/14.png" alt="14" /></p>

<ul>
  <li>Cambiamos los roles, ponemos la <code class="language-plaintext highlighter-rouge">mac1</code> en modo secundaria y la <code class="language-plaintext highlighter-rouge">mac2</code> en modo primario:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#mac1</span>
drbdadm secondary wwwdata
<span class="c">#mac2</span>
drbdadm primary <span class="nt">--force</span> wwwdata
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/15.png" alt="15" /></p>

<p><img src="/assets/images/almacenamiento/taller3/16.png" alt="16" /></p>

<p>El mismo montaje que hemos realizado en la primera máquina, lo haremos en la segunda:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/drbd1 /mnt
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/17.png" alt="17" /></p>

<p>Y como podemos ver en la imagen anterior, el fichero que creamos en la primera máquina, podemos ver que sigue existiendo.</p>

<h2 id="configuración-del-recurso-dbdata-en-modo-dual-primary">Configuración del recurso dbdata en modo Dual-Primary</h2>

<p>Ahora vamos a configurar el recurso <code class="language-plaintext highlighter-rouge">dbdata</code> en modo <code class="language-plaintext highlighter-rouge">Dual-Primary</code>. Para ello, vamor a levantar el recurso en ambas máquinas.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drbdadm up dbdata
drbdadm status dbdata
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/18.png" alt="18" /></p>

<p><img src="/assets/images/almacenamiento/taller3/19.png" alt="19" /></p>

<p>Ya con el recurso levantado vamos a configurarlo en modo <code class="language-plaintext highlighter-rouge">Dual-Primary</code>. Para ello vamos a configurar el recurso en ambos nodos como primarios:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drbdadm primary <span class="nt">--force</span> dbdata
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/20.png" alt="20" /></p>

<p><img src="/assets/images/almacenamiento/taller3/21.png" alt="21" /></p>

<p>Para poder hacer que los dos recursos sean primarios, deberemos cambiar el sistema de ficheros por <code class="language-plaintext highlighter-rouge">OCFS2</code>. Pero, ¿qué es OCFS2?</p>

<p><strong>O</strong>racle <strong>C</strong>luster <strong>F</strong>ile System (OCFS2) es un sistema de archivos de código abierto que se basa en el sistema de archivos de Linux. Es un sistema de archivos de cluster de alto rendimiento que se puede utilizar para crear un sistema de archivos distribuido en un cluster de Linux.</p>

<p>Una vez entendido esto, instalamos el paquete <code class="language-plaintext highlighter-rouge">ocfs2-tools</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>ocfs2-tools
</code></pre></div></div>

<p>Creamos el cluster y añadimos los nodos a este mismo de la siguiente manera:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Creación del cluster</span>
o2cb add-cluster tclust
<span class="c">#Añadir nodos al cluster</span>
o2cb add-node tclust mac1 <span class="nt">--ip</span> 10.0.0.20
o2cb add-node tclust mac2 <span class="nt">--ip</span> 10.0.0.30
</code></pre></div></div>

<p>Todo esto lo realizaremos en el <code class="language-plaintext highlighter-rouge">mac1</code>. Y como podemos ver en la imagen, el cluster se ha creado correctamente y los nodos están añadidos.</p>

<p><img src="/assets/images/almacenamiento/taller3/22.png" alt="22" /></p>

<p>El contenido que vemos en esta imagen, será el contenido del mismo fichero en la máquina <code class="language-plaintext highlighter-rouge">mac2</code> ya que hemos copiado el fichero de configuración del cluster de la máquina <code class="language-plaintext highlighter-rouge">mac1</code> a la máquina <code class="language-plaintext highlighter-rouge">mac2</code>.</p>

<p><img src="/assets/images/almacenamiento/taller3/23.png" alt="23" /></p>

<p>Ahora vamos a modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/default/o2cb</code> en ambas máquinas de la siguiente manera:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># O2CB_ENABLED: 'true' means to load the driver on boot.</span>
<span class="nv">O2CB_ENABLED</span><span class="o">=</span><span class="nb">true</span>

<span class="c"># O2CB_BOOTCLUSTER: If not empty, the name of a cluster to start.</span>
<span class="nv">O2CB_BOOTCLUSTER</span><span class="o">=</span>tclust

<span class="c"># O2CB_HEARTBEAT_THRESHOLD: Iterations before a node is considered dead.</span>
<span class="nv">O2CB_HEARTBEAT_THRESHOLD</span><span class="o">=</span>31

<span class="c"># O2CB_IDLE_TIMEOUT_MS: Time in ms before a network connection is considered dead.</span>
<span class="nv">O2CB_IDLE_TIMEOUT_MS</span><span class="o">=</span>30000

<span class="c"># O2CB_KEEPALIVE_DELAY_MS: Max. time in ms before a keepalive packet is sent.</span>
<span class="nv">O2CB_KEEPALIVE_DELAY_MS</span><span class="o">=</span>2000

<span class="c"># O2CB_RECONNECT_DELAY_MS: Min. time in ms between connection attempts.</span>
<span class="nv">O2CB_RECONNECT_DELAY_MS</span><span class="o">=</span>2000
</code></pre></div></div>

<p>Para que funciones de forma correcta, deberemos modificar el kernel con ciertos parámetros en ambas máquinas. Para eso, modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/sysctl.conf</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kernel.panic <span class="o">=</span> 30
kernel.panic_on_oops <span class="o">=</span> 1
</code></pre></div></div>

<p>Aplicamos los cambios con un <code class="language-plaintext highlighter-rouge">sysctl -p</code>.</p>

<p><img src="/assets/images/almacenamiento/taller3/24.png" alt="24" /></p>

<p><img src="/assets/images/almacenamiento/taller3/25.png" alt="25" /></p>

<p>Para finalizar, ponemos en marcha el cluster en ambas máquinas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>o2cb register-cluster tclust
o2cb cluster-status tclust
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/26.png" alt="26" /></p>

<p><img src="/assets/images/almacenamiento/taller3/27.png" alt="27" /></p>

<p>Tras verificar que el estado de nuestro cluster es <code class="language-plaintext highlighter-rouge">online</code>, vamos a crear el sistema de ficheros <code class="language-plaintext highlighter-rouge">OCFS2</code> en el recurso <code class="language-plaintext highlighter-rouge">dbdata</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mkfs.ocfs2 <span class="nt">--cluster-stack</span><span class="o">=</span>o2cb <span class="nt">--cluster-name</span><span class="o">=</span>tclust /dev/drbd2
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/28.png" alt="28" /></p>

<p>Desde la <code class="language-plaintext highlighter-rouge">mac2</code> podemos verificr que el sistema de ficheros <code class="language-plaintext highlighter-rouge">OCFS2</code> se ha creado correctamente:</p>

<p><img src="/assets/images/almacenamiento/taller3/29.png" alt="29" /></p>

<p><img src="/assets/images/almacenamiento/taller3/30.png" alt="30" /></p>

<p>Una vez realizado el formateo del sistema de ficheros, montamos los nodos en el directorio <code class="language-plaintext highlighter-rouge">/mnt</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/drbd2 /mnt
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller3/31.png" alt="31" /></p>

<p><img src="/assets/images/almacenamiento/taller3/32.png" alt="32" /></p>

<p>Para comprobar que funciona correctamente, vamos a crear un fichero en <code class="language-plaintext highlighter-rouge">mac1</code> y lo vamos a editar desde <code class="language-plaintext highlighter-rouge">mac2</code>. Tras ello, comprobamos los cambios en <code class="language-plaintext highlighter-rouge">mac1</code>:</p>

<ul>
  <li>
    <p>Creamos el fichero en <code class="language-plaintext highlighter-rouge">mac1</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Hola mundo"</span> <span class="o">&gt;</span> /mnt/hola.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller3/33.png" alt="33" /></p>
  </li>
  <li>
    <p>Comprobamos su contenido y lo editamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /mnt/hola.txt
<span class="nb">echo</span> <span class="s2">"Hola mundo 2"</span> <span class="o">&gt;</span> /mnt/hola.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller3/34.png" alt="34" /></p>
  </li>
  <li>
    <p>Comprobamos los cambios en <code class="language-plaintext highlighter-rouge">mac1</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /mnt/hola.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller3/35.png" alt="35" /></p>
  </li>
</ul>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Introducción]]></summary></entry><entry><title type="html">Taller de Almacenamiento - Introducción a iSCSI</title><link href="/hlc+sri/2023/01/28/iscsi.html" rel="alternate" type="text/html" title="Taller de Almacenamiento - Introducción a iSCSI" /><published>2023-01-28T12:47:17+01:00</published><updated>2023-01-28T12:47:17+01:00</updated><id>/hlc+sri/2023/01/28/iscsi</id><content type="html" xml:base="/hlc+sri/2023/01/28/iscsi.html"><![CDATA[<h2 id="introducción-a-iscsi">Introducción a iSCSI</h2>

<p>iSCSI es un protocolo de red que permite compartir almacenamiento entre servidores. iSCSI es una abreviatura de Internet Small Computer System Interface. Sirve para conectar servidores y almacenamiento de forma que se pueda compartir el almacenamiento entre ellos. Es una abreviatura de Internet Small Computer System Interface.</p>

<p>En este Taller vamos a configurar un servidor iSCSI y un cliente iSCSI. Para ello, vamos a usar un <a href="https://fp.josedomingo.org/sri2223/7_almacenamiento/files/iscsi/Vagrantfile">vagrantfile</a></p>

<h2 id="configuración-del-servidor-iscsi">Configuración del servidor iSCSI</h2>

<p>Primero instalaremos una herramienta que nos permitirá poder utilizar iSCSI, que es <code class="language-plaintext highlighter-rouge">tgt</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>tgt
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/1.png" alt="1" /></p>

<p>Una vez finalizada la instalación, empezaremos con la creación del target para debian, que para ello deberemos crear un archivo de configuración:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/tgt/conf.d/target1.conf
</code></pre></div></div>

<p>Y dentro de este archivo, pondremos lo siguiente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;target iqn.2023-01-target1&gt;
    backing-store /dev/vdb
&lt;/target&gt;
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/2.png" alt="2" /></p>

<p>Vamos a realizarlo en un solo LUN, que es lo mismo que en un solo disco duro. Para ello, vamos a reiniciar el servicio y comprobar que se ha creado correctamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart tgt
<span class="nt">---</span>
<span class="nb">sudo </span>tgtadm <span class="nt">--mode</span> target <span class="nt">--op</span> show
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/3.png" alt="3" /></p>

<h2 id="configuración-del-cliente-iscsi">Configuración del cliente iSCSI</h2>

<p>Para configurar el cliente iSCSI, vamos a instalar el paquete <code class="language-plaintext highlighter-rouge">open-iscsi</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>open-iscsi
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/4.png" alt="4" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>iscsiadm <span class="nt">--mode</span> discovery <span class="nt">--type</span> sendtargets <span class="nt">--portal</span> 192.168.121.117
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/5.png" alt="5" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>iscsiadm <span class="nt">--mode</span> node <span class="nt">-T</span> iqn.2023-01-target1 <span class="nt">--portal</span> 192.168.121.117 <span class="nt">-l</span>
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/6.png" alt="6" /></p>

<p><strong>NOTA:</strong> Para desmontar el target, utilizaremos la opción <code class="language-plaintext highlighter-rouge">-u</code> en el comando anterior (<code class="language-plaintext highlighter-rouge">sudo iscsiadm --mode node -T iqn.2023-01-target1 --portal 192.168.121.117 -u</code>).</p>

<p>Una vez instalado, podemos comprobar la conexión del target:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>journalctl <span class="nt">-k</span> <span class="nt">-f</span>
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/7.png" alt="7" /></p>

<h2 id="formateo-del-disco">Formateo del disco</h2>

<p>Podemos hacer uso del nuevo dispositivo que hemos creado como si se tratase de un disco duro más. Para ello, vamos a formatearlo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkfs.ext4 /dev/sda
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/8.png" alt="8" /></p>

<p>Una vez realizado elformateo, comprobaremos que se ha creado correctamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsblk <span class="nt">-f</span>
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/9.png" alt="9" /></p>

<p>El siguiente paso será montarlo, para poder escribir datos en él:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">-t</span> ext4 /dev/sda /mnt
</code></pre></div></div>

<p>Y como podemos comprobar en la siguiente imagen, podemos ver que está montado correctamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsblk <span class="nt">-f</span>
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/10.png" alt="10" /></p>

<p>Para comprobar que podemos escribir en él, vamos a crear un archivo de texto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo echo</span> <span class="s2">"Prueba de funcionamiento iSCSI."</span> <span class="o">&gt;</span> /mnt/prueba.txt
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/11.png" alt="11" /></p>

<h2 id="montaje-automático">Montaje automático</h2>

<p>Para que el disco se monte automáticamente, vamos a cargar el target en el arranque del sistema. Para ello, ejecutaremos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>iscsiadm <span class="nt">-m</span> discovery <span class="nt">-T</span> iqn.2023-01-target1 <span class="nt">-p</span> 192.168.121.117 <span class="nt">-u</span>
<span class="nb">sudo </span>iscsiadm <span class="nt">-m</span> discovery <span class="nt">-T</span> iqn.2023-01-target1 <span class="nt">-o</span> update <span class="nt">-n</span> node.startup <span class="nt">-v</span> automatic
</code></pre></div></div>

<p>Modificaremos fichero <code class="language-plaintext highlighter-rouge">/etc/iscsi/iscsid.conf</code> y añadiremos la siguiente línea:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node.startup <span class="o">=</span> automatic
</code></pre></div></div>

<p>Y reiniciaremos el servicio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart iscsid.service
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/12.png" alt="12" /></p>

<p>Para habilitarlo de forma permanente, ejecutaremos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>iscsid open-iscsi.service
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/13.png" alt="13" /></p>

<p>El siguiente paso que realizaremos será crear una unidad de systemd para que se monte el disco automáticamente. Para ello, crearemos un directorio donde crearemos las unidades iSCSI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /media/iscsi
</code></pre></div></div>

<p>Tras esto, crearemos el archivo de configuración de la unidad en <code class="language-plaintext highlighter-rouge">/etc/systemd/system/media-target1-iscsi.mount</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span>Mount iSCSI target1
<span class="nv">Requires</span><span class="o">=</span>network-online.target
<span class="nv">After</span><span class="o">=</span>network-online.target, iscsid.service

<span class="o">[</span>Mount]
<span class="nv">What</span><span class="o">=</span>/dev/disk/by-uuid/0ec438bc-620e-4bde-b8ca-d880b5d5358c
<span class="nv">Where</span><span class="o">=</span>/media/iscsi/target1
<span class="nv">Type</span><span class="o">=</span>ext4
<span class="nv">Options</span><span class="o">=</span>defaults

<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/14.png" alt="14" /></p>

<p><strong>NOTA:</strong> El nombre del fichero debe ser la ruta completa del directorio donde se montará el disco, pero separado por guiones. Por ejemplo, si queremos montar el disco en <code class="language-plaintext highlighter-rouge">/mnt/target1</code>, el nombre del fichero será <code class="language-plaintext highlighter-rouge">/etc/systemd/system/mnt-target1.mount</code>.</p>

<p>Reiniciaremos los demonios:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
</code></pre></div></div>

<p>Habilitaremos la unidad:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>media-iscsi-target1.mount
</code></pre></div></div>

<p>Y por último, la iniciamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start media-iscsi-target1.mount
</code></pre></div></div>

<p>Como podemos comprobar en la siguiente imagen, se ha montado correctamente:</p>

<p><img src="/assets/images/almacenamiento/taller2/15.png" alt="15" /></p>

<p>Y si reiniciamos la máquina, se montará automáticamente:</p>

<p><img src="/assets/images/almacenamiento/taller2/15-1.png" alt="15-1" /></p>

<h2 id="creamos-un-target-para-windows">Creamos un target para Windows</h2>

<p>Para este punto, vamos a realizar los mismos pasos que para las configuraciones anteriores, pero en este caso, vamos a crear un target con 2 LUN y autenticación por CHAP.</p>

<ul>
  <li>Creamos el fichero de configuración:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/tgt/conf.d/target2.conf
<span class="nt">---</span>

&lt;target iqn.2023-01-target2&gt;
    backing-store /dev/vdc
    backing-store /dev/vdd
    incominguser maria maria32061164s
&lt;/target&gt;
</code></pre></div></div>

<p><strong>NOTA:</strong> La contraseña debe de tener entre 12 y 16 caracteres para que no se error.</p>

<p><img src="/assets/images/almacenamiento/taller2/16.png" alt="16" /></p>

<ul>
  <li>Reiniciamos el servicio:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart tgt
</code></pre></div></div>

<ul>
  <li>Comprobamos que se ha creado correctamente:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tgtadm <span class="nt">--mode</span> target <span class="nt">--op</span> show
</code></pre></div></div>

<p><img src="/assets/images/almacenamiento/taller2/17.png" alt="17" /></p>

<h3 id="cliente-windows">Cliente Windows</h3>

<p>En la barra de búsqueda de Windows, escribimos <code class="language-plaintext highlighter-rouge">iSCSI</code> y seleccionamos la opción <code class="language-plaintext highlighter-rouge">Iniciador iSCSI</code>. Una vez seleccionado nos aparecerá la siguiente ventana:</p>

<p><img src="/assets/images/almacenamiento/taller2/18.png" alt="18" /></p>

<p>Para poder conectar el target desde Windows, nos vamos a <code class="language-plaintext highlighter-rouge">Inicio</code> → <code class="language-plaintext highlighter-rouge">Buscador iSCSI</code> → <code class="language-plaintext highlighter-rouge">Seleccionar "Iniciador iSCSI"</code> → <code class="language-plaintext highlighter-rouge">Destinos</code>. En esta subpestaña, introducimos los datos del servidor, pulsamos actualizar y se nos mostrarán los targets disponibles. En nuestro caso, seleccionaremos el target <code class="language-plaintext highlighter-rouge">iqn.2023-01-target2</code> y le daremos a <code class="language-plaintext highlighter-rouge">Conectar</code>.</p>

<p><img src="/assets/images/almacenamiento/taller2/19.png" alt="19" /></p>

<p>Tras esto, nos aparecerá una ventana de autenticación, donde deberemos introducir las credenciales que hemos configurado en el target. En nuestro caso, <code class="language-plaintext highlighter-rouge">maria</code> y <code class="language-plaintext highlighter-rouge">maria32061164s</code>.</p>

<p><img src="/assets/images/almacenamiento/taller2/20.png" alt="20" /></p>

<p>Y como podemos ver en la siguiente imagen, se ha conectado correctamente.</p>

<p><img src="/assets/images/almacenamiento/taller2/21.png" alt="21" /></p>

<h3 id="formateo-y-iso-de-la-unidad-iscsi-desde-windows">Formateo y iso de la unidad iSCSI desde Windows</h3>

<p>Nos dirigimos de nuevo a la barra de búsqueda de Windows y escribimos <code class="language-plaintext highlighter-rouge">Administración de discos</code>. Una vez seleccionado, nos aparecerá la siguiente ventana:</p>

<p><img src="/assets/images/almacenamiento/taller2/22.png" alt="22" /></p>

<p>En la ventana de <code class="language-plaintext highlighter-rouge">Inicializar disco</code> donde aparecerán los dos discos que hemos configurado en el target. Seleccionaremos los dos y le daremos a <code class="language-plaintext highlighter-rouge">Aceptar</code>.</p>

<p>Nos aparecen los discos sin formato, por lo que, en la barra superior de la ventana, seleccionamos <code class="language-plaintext highlighter-rouge">Acción</code> → <code class="language-plaintext highlighter-rouge">Añadir volumen simple</code>. Seleccionaremos el formato NTFS y le daremos a <code class="language-plaintext highlighter-rouge">Siguiente</code>.  En la siguiente ventana, le daremos a <code class="language-plaintext highlighter-rouge">Siguiente</code> y en la siguiente, a <code class="language-plaintext highlighter-rouge">Finalizar</code>.</p>

<p><img src="/assets/images/almacenamiento/taller2/23.png" alt="23" /></p>

<p>Tras finalizar, podemos ver que se han creado dos unidades de disco, una para cada LUN.</p>

<p><img src="/assets/images/almacenamiento/taller2/24.png" alt="24" /></p>

<p>Como podemos comprobar finalmente, ambos discos se han formateado correctamente y podemos acceder a ellos desde Windows.</p>

<p><img src="/assets/images/almacenamiento/taller2/25.png" alt="25" /></p>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Introducción a iSCSI]]></summary></entry><entry><title type="html">Taller Docker - Escenarios multicontenedor en Docker</title><link href="/iaw/2023/01/27/docker-multicontenedor.html" rel="alternate" type="text/html" title="Taller Docker - Escenarios multicontenedor en Docker" /><published>2023-01-27T16:11:17+01:00</published><updated>2023-01-27T16:11:17+01:00</updated><id>/iaw/2023/01/27/docker-multicontenedor</id><content type="html" xml:base="/iaw/2023/01/27/docker-multicontenedor.html"><![CDATA[<h2 id="despliegue-de-nextcloud-en-docker">Despliegue de Nextcloud en Docker</h2>

<p>Vamos a desplegar la aplicación nextcloud con una base de datos  utilizando la aplicación docker-compose. Puedes coger cómo modelo el fichero docker-compose.yml el que hemos estudiado para desplegar WordPress.</p>

<ol>
  <li>
    <p>Instala docker-compose en tu ordenador.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt <span class="nb">install </span>docker-compose
</code></pre></div>    </div>
  </li>
  <li>
    <p>Dentro de un directorio crea un fichero docker-compose.yml para realizar el despliegue de nextcloud con una base de datos. Recuerda las variables de entorno y la persistencia de información.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">mkdir </span>nextcloud
 <span class="nb">cd </span>nextcloud
 nano docker-compose.yml
</code></pre></div>    </div>

    <p>Dentro del fichero docker-compose.yml debes definir los siguientes servicios:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```yaml
 version: '3.7'
 services:
   nextcloud:
     image: nextcloud:latest
     container_name: nextcloud
     restart: always
     ports:
       - 8080:80
     volumes:
       - nextcloud:/var/www/html
     environment:
       - MYSQL_HOST=mariadb
       - MYSQL_DATABASE=nextcloud
       - MYSQL_USER=nextcloud
       - MYSQL_PASSWORD=admin
       - MYSQL_ROOT_PASSWORD=nextcloud
   db:
     image: mariadb:latest
     container_name: nextcloud-db
     restart: always
     volumes:
       - nextcloud-db:/var/lib/mysql
     environment:
       - MYSQL_DATABASE=nextcloud
       - MYSQL_USER=nextcloud
       - MYSQL_PASSWORD=admin
       - MYSQL_ROOT_PASSWORD=nextcloud
 volumes:
     nextcloud:
     nextcloud-db:
     ```
</code></pre></div>    </div>
  </li>
  <li>
    <p>Levanta el escenario con docker-compose.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker-compose up <span class="nt">-d</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/1.png" alt="1" /></p>
  </li>
  <li>
    <p>Muestra los contenedores con docker-compose.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker-compose ps
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Accede a la aplicación y comprueba que funciona.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> http://localhost:8080
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Comprueba el almacenamiento que has definido y que se ha creado una nueva red de tipo bridge.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker volume <span class="nb">ls
 </span>docker network <span class="nb">ls</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Borra el escenario con docker-compose.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker-compose down
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller2/5.png" alt="5" /></p>

    <p><img src="/assets/images/docker/taller2/6.png" alt="6" /></p>
  </li>
</ol>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Despliegue de Nextcloud en Docker]]></summary></entry><entry><title type="html">Taller Docker - Creación de imágenes Docker</title><link href="/iaw/2023/01/27/docker-imagen.html" rel="alternate" type="text/html" title="Taller Docker - Creación de imágenes Docker" /><published>2023-01-27T16:11:17+01:00</published><updated>2023-01-27T16:11:17+01:00</updated><id>/iaw/2023/01/27/docker-imagen</id><content type="html" xml:base="/iaw/2023/01/27/docker-imagen.html"><![CDATA[<h2 id="creación-de-una-imagen-a-partir-de-un-dockerfile">Creación de una imagen a partir de un Dockerfile</h2>

<ol>
  <li>
    <p>Crea una página web estática index.html. En mi caso, incluiré el CSS y el JS en el mismo fichero HTML.</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;html&gt;</span>
 <span class="nt">&lt;head&gt;</span>
     <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">'utf-8'</span><span class="nt">&gt;</span>
     <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">'viewport'</span> <span class="na">content=</span><span class="s">'width=device-width, initial-scale=1'</span><span class="nt">&gt;</span>
     <span class="nt">&lt;title&gt;</span>Crear Imagen Docker<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
       <span class="o">/*&lt;![</span><span class="nt">CDATA</span><span class="o">[*/</span>

             <span class="nt">html</span> <span class="p">{</span>
              <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
              <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
            <span class="p">}</span>  
              <span class="nt">body</span> <span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">20</span><span class="p">,</span><span class="m">72</span><span class="p">,</span><span class="m">50</span><span class="p">);</span>
        <span class="nl">background</span><span class="p">:</span> <span class="n">-moz-linear-gradient</span><span class="p">(</span><span class="m">180deg</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="m">43</span><span class="p">,</span><span class="m">70</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">30%</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">90%</span><span class="p">)</span>  <span class="p">;</span>
        <span class="nl">background</span><span class="p">:</span> <span class="n">-webkit-linear-gradient</span><span class="p">(</span><span class="m">180deg</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="m">43</span><span class="p">,</span><span class="m">70</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">30%</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">90%</span><span class="p">)</span> <span class="p">;</span>
        <span class="nl">background</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span><span class="m">180deg</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="m">43</span><span class="p">,</span><span class="m">70</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">30%</span><span class="p">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="m">90%</span><span class="p">);</span>
        <span class="nl">background-repeat</span><span class="p">:</span> <span class="nb">no-repeat</span><span class="p">;</span>
        <span class="nl">background-attachment</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
        <span class="nl">filter</span><span class="p">:</span> <span class="n">progid</span><span class="p">:</span><span class="n">DXImageTransform</span><span class="p">.</span><span class="n">Microsoft</span><span class="p">.</span><span class="n">gradient</span><span class="p">(</span><span class="n">startColorstr</span><span class="err">=</span><span class="s1">"#3c6eb4"</span><span class="p">,</span><span class="n">endColorstr</span><span class="err">=</span><span class="s1">"#3c95b4"</span><span class="p">,</span><span class="n">GradientType</span><span class="err">=</span><span class="m">1</span><span class="p">);</span> 
              <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
              <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.9em</span><span class="p">;</span>
              <span class="nl">font-weight</span><span class="p">:</span> <span class="m">400</span><span class="p">;</span>
              <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Montserrat'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
              <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
              <span class="nl">padding</span><span class="p">:</span> <span class="m">10em</span> <span class="m">6em</span> <span class="m">10em</span> <span class="m">6em</span><span class="p">;</span>
              <span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>      
            <span class="p">}</span>
                    <span class="nt">h1</span> <span class="p">{</span>
          <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
          <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
          <span class="nl">padding</span><span class="p">:</span> <span class="m">0.6em</span> <span class="m">2em</span> <span class="m">0.4em</span><span class="p">;</span>
          <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
          <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
          <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Montserrat'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
          <span class="nl">font-size</span><span class="p">:</span> <span class="m">2em</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nt">h1</span> <span class="nt">strong</span> <span class="p">{</span>
          <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bolder</span><span class="p">;</span>
          <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Montserrat'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nt">h2</span> <span class="p">{</span>
          <span class="nl">font-size</span><span class="p">:</span> <span class="m">1.5em</span><span class="p">;</span>
          <span class="nl">font-weight</span><span class="p">:</span><span class="nb">bold</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nc">.title</span> <span class="p">{</span>
          <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
          <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
          <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
          <span class="nl">float</span><span class="p">:</span> <span class="nb">right</span><span class="p">;</span>
          <span class="nl">width</span><span class="p">:</span> <span class="m">150px</span><span class="p">;</span>
          <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
          <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span> <span class="m">0</span> <span class="m">10px</span> <span class="m">0</span><span class="p">;</span>
          <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nc">.description</span> <span class="p">{</span>
          <span class="nl">padding</span><span class="p">:</span> <span class="m">45px</span> <span class="m">10px</span> <span class="m">5px</span> <span class="m">10px</span><span class="p">;</span>
          <span class="nl">clear</span><span class="p">:</span> <span class="nb">right</span><span class="p">;</span>
          <span class="nl">padding</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nc">.section</span> <span class="p">{</span>
          <span class="nl">padding-left</span><span class="p">:</span> <span class="m">3%</span><span class="p">;</span>
         <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nt">img</span> <span class="p">{</span>
                <span class="nl">padding</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
          <span class="nl">margin</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nt">a</span><span class="nd">:hover</span> <span class="nt">img</span> <span class="p">{</span>
          <span class="nl">padding</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
          <span class="nl">margin</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nd">:link</span> <span class="p">{</span>
          <span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">199</span><span class="p">,</span> <span class="m">252</span><span class="p">,</span> <span class="m">77</span><span class="p">);</span>
          <span class="nl">text-shadow</span><span class="p">:</span>
        <span class="p">}</span>
        <span class="nd">:visited</span> <span class="p">{</span>
          <span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">122</span><span class="p">,</span> <span class="m">206</span><span class="p">,</span> <span class="m">255</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
          <span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">16</span><span class="p">,</span> <span class="m">44</span><span class="p">,</span> <span class="m">122</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nc">.row</span> <span class="p">{</span>
          <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
          <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">10px</span> <span class="m">0</span> <span class="m">10px</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nt">footer</span> <span class="p">{</span>
          <span class="nl">padding-top</span><span class="p">:</span> <span class="m">6em</span><span class="p">;</span>
          <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">6em</span><span class="p">;</span>
          <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
          <span class="nl">font-size</span><span class="p">:</span> <span class="nb">xx-small</span><span class="p">;</span>
          <span class="nl">overflow</span><span class="p">:</span><span class="nb">hidden</span><span class="p">;</span>
          <span class="nl">clear</span><span class="p">:</span> <span class="nb">both</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nc">.summary</span> <span class="p">{</span>
          <span class="nl">font-size</span><span class="p">:</span> <span class="m">140%</span><span class="p">;</span>
          <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nf">#rocky-poweredby</span> <span class="nt">img</span> <span class="p">{</span>
          <span class="nl">margin-left</span><span class="p">:</span> <span class="m">-10px</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="nf">#logos</span> <span class="nt">img</span> <span class="p">{</span>
          <span class="nl">vertical-align</span><span class="p">:</span> <span class="nb">top</span><span class="p">;</span>
        <span class="p">}</span>
              <span class="c">/* Desktop  View Options */</span>
              <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span>  <span class="p">{</span>
                <span class="nt">body</span> <span class="p">{</span>
            <span class="nl">padding</span><span class="p">:</span> <span class="m">10em</span> <span class="m">20%</span> <span class="cp">!important</span><span class="p">;</span>
          <span class="p">}</span>
                <span class="nc">.col-md-1</span><span class="o">,</span> <span class="nc">.col-md-2</span><span class="o">,</span> <span class="nc">.col-md-3</span><span class="o">,</span> <span class="nc">.col-md-4</span><span class="o">,</span> <span class="nc">.col-md-5</span><span class="o">,</span> <span class="nc">.col-md-6</span><span class="o">,</span>
          <span class="nc">.col-md-7</span><span class="o">,</span> <span class="nc">.col-md-8</span><span class="o">,</span> <span class="nc">.col-md-9</span><span class="o">,</span> <span class="nc">.col-md-10</span><span class="o">,</span> <span class="nc">.col-md-11</span><span class="o">,</span> <span class="nc">.col-md-12</span> <span class="p">{</span>
            <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
          <span class="p">}</span>
                <span class="nc">.col-md-1</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">8.33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-2</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">16.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-3</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">25%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-4</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-5</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">41.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-6</span> <span class="p">{</span>
            <span class="nl">border-left</span><span class="p">:</span><span class="m">3px</span> <span class="p">;</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
                      <span class="p">}</span>
          <span class="nc">.col-md-7</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">58.33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-8</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">66.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-9</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">74.99%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-10</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">83.33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-11</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">91.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-md-12</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
              <span class="c">/* Mobile View Options */</span>
        <span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">767px</span><span class="p">)</span> <span class="p">{</span>
          <span class="nc">.col-sm-1</span><span class="o">,</span> <span class="nc">.col-sm-2</span><span class="o">,</span> <span class="nc">.col-sm-3</span><span class="o">,</span> <span class="nc">.col-sm-4</span><span class="o">,</span> <span class="nc">.col-sm-5</span><span class="o">,</span> <span class="nc">.col-sm-6</span><span class="o">,</span>
          <span class="nc">.col-sm-7</span><span class="o">,</span> <span class="nc">.col-sm-8</span><span class="o">,</span> <span class="nc">.col-sm-9</span><span class="o">,</span> <span class="nc">.col-sm-10</span><span class="o">,</span> <span class="nc">.col-sm-11</span><span class="o">,</span> <span class="nc">.col-sm-12</span> <span class="p">{</span>
            <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
          <span class="p">}</span>
                <span class="nc">.col-sm-1</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">8.33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-2</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">16.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-3</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">25%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-4</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-5</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">41.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-6</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-7</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">58.33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-8</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">66.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-9</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">74.99%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-10</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">83.33%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-11</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">91.66%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nc">.col-sm-12</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nt">h1</span> <span class="p">{</span>
            <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="cp">!important</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
              <span class="nt">&lt;/style&gt;</span>
        <span class="nt">&lt;/head&gt;</span>
        <span class="nt">&lt;body&gt;</span>
               <span class="nt">&lt;h1&gt;</span>¡Bienvenid@ Docker!<span class="nt">&lt;/h1&gt;</span>
               <span class="nt">&lt;h2&gt;</span>Esta es una web desplegada desde un contenedor de Docker<span class="nt">&lt;/h2&gt;</span>
               <span class="nt">&lt;p&gt;</span>Realizado por <span class="nt">&lt;strong&gt;</span>María Jesús Alloza<span class="nt">&lt;/strong&gt;&lt;/p&gt;</span>
        <span class="nt">&lt;/body&gt;</span>
 <span class="nt">&lt;/html&gt;</span>
  
</code></pre></div>    </div>
  </li>
  <li>
    <p>Crea un fichero Dockerfile que permita crear una imagen con un servidor web sirviendo la página. Puedes usar una imagen base debian o ubuntu, o una imagen que tenga ya un servicio web, como hemos visto en el apartado Ejemplo 1: Construcción de imágenes con una página estática.</p>

    <ul>
      <li>
        <p>Primero, crea un directorio donde guardarás los ficheros de la web. En este directorio crea un fichero index.html con el contenido que quieras. En este caso, el fichero index.html es el que hemos creado en el apartado anterior.</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  mkdir mi_servidor_web
  cd servidor_web
  touch index.html
</code></pre></div>        </div>
      </li>
      <li>
        <p>Luego, crearemos un fichero Dockerfile con el siguiente contenido:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  FROM debian
  MAINTAINER María Jesús Alloza <span class="s2">"mariajesus.alloza@outlook.es"</span>
  RUN apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> apache2
  COPY index.html /var/www/html/index.html
  CMD <span class="o">[</span><span class="s2">"/usr/sbin/apache2ctl"</span>, <span class="s2">"-D"</span>, <span class="s2">"FOREGROUND"</span><span class="o">]</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Ejecuta el comando docker que crea la nueva imagen. La imagen se debe llamar /mi_servidor_web:v1.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker build <span class="nt">-t</span> mi_servidor_web:v1 <span class="nb">.</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller3/1.png" alt="1" /></p>

    <p><img src="/assets/images/docker/taller3/2.png" alt="2" /></p>

    <p>Listamos las imágenes para comprobar que se ha creado correctamente:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```bash
 docker images
 ```
</code></pre></div>    </div>

    <p><strong>NOTA</strong>: El punto al final del comando es importante, ya que indica que el contexto de construcción es el directorio actual.</p>

    <p><img src="/assets/images/docker/taller3/3.png" alt="3" /></p>

    <ul>
      <li>
        <p>Creamos el contenedor para comprobar que funciona correctamente:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker run <span class="nt">-d</span> <span class="nt">-p</span> 80:80 <span class="nt">--name</span> mi_servidor_web mi_servidor_web:v1
</code></pre></div>        </div>

        <p><img src="/assets/images/docker/taller3/4.png" alt="4" /></p>
      </li>
      <li>
        <p>Y accedemos a la página web desde el navegador:</p>

        <p><img src="/assets/images/docker/taller3/5.png" alt="5" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Una vez comprobado, nos conectamos a Docker Hub y subimos la imagen que acabas de crear.</p>

    <ul>
      <li>
        <p>Nos creamos una cuenta en Docker Hub en su <a href="https://hub.docker.com/">página web</a>.</p>
      </li>
      <li>
        <p>Una vez creada la cuenta, nos logueamos en Docker Hub desde la terminal:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker login <span class="nt">-u</span> legnakra
</code></pre></div>        </div>

        <p><img src="/assets/images/docker/taller3/6.png" alt="6" /></p>
      </li>
      <li>
        <p>Lo siguiente es preparar nuestra imagen para que sea aceptada en este registro público. Todos los registros siguen una nomenclatura a la hora de almacenar los repositorios. En el caso de Docker Hub necesitamos que nuestra imagen se llame <code class="language-plaintext highlighter-rouge">nombre_de_usuario/nombre_del_repositorio:etiqueta</code>. En nuestro caso, la imagen se llamará <code class="language-plaintext highlighter-rouge">legnakra/mi_servidor_web:v1</code>.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker tag mi_servidor_web:v1 legnakra/mi_servidor_web:latest
</code></pre></div>        </div>

        <p><strong>NOTA</strong>: La etiqueta latest es la que se utiliza por defecto cuando no se especifica ninguna etiqueta. Por eso, cuando nos descarguemos la imagen, no tendremos que especificar la etiqueta. Sin embargo, si queremos descargar una imagen con una etiqueta concreta, tendremos que especificarla.</p>
      </li>
      <li>
        <p>Por último, subimos la imagen a Docker Hub:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker push legnakra/mi_servidor_web:v1
  <span class="c"># O también se puede hacer:</span>
  docker push legnakra/mi_servidor_web
</code></pre></div>        </div>

        <p><img src="/assets/images/docker/taller3/7.png" alt="7" /></p>
      </li>
    </ul>

    <p>Como podemos ver <a href="https://hub.docker.com/r/legnakra/mi_servidor_web/">aquí</a>, la imagen se ha subido correctamente.</p>
  </li>
  <li>
    <p>Descargamos la imagen en otro ordenador donde tengamos docker instalado, y creamos un contenedor a partir de ella.</p>

    <p><img src="/assets/images/docker/taller3/8.png" alt="8" /></p>

    <p><img src="/assets/images/docker/taller3/9.png" alt="9" /></p>

    <p><img src="/assets/images/docker/taller3/10.png" alt="10" /></p>
  </li>
  <li>
    <p>Realizamos una modificación de la página web. Modificaremos el fichero index.html y añadiremos:</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;p&gt;</span>Administración de Sistemas Informáticos en Red<span class="nt">&lt;/p&gt;</span>
 # Añadimos una imagen al 50% de su tamaño
 <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"https://png2.cleanpng.com/sh/da64d3e952f3349e22eb3ec8c65d8ada/L0KzQYm3VMA5N5dqfZH0aYP2gLBuTfRwa5xqip95eYTrf7A0kB9nfKhmitc2ZHXzfLFCjfVvfF59fdRyYXzkcsS0gB9vfJJuhtd7LUXkc7K5V8Nna2ZqTtcBLkS0R4e5UcA4OWY3S6MEN0e4SYm4UMYveJ9s/kisspng-docker-python-software-deployment-xebialabs-container-5aca273fc5e6e6.4176210715231977598106.png"</span> <span class="na">alt=</span><span class="s">"docker"</span> <span class="na">width=</span><span class="s">"50%"</span><span class="nt">&gt;</span> 
</code></pre></div>    </div>
  </li>
  <li>
    <p>Vuelve a crear una nueva imagen, en esta caso pon la eiqueta v2. Súbela a Docker Hub.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker build <span class="nt">-t</span> mi_servidor_web:v2 <span class="nb">.</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller3/11.png" alt="11" /></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker tag mi_servidor_web:v2 legnakra/mi_servidor_web:latest
 docker push legnakra/mi_servidor_web:v2
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller3/12.png" alt="12" /></p>

    <ul>
      <li>
        <p>Creamos el contenedor para comprobar que funciona correctamente:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker run <span class="nt">-d</span> <span class="nt">-p</span> 80:80 <span class="nt">--name</span> mi_servidor_web mi_servidor_web:v2
</code></pre></div>        </div>

        <p><img src="/assets/images/docker/taller3/13.png" alt="13" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Por último, baja la nueva imagen en el ordenador donde está corriendo el contenedor. Para hacer la implantación de la nueva versión debes borrar el contenedor y crear uno nuevo desde la nueva versión de la imagen.</p>

    <ul>
      <li>
        <p>Primero eliminamos el contenedor que teníamos creado:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker <span class="nb">rm</span> <span class="nt">-f</span> mi_servidor_web
</code></pre></div>        </div>
      </li>
      <li>
        <p>Y ahora descargamos la nueva imagen:</p>
      </li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker pull legnakra/mi_servidor_web
 <span class="c"># O también se puede hacer:</span>
 docker pull legnakra/mi_servidor_web:v2
</code></pre></div>    </div>

    <p><img src="/assets/images/docker/taller3/14.png" alt="14" /></p>

    <ul>
      <li>Y creamos el contenedor:</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker run <span class="nt">-d</span> <span class="nt">-p</span> 80:80 <span class="nt">--name</span> mi_servidor_web mi_servidor_web:v2
</code></pre></div>    </div>

    <p>Y como podemos ver, se han aplicado los cambios correctamente:</p>

    <p><img src="/assets/images/docker/taller3/15.png" alt="15" /></p>
  </li>
</ol>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Creación de una imagen a partir de un Dockerfile]]></summary></entry><entry><title type="html">Escenario - Configuración de LDAP en Alfa</title><link href="/aso/2023/01/22/ldap1.html" rel="alternate" type="text/html" title="Escenario - Configuración de LDAP en Alfa" /><published>2023-01-22T16:45:16+01:00</published><updated>2023-01-22T16:45:16+01:00</updated><id>/aso/2023/01/22/ldap1</id><content type="html" xml:base="/aso/2023/01/22/ldap1.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En nuestro <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a> vamos a realizar la instalación y configuración de OpenLDAP en la máquina <code class="language-plaintext highlighter-rouge">Alfa</code>. Lo haremos utilizando como base el nombre DNS asignado a la máquina, <code class="language-plaintext highlighter-rouge">alfa.mariajesus.gonzalonazareno.org</code>.</p>

<p>Para ello, crearemos un usuario denominado <code class="language-plaintext highlighter-rouge">prueba</code> y configuraremos una máquina cliente Debian y otra Rocky, para que pueda validarse el servicio LDAP con el usuario <code class="language-plaintext highlighter-rouge">prueba</code>.</p>

<h2 id="instalación-de-openldap">Instalación de OpenLDAP</h2>

<p>Para realizar la instalación de OpenLDAP, primero deberemos tener en cuenta el FQDN de nuestra máquina, que en nuestro caso es <code class="language-plaintext highlighter-rouge">alfa.mariajesus.gonzalonazareno.org</code>. Para ello, ejecutaremos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">hostname</span> <span class="nt">-f</span>
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/1.png" alt="1" /></p>

<p>Una vez que tenemos el FQDN, procederemos a instalar el paquete <code class="language-plaintext highlighter-rouge">slapd</code> y <code class="language-plaintext highlighter-rouge">ldap-utils</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>slapd ldap-utils
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/2.png" alt="2" /></p>

<p>Durante la instalación del paquete, este nos poedirá la contraseña que el usuario administrador usará para acceder al servicio LDAP. En nuestro caso, la contraseña que he predefinido es <code class="language-plaintext highlighter-rouge">admin</code>.</p>

<p>Tras la instalación, podemos comprobar que el servicio está activo y en ejecución:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl status slapd
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/3.png" alt="3" /></p>

<p>Y comprobaremos también que el puerto 389/TCP está abierto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tulpn</span> | <span class="nb">grep </span>389
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/4.png" alt="4" /></p>

<p>Como tenemos el paquete <code class="language-plaintext highlighter-rouge">ldap-utils</code> instalado, vamos a buscar el contenido que tiene nuestro directorio con la ayuda del comando <code class="language-plaintext highlighter-rouge">ldapsearch</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapsearch <span class="nt">-x</span> <span class="nt">-D</span> <span class="s2">"cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org"</span> <span class="nt">-b</span> <span class="s2">"dc=mariajesus,dc=gonzalonazareno,dc=org"</span> <span class="nt">-W</span>
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/5.png" alt="5" /></p>

<p>Hasta aquí estaría todo correcto e instalado, pero ¿y si queremos tener nuestros objetos organizados de una forma más clara? Para ello, vamos a crear un archivo de configuración denominado <code class="language-plaintext highlighter-rouge">ldapescenario.ldif</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ldapescenario.ldif
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dn: <span class="nv">ou</span><span class="o">=</span>Personas,dc<span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
objectClass: organizationalUnit
ou: Personas
changeType: add
dn: <span class="nv">ou</span><span class="o">=</span>Grupos,dc<span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
objectClass: organizationalUnit
ou: Grupos
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/6.png" alt="6" /></p>

<p>Listo el fichero, lo incluiremos en nuestro directorio con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapadd <span class="nt">-x</span> <span class="nt">-D</span> <span class="s2">"cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org"</span> <span class="nt">-f</span> ldapescenario.ldif <span class="nt">-W</span> 
</code></pre></div></div>

<p>Si queremos borra el archivo, lo haremos con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Personas</span>
ldapdelete <span class="nt">-x</span> <span class="nt">-D</span> <span class="s2">"cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org"</span> <span class="nt">-W</span> <span class="s2">"ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org"</span>
<span class="c">#Grupos</span>
ldapdelete <span class="nt">-x</span> <span class="nt">-D</span> <span class="s2">"cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org"</span> <span class="nt">-W</span> <span class="s2">"ou=Grupos,dc=mariajesus,dc=gonzalonazareno,dc=org"</span>
</code></pre></div></div>

<p>Si queremos comprobar que los cambios se han producido de forma correcta, podemos hacerlo con el comando <code class="language-plaintext highlighter-rouge">ldapsearch</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapsearch <span class="nt">-x</span> <span class="nt">-b</span> <span class="nv">dc</span><span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/7.png" alt="7" /></p>

<h3 id="creación-del-grupo-prueba">Creación del grupo <code class="language-plaintext highlighter-rouge">prueba</code></h3>

<p>Para crear el grupo <code class="language-plaintext highlighter-rouge">prueba</code>, vamos a crear un archivo denominado <code class="language-plaintext highlighter-rouge">grupos.ldif</code> con el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi grupos.ldif
<span class="nt">---</span>
dn: <span class="nv">cn</span><span class="o">=</span>prueba,ou<span class="o">=</span>Grupos,dc<span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
objectClass: top
objectClass: posixGroup
gidNumber: 2001
cn: prueba
</code></pre></div></div>

<p>Ya creado el fichero, podemos añadirlo al directorio con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapadd <span class="nt">-x</span> <span class="nt">-D</span> <span class="s1">'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org'</span> <span class="nt">-W</span> <span class="nt">-f</span> grupos.ldif
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/8.png" alt="8" /></p>

<p>Y comprobamos que se ha creado correctamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapsearch <span class="nt">-x</span> <span class="nt">-b</span> <span class="nv">dc</span><span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/9.png" alt="9" /></p>

<p>Si deseamos borrarlo, solo tendremos que ejecutar el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapdelete <span class="nt">-x</span> <span class="nt">-D</span> <span class="s1">'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org'</span> <span class="nt">-W</span> <span class="nv">cn</span><span class="o">=</span>prueba,ou<span class="o">=</span>Group,dc<span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
</code></pre></div></div>

<h3 id="creación-de-una-contraseña-para-el-usuario-prueba">Creación de una contraseña para el usuario <code class="language-plaintext highlighter-rouge">prueba</code></h3>

<p>En nuestro caso, vamos a crear una contraseña para el usuario <code class="language-plaintext highlighter-rouge">prueba</code>, pero será una contraseña cifrada, que lo haremos con el comando <code class="language-plaintext highlighter-rouge">slappasswd</code>. Nos pedirá que ingresemos la contraseña, y nos la devolverá cifrada en la consola en formato <code class="language-plaintext highlighter-rouge">{SSHA}</code>.</p>

<p><img src="/assets/images/LDAP/ldap1/10.png" alt="10" /></p>

<p>A continuación, creamos el usuario <code class="language-plaintext highlighter-rouge">prueba</code> en un fichero denominado <code class="language-plaintext highlighter-rouge">usuarios.ldif</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi usuarios.ldif
<span class="nt">---</span>

dn: <span class="nv">uid</span><span class="o">=</span>prueba,ou<span class="o">=</span>Personas,dc<span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
objectClass: person
cn: prueba
uid: prueba
uidNumber: 2001
gidNumber: 2001
homeDirectory: /home/nfs/prueba
loginShell: /bin/bash
userPassword: <span class="o">{</span>SSHA<span class="o">}</span>wQ5TgnH1OMpeAuuQyXX38Ye9Y8SVW3s4
sn: prueba
mail: mail@gmail.com
givenName: prueba
</code></pre></div></div>
<p><img src="/assets/images/LDAP/ldap1/11.png" alt="11" /></p>

<p>Ya con nuestro fichero creado, lo añadimos a nuestro directorio como lo hemos hecho anteriormente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapadd <span class="nt">-x</span> <span class="nt">-D</span> <span class="s1">'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org'</span> <span class="nt">-W</span> <span class="nt">-f</span> usuarios.ldif

ldapsearch <span class="nt">-x</span> <span class="nt">-b</span> <span class="nv">dc</span><span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/12.png" alt="12" /></p>

<p>En la imagen anterior, podemos ver que el usuario prueba se ha creado correctamente y se ha añadido al grupo <code class="language-plaintext highlighter-rouge">prueba</code>.</p>

<p>Para borrar el usuario, solo tendremos que ejecutar en nuestra consola <code class="language-plaintext highlighter-rouge">ldapdelete -x -D 'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org' -W uid=prueba,ou=People,dc=mariajesus,dc=gonzalonazareno,dc=org</code>.</p>

<h2 id="configuración-de-nfs-en-el-servidor">Configuración de NFS en el Servidor</h2>

<p>Debemos recordar que el usuario no tiene directorio de inicio, razón por la que no podrá acceder a su escritorio. Para ello, vamos a crear un directorio de inicio para el usuario <code class="language-plaintext highlighter-rouge">prueba</code> en el servidor NFS.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /home/nfs <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> /home/nfs/prueba
<span class="nb">chown </span>2001:2001 /home/nfs/prueba
</code></pre></div></div>

<p>Instalamos el paquete <code class="language-plaintext highlighter-rouge">nfs-kernel-server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>nfs-kernel-server
</code></pre></div></div>

<p>Tras esto, deberemos modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/exports</code> para que el usuario <code class="language-plaintext highlighter-rouge">prueba</code> pueda acceder a su directorio de inicio, y reiniciamos el servicio <code class="language-plaintext highlighter-rouge">nfs-kernel-server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/exports
<span class="nt">---</span>
/home/nfs       <span class="k">*</span><span class="o">(</span>rw,fsid<span class="o">=</span>0, subtree_check,no_root_squash<span class="o">)</span>
</code></pre></div></div>

<p>Las opciones que hemos añadido son:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">rw</code>: Permite que el usuario pueda leer y escribir en el directorio.</li>
  <li><code class="language-plaintext highlighter-rouge">fsid=0</code>: Es el identificador del sistema de ficheros.</li>
  <li><code class="language-plaintext highlighter-rouge">subtree_check</code>: Comprueba que el usuario tiene permisos para acceder a los subdirectorios.</li>
  <li><code class="language-plaintext highlighter-rouge">no_root_squash</code>: No comprime el usuario root.</li>
</ul>

<p>Para que se apliquen los cambios, deberemos ejecutar <code class="language-plaintext highlighter-rouge">exportfs -a</code> y reiniciar el servicio <code class="language-plaintext highlighter-rouge">nfs-kernel-server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart nfs-kernel-server
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/13.png" alt="13" /></p>

<h2 id="instalación-de-nss-pam-y-nscd-en-el-servidor">Instalación de NSS, PAM y NSCD en el Servidor</h2>

<p>El título de este epígrafe tiene muchas siglas, pero no os preocupéis, que las explicaremos a continuación:</p>

<ul>
  <li>
    <p><strong>NSS</strong>: Name Service Switch. Es un servicio que permite a los programas acceder a información de los usuarios y grupos de un sistema.</p>
  </li>
  <li>
    <p><strong>PAM</strong>: Pluggable Authentication Modules. Es un servicio que permite a los programas autenticar a los usuarios.</p>
  </li>
  <li>
    <p><strong>NSCD</strong>: Name Service Caching Daemon. Es un servicio que permite a los programas acceder a información de los usuarios y grupos de un sistema de forma más rápida.</p>
  </li>
</ul>

<p>Para instalarlos, ejecutamos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>libnss-ldapd libpam-ldapd nscd
</code></pre></div></div>

<p>Durante la instalación, nos pedirá que introduzcamos la dirección IP del servidor LDAP, el puerto, el DN del administrador y la contraseña. Una vez introducidos, se instalarán los paquetes.</p>

<p><img src="/assets/images/LDAP/ldap1/14.png" alt="14" /></p>

<p><img src="/assets/images/LDAP/ldap1/15.png" alt="15" /></p>

<p>Para terminar, debemos modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/nsswitch.conf</code> para que el sistema utilice el servicio LDAP para obtener información de los usuarios y grupos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/nsswitch.conf
<span class="nt">---</span>
passwd:         files ldap
group:          files ldap
shadow:         files ldap
gshadow:        files ldap

hosts:          files dns mymachines
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files
netgroup:       nis
</code></pre></div></div>

<p>Comprobamos la UUID del usuario <code class="language-plaintext highlighter-rouge">prueba</code> y nos conectamos con él:</p>

<p><img src="/assets/images/LDAP/ldap1/16.png" alt="16" /></p>

<p><img src="/assets/images/LDAP/ldap1/17.png" alt="17" /></p>

<h2 id="configuración-del-cliente-ubuntu">Configuración del Cliente Ubuntu</h2>

<p>Para este punto, vamos a usar la máquina <code class="language-plaintext highlighter-rouge">delta</code> del escenario. En ella, vamos a instalar el paquete <code class="language-plaintext highlighter-rouge">ldap-utils</code> para poder conectarnos al servidor LDAP y comprobar que todo funciona correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>ldap-utils <span class="nt">-y</span>
</code></pre></div></div>

<p>Creamos el fichero <code class="language-plaintext highlighter-rouge">/etc/ldap/ldap.conf</code> con el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/ldap/ldap.conf
<span class="nt">---</span>
BASE <span class="nv">dc</span><span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
URI ldap://alfa.mariajesus.gonzalonazareno.org
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/18.png" alt="18" /></p>

<p>Y con la ejecución del comando <code class="language-plaintext highlighter-rouge">ldapsearch -x -b dc=mariajesus,dc=gonzalonazareno,dc=org</code> comprobamos que podemos conectarnos al servidor LDAP:</p>

<p><img src="/assets/images/LDAP/ldap1/19.png" alt="19" /></p>

<p>Como nos muestra la imagen anterior, podemos ver que funciona correctamente y podemos conectarnos al servidor LDAP desde el cliente Ubuntu. Para conectarnos con el usuario <code class="language-plaintext highlighter-rouge">prueba</code>, ejecutamos el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapwhoami <span class="nt">-x</span> <span class="nt">-D</span> <span class="s1">'uid=prueba,ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org'</span> <span class="nt">-W</span>
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/20.png" alt="20" /></p>

<p>Instalaremos los paquetes necesarios para que el cliente pueda autenticarse con el servidor LDAP:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>libnss-ldapd libpam-ldapd ldap-utils <span class="nt">-y</span>
</code></pre></div></div>

<p>Se nos abrirá un asistente para configurar el cliente LDAP. En el primer paso, introducimos <code class="language-plaintext highlighter-rouge">alfa.mariajesus.gonzalonazareno.org</code> como servidor LDAP y como servidor de búsqueda introducimos <code class="language-plaintext highlighter-rouge">dc=mariajesus,dc=gonzalonazareno,dc=org</code>.</p>

<p>Lo siguiente será modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/pam.d/common-session</code> y añadimos al final de este fichero la siguiente línea:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>session required        pam_mkhomedir.so <span class="nv">skel</span><span class="o">=</span>/etc/skel <span class="nb">umask</span><span class="o">=</span>077
</code></pre></div></div>

<p>Y reiniciamos el servicio <code class="language-plaintext highlighter-rouge">nscd</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart nscd nslcd
</code></pre></div></div>

<p>El siguiente paso será modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/nsswitch.conf</code> como hicimos en el servidor, pero introduciremos los datos del servidor LDAP:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/nsswitch.conf
<span class="nt">---</span>
passwd:         files systemd ldap
group:          files systemd ldap
shadow:         files ldap
gshadow:        files ldap

hosts:          files dns mymachines
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files
netgroup:       nis
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/21.png" alt="21" /></p>

<p>Reiniciamos el resvicio <code class="language-plaintext highlighter-rouge">nscd</code> e instalamos <code class="language-plaintext highlighter-rouge">nfs-common</code> para poder montar el directorio de inicio del usuario <code class="language-plaintext highlighter-rouge">prueba</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart nscd
apt-get <span class="nb">install </span>nfs-common
</code></pre></div></div>

<p>Activamos el servicio y creamos el directorio donde vamos a montar el directorio de inicio del usuario <code class="language-plaintext highlighter-rouge">prueba</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl start nfs-client.target <span class="o">&amp;&amp;</span> systemctl <span class="nb">enable </span>nfs-client.target
<span class="nb">mkdir</span> /home/nfs <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> /home/nfs/prueba
<span class="nb">chown </span>2001:2001 /home/nfs/prueba
</code></pre></div></div>

<p>Llegados a este punto, podremos acceder al directorio sin problemas, pero todos los cambios que realicemos en el cliente ubuntu no se verán reflejados en el servidor LDAP.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Cargar el módulo nfs al arrancar el sistema</span>
<span class="nb">echo </span>NFS | <span class="nb">tee</span> <span class="nt">-a</span> /etc/modules
<span class="c">#Montar el directorio de inicio del usuario prueba</span>
vim /etc/systemd/system/home-nfs.mount
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span> Home de NFS
<span class="nv">Requires</span><span class="o">=</span>network-online.target
<span class="nv">After</span><span class="o">=</span>network-online.target
<span class="o">[</span>Mount]
<span class="nv">What</span><span class="o">=</span>192.168.0.1:/home/nfs
<span class="nv">Where</span><span class="o">=</span>/home/nfs
<span class="nv">Options</span><span class="o">=</span>_netdev,auto
<span class="nv">Type</span><span class="o">=</span>nfs
<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Reiniciamos los demonios</span>
systemctl daemon-reload
<span class="c">#Activamos el servicio</span>
systemctl <span class="nb">enable </span>home-nfs.mount
<span class="c">#Comenzamos el servicio</span>
systemctl start home-nfs.mount
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/22.png" alt="22" /></p>

<p>Para la prueba de fuego, vamos a conectarnos con el usuario prueba en <code class="language-plaintext highlighter-rouge">delta</code> y vamos a crear un fichero en el directorio de inicio del usuario <code class="language-plaintext highlighter-rouge">prueba</code>:</p>

<p><img src="/assets/images/LDAP/ldap1/23.png" alt="23" /></p>

<p><img src="/assets/images/LDAP/ldap1/24.png" alt="24" /></p>

<h2 id="configuración-del-cliente-rocky-linux">Configuración del Cliente Rocky Linux</h2>

<p>Para este punto, vamos a usar la máquina <code class="language-plaintext highlighter-rouge">bravo</code> del escenario. En ella, vamos a instalar el paquete <code class="language-plaintext highlighter-rouge">openldap-clients</code> para poder conectarnos al servidor LDAP y comprobar que todo funciona correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dnf <span class="nb">install </span>openldap-clients sssd sssd-ldap oddjob-mkhomedir sssd-tools <span class="nt">-y</span>
</code></pre></div></div>

<p>Editaremos el fichero de configración de <strong>PAM</strong> , que en ROcy linux se encuentra en <code class="language-plaintext highlighter-rouge">/etc/pam.d/system-auth</code> y añadiremos la siguiente línea:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/pam.d/system-auth
<span class="nt">---</span>
auth sufficient pam_ldap.so
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/25.png" alt="25" /></p>

<p>Creamos el fichero <code class="language-plaintext highlighter-rouge">/etc/openldap/ldap.conf</code> con el siguiente contenido para que el cliente pueda conectarse al servidor LDAP:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/openldap/ldap.conf
<span class="nt">---</span>
BASE <span class="nv">dc</span><span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
URI ldap://alfa.mariajesus.gonzalonazareno.org
</code></pre></div></div>

<p>Para que el usuario <code class="language-plaintext highlighter-rouge">prueba</code> pueda conectarse al servidor LDAP, tenemos que editar <code class="language-plaintext highlighter-rouge">/etc/pam.d/common-session</code> y añadir la siguiente línea:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/pam.d/system-auth
<span class="nt">---</span>
session required pam_mkhomedir.so <span class="nv">skel</span><span class="o">=</span>/etc/skel <span class="nb">umask</span><span class="o">=</span>0022
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/26.png" alt="26" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapsearch <span class="nt">-x</span> <span class="nt">-b</span> <span class="nv">dc</span><span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/27.png" alt="27" /></p>

<p>En esta imagen podemos ver que el cliente Rocky Linux se ha conectado correctamente al servidor LDAP y podemos ver los usuarios que hay en el directorio.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapwhoami <span class="nt">-x</span> <span class="nt">-D</span> <span class="s1">'uid=prueba,ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org'</span> <span class="nt">-W</span>
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/28.png" alt="28" /></p>

<p>Aquí podemos comprobar que funciona plenamente desde el cliente Rocky Linux.</p>

<p>Para realizar el login al servidor LDAP, instalamos <code class="language-plaintext highlighter-rouge">sssd</code> y <code class="language-plaintext highlighter-rouge">sssd-ldap</code> y añadimos la siguiente línea al fichero <code class="language-plaintext highlighter-rouge">/etc/ssd/sssd.conf</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dnf <span class="nb">install </span>sssd sssd-ldap
vi /etc/sssd/sssd.conf
<span class="nt">---</span>
<span class="o">[</span>domain/default]
id_provider <span class="o">=</span> ldap
autofs_provider <span class="o">=</span> ldap
auth_provider <span class="o">=</span> ldap
chpass_provider <span class="o">=</span> ldap
ldap_uri <span class="o">=</span> ldap://alfa.mariajesus.gonzalonazareno.org
ldap_search_base <span class="o">=</span> <span class="nv">dc</span><span class="o">=</span>mariajesus,dc<span class="o">=</span>gonzalonazareno,dc<span class="o">=</span>org
ldap_id_use_start_tls <span class="o">=</span> True
ldap_tls_cacertdir <span class="o">=</span> /etc/openldap/cacerts
cache_credentials <span class="o">=</span> True
ldap_tls_reqcert <span class="o">=</span> allow

<span class="o">[</span>sssd]
services <span class="o">=</span> nss, pam, autofs
domains <span class="o">=</span> default

<span class="o">[</span>nss]
homedir_substring <span class="o">=</span> /home/nfs
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/29.png" alt="29" /></p>

<p>Le cambiamos los permisos al fichero <code class="language-plaintext highlighter-rouge">/etc/sssd/sssd.conf</code>, habilitamos el servicio y lo reiniciamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>0600 /etc/sssd/sssd.conf
systemctl restart sssd
systemctl <span class="nb">enable </span>sssd
</code></pre></div></div>

<p>Creamos el directorio <code class="language-plaintext highlighter-rouge">/home/nfs</code> y lo hacemos propietario del usuario <code class="language-plaintext highlighter-rouge">prueba</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /home/nfs <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> /home/nfs/prueba
<span class="nb">chown </span>2001:2001 /home/nfs/prueba
</code></pre></div></div>

<p>Lo montamos con la ayuda de systemd:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/systemd/system/home-nfs.mount
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span>script de montaje NFS
<span class="nv">Requires</span><span class="o">=</span>NetworkManager.service
<span class="nv">After</span><span class="o">=</span>NetworkManager.service
<span class="o">[</span>Mount]
<span class="nv">What</span><span class="o">=</span>172.16.0.1:/home/nfs
<span class="nv">Where</span><span class="o">=</span>/home/nfs
<span class="nv">Options</span><span class="o">=</span>_netdev,auto
<span class="nv">Type</span><span class="o">=</span>nfs
<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/30.png" alt="30" /></p>

<p>Reiniciamos los demonios y activamos el servicio:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl start home-nfs.mount
systemctl <span class="nb">enable </span>home-nfs.mount
</code></pre></div></div>

<p><img src="/assets/images/LDAP/ldap1/31.png" alt="31" /></p>

<p><img src="/assets/images/LDAP/ldap1/32.png" alt="32" /></p>

<p>Como podemos ver en las imágenes anteriores, el directorio <code class="language-plaintext highlighter-rouge">/home/nfs</code> se ha montado correctamente en el cliente Rocky Linux y podemos realizar modificaciones desde bravo que veremos en <code class="language-plaintext highlighter-rouge">alfa</code> y en <code class="language-plaintext highlighter-rouge">delta</code></p>

<h2 id="conclusiones">Conclusiones</h2>

<p>Tras configurar LDAP en Ubuntu y Rocky Linux hemos podido comprobar que funciona correctamente y que podemos conectarnos desde el cliente a nuestro servidor LDAP.</p>

<p>La utilidad de esta herramiente es que podemos tener un único punto de acceso para todos los usuarios de nuestra red, y que todos ellos puedan acceder a los recursos de la misma manera. Además, podemos tener un único punto de control para los usuarios, y podemos gestionarlos de una manera más sencilla.</p>

<h2 id="referencias">Referencias</h2>

<p>[1] <a href="https://www.openldap.org/">https://www.openldap.org/</a></p>

<p>[2] <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-openldap-and-phpldapadmin-on-ubuntu-18-04-es">https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-openldap-and-phpldapadmin-on-ubuntu-18-04-es</a></p>]]></content><author><name></name></author><category term="ASO" /><summary type="html"><![CDATA[Introducción En nuestro escenario vamos a realizar la instalación y configuración de OpenLDAP en la máquina Alfa. Lo haremos utilizando como base el nombre DNS asignado a la máquina, alfa.mariajesus.gonzalonazareno.org. Para ello, crearemos un usuario denominado prueba y configuraremos una máquina cliente Debian y otra Rocky, para que pueda validarse el servicio LDAP con el usuario prueba. Instalación de OpenLDAP Para realizar la instalación de OpenLDAP, primero deberemos tener en cuenta el FQDN de nuestra máquina, que en nuestro caso es alfa.mariajesus.gonzalonazareno.org. Para ello, ejecutaremos el siguiente comando: hostname -f Una vez que tenemos el FQDN, procederemos a instalar el paquete slapd y ldap-utils: apt install slapd ldap-utils Durante la instalación del paquete, este nos poedirá la contraseña que el usuario administrador usará para acceder al servicio LDAP. En nuestro caso, la contraseña que he predefinido es admin. Tras la instalación, podemos comprobar que el servicio está activo y en ejecución: systemctl status slapd Y comprobaremos también que el puerto 389/TCP está abierto: netstat -tulpn | grep 389 Como tenemos el paquete ldap-utils instalado, vamos a buscar el contenido que tiene nuestro directorio con la ayuda del comando ldapsearch: ldapsearch -x -D "cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org" -b "dc=mariajesus,dc=gonzalonazareno,dc=org" -W Hasta aquí estaría todo correcto e instalado, pero ¿y si queremos tener nuestros objetos organizados de una forma más clara? Para ello, vamos a crear un archivo de configuración denominado ldapescenario.ldif: vi ldapescenario.ldif dn: ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org objectClass: organizationalUnit ou: Personas changeType: add dn: ou=Grupos,dc=mariajesus,dc=gonzalonazareno,dc=org objectClass: organizationalUnit ou: Grupos Listo el fichero, lo incluiremos en nuestro directorio con el siguiente comando: ldapadd -x -D "cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org" -f ldapescenario.ldif -W Si queremos borra el archivo, lo haremos con el siguiente comando: #Personas ldapdelete -x -D "cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org" -W "ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org" #Grupos ldapdelete -x -D "cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org" -W "ou=Grupos,dc=mariajesus,dc=gonzalonazareno,dc=org" Si queremos comprobar que los cambios se han producido de forma correcta, podemos hacerlo con el comando ldapsearch: ldapsearch -x -b dc=mariajesus,dc=gonzalonazareno,dc=org Creación del grupo prueba Para crear el grupo prueba, vamos a crear un archivo denominado grupos.ldif con el siguiente contenido: vi grupos.ldif --- dn: cn=prueba,ou=Grupos,dc=mariajesus,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixGroup gidNumber: 2001 cn: prueba Ya creado el fichero, podemos añadirlo al directorio con el siguiente comando: ldapadd -x -D 'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org' -W -f grupos.ldif Y comprobamos que se ha creado correctamente: ldapsearch -x -b dc=mariajesus,dc=gonzalonazareno,dc=org Si deseamos borrarlo, solo tendremos que ejecutar el siguiente comando: ldapdelete -x -D 'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org' -W cn=prueba,ou=Group,dc=mariajesus,dc=gonzalonazareno,dc=org Creación de una contraseña para el usuario prueba En nuestro caso, vamos a crear una contraseña para el usuario prueba, pero será una contraseña cifrada, que lo haremos con el comando slappasswd. Nos pedirá que ingresemos la contraseña, y nos la devolverá cifrada en la consola en formato {SSHA}. A continuación, creamos el usuario prueba en un fichero denominado usuarios.ldif: vi usuarios.ldif --- dn: uid=prueba,ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson objectClass: person cn: prueba uid: prueba uidNumber: 2001 gidNumber: 2001 homeDirectory: /home/nfs/prueba loginShell: /bin/bash userPassword: {SSHA}wQ5TgnH1OMpeAuuQyXX38Ye9Y8SVW3s4 sn: prueba mail: mail@gmail.com givenName: prueba Ya con nuestro fichero creado, lo añadimos a nuestro directorio como lo hemos hecho anteriormente: ldapadd -x -D 'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org' -W -f usuarios.ldif ldapsearch -x -b dc=mariajesus,dc=gonzalonazareno,dc=org En la imagen anterior, podemos ver que el usuario prueba se ha creado correctamente y se ha añadido al grupo prueba. Para borrar el usuario, solo tendremos que ejecutar en nuestra consola ldapdelete -x -D 'cn=admin,dc=mariajesus,dc=gonzalonazareno,dc=org' -W uid=prueba,ou=People,dc=mariajesus,dc=gonzalonazareno,dc=org. Configuración de NFS en el Servidor Debemos recordar que el usuario no tiene directorio de inicio, razón por la que no podrá acceder a su escritorio. Para ello, vamos a crear un directorio de inicio para el usuario prueba en el servidor NFS. mkdir /home/nfs &amp;&amp; mkdir /home/nfs/prueba chown 2001:2001 /home/nfs/prueba Instalamos el paquete nfs-kernel-server: apt install nfs-kernel-server Tras esto, deberemos modificar el fichero /etc/exports para que el usuario prueba pueda acceder a su directorio de inicio, y reiniciamos el servicio nfs-kernel-server: vi /etc/exports --- /home/nfs *(rw,fsid=0, subtree_check,no_root_squash) Las opciones que hemos añadido son: rw: Permite que el usuario pueda leer y escribir en el directorio. fsid=0: Es el identificador del sistema de ficheros. subtree_check: Comprueba que el usuario tiene permisos para acceder a los subdirectorios. no_root_squash: No comprime el usuario root. Para que se apliquen los cambios, deberemos ejecutar exportfs -a y reiniciar el servicio nfs-kernel-server: systemctl restart nfs-kernel-server Instalación de NSS, PAM y NSCD en el Servidor El título de este epígrafe tiene muchas siglas, pero no os preocupéis, que las explicaremos a continuación: NSS: Name Service Switch. Es un servicio que permite a los programas acceder a información de los usuarios y grupos de un sistema. PAM: Pluggable Authentication Modules. Es un servicio que permite a los programas autenticar a los usuarios. NSCD: Name Service Caching Daemon. Es un servicio que permite a los programas acceder a información de los usuarios y grupos de un sistema de forma más rápida. Para instalarlos, ejecutamos el siguiente comando: apt-get install libnss-ldapd libpam-ldapd nscd Durante la instalación, nos pedirá que introduzcamos la dirección IP del servidor LDAP, el puerto, el DN del administrador y la contraseña. Una vez introducidos, se instalarán los paquetes. Para terminar, debemos modificar el fichero /etc/nsswitch.conf para que el sistema utilice el servicio LDAP para obtener información de los usuarios y grupos: vi /etc/nsswitch.conf --- passwd: files ldap group: files ldap shadow: files ldap gshadow: files ldap hosts: files dns mymachines networks: files protocols: db files services: db files ethers: db files rpc: db files netgroup: nis Comprobamos la UUID del usuario prueba y nos conectamos con él: Configuración del Cliente Ubuntu Para este punto, vamos a usar la máquina delta del escenario. En ella, vamos a instalar el paquete ldap-utils para poder conectarnos al servidor LDAP y comprobar que todo funciona correctamente. apt-get install ldap-utils -y Creamos el fichero /etc/ldap/ldap.conf con el siguiente contenido: vi /etc/ldap/ldap.conf --- BASE dc=mariajesus,dc=gonzalonazareno,dc=org URI ldap://alfa.mariajesus.gonzalonazareno.org Y con la ejecución del comando ldapsearch -x -b dc=mariajesus,dc=gonzalonazareno,dc=org comprobamos que podemos conectarnos al servidor LDAP: Como nos muestra la imagen anterior, podemos ver que funciona correctamente y podemos conectarnos al servidor LDAP desde el cliente Ubuntu. Para conectarnos con el usuario prueba, ejecutamos el siguiente comando: ldapwhoami -x -D 'uid=prueba,ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org' -W Instalaremos los paquetes necesarios para que el cliente pueda autenticarse con el servidor LDAP: apt-get install libnss-ldapd libpam-ldapd ldap-utils -y Se nos abrirá un asistente para configurar el cliente LDAP. En el primer paso, introducimos alfa.mariajesus.gonzalonazareno.org como servidor LDAP y como servidor de búsqueda introducimos dc=mariajesus,dc=gonzalonazareno,dc=org. Lo siguiente será modificar el fichero /etc/pam.d/common-session y añadimos al final de este fichero la siguiente línea: session required pam_mkhomedir.so skel=/etc/skel umask=077 Y reiniciamos el servicio nscd: systemctl restart nscd nslcd El siguiente paso será modificar el fichero /etc/nsswitch.conf como hicimos en el servidor, pero introduciremos los datos del servidor LDAP: vi /etc/nsswitch.conf --- passwd: files systemd ldap group: files systemd ldap shadow: files ldap gshadow: files ldap hosts: files dns mymachines networks: files protocols: db files services: db files ethers: db files rpc: db files netgroup: nis Reiniciamos el resvicio nscd e instalamos nfs-common para poder montar el directorio de inicio del usuario prueba: systemctl restart nscd apt-get install nfs-common Activamos el servicio y creamos el directorio donde vamos a montar el directorio de inicio del usuario prueba: systemctl start nfs-client.target &amp;&amp; systemctl enable nfs-client.target mkdir /home/nfs &amp;&amp; mkdir /home/nfs/prueba chown 2001:2001 /home/nfs/prueba Llegados a este punto, podremos acceder al directorio sin problemas, pero todos los cambios que realicemos en el cliente ubuntu no se verán reflejados en el servidor LDAP. #Cargar el módulo nfs al arrancar el sistema echo NFS | tee -a /etc/modules #Montar el directorio de inicio del usuario prueba vim /etc/systemd/system/home-nfs.mount [Unit] Description= Home de NFS Requires=network-online.target After=network-online.target [Mount] What=192.168.0.1:/home/nfs Where=/home/nfs Options=_netdev,auto Type=nfs [Install] WantedBy=multi-user.target #Reiniciamos los demonios systemctl daemon-reload #Activamos el servicio systemctl enable home-nfs.mount #Comenzamos el servicio systemctl start home-nfs.mount Para la prueba de fuego, vamos a conectarnos con el usuario prueba en delta y vamos a crear un fichero en el directorio de inicio del usuario prueba: Configuración del Cliente Rocky Linux Para este punto, vamos a usar la máquina bravo del escenario. En ella, vamos a instalar el paquete openldap-clients para poder conectarnos al servidor LDAP y comprobar que todo funciona correctamente. dnf install openldap-clients sssd sssd-ldap oddjob-mkhomedir sssd-tools -y Editaremos el fichero de configración de PAM , que en ROcy linux se encuentra en /etc/pam.d/system-auth y añadiremos la siguiente línea: vi /etc/pam.d/system-auth --- auth sufficient pam_ldap.so Creamos el fichero /etc/openldap/ldap.conf con el siguiente contenido para que el cliente pueda conectarse al servidor LDAP: vi /etc/openldap/ldap.conf --- BASE dc=mariajesus,dc=gonzalonazareno,dc=org URI ldap://alfa.mariajesus.gonzalonazareno.org Para que el usuario prueba pueda conectarse al servidor LDAP, tenemos que editar /etc/pam.d/common-session y añadir la siguiente línea: vi /etc/pam.d/system-auth --- session required pam_mkhomedir.so skel=/etc/skel umask=0022 ldapsearch -x -b dc=mariajesus,dc=gonzalonazareno,dc=org En esta imagen podemos ver que el cliente Rocky Linux se ha conectado correctamente al servidor LDAP y podemos ver los usuarios que hay en el directorio. ldapwhoami -x -D 'uid=prueba,ou=Personas,dc=mariajesus,dc=gonzalonazareno,dc=org' -W Aquí podemos comprobar que funciona plenamente desde el cliente Rocky Linux. Para realizar el login al servidor LDAP, instalamos sssd y sssd-ldap y añadimos la siguiente línea al fichero /etc/ssd/sssd.conf: dnf install sssd sssd-ldap vi /etc/sssd/sssd.conf --- [domain/default] id_provider = ldap autofs_provider = ldap auth_provider = ldap chpass_provider = ldap ldap_uri = ldap://alfa.mariajesus.gonzalonazareno.org ldap_search_base = dc=mariajesus,dc=gonzalonazareno,dc=org ldap_id_use_start_tls = True ldap_tls_cacertdir = /etc/openldap/cacerts cache_credentials = True ldap_tls_reqcert = allow [sssd] services = nss, pam, autofs domains = default [nss] homedir_substring = /home/nfs Le cambiamos los permisos al fichero /etc/sssd/sssd.conf, habilitamos el servicio y lo reiniciamos: chmod 0600 /etc/sssd/sssd.conf systemctl restart sssd systemctl enable sssd Creamos el directorio /home/nfs y lo hacemos propietario del usuario prueba: mkdir /home/nfs &amp;&amp; mkdir /home/nfs/prueba chown 2001:2001 /home/nfs/prueba Lo montamos con la ayuda de systemd: vi /etc/systemd/system/home-nfs.mount [Unit] Description=script de montaje NFS Requires=NetworkManager.service After=NetworkManager.service [Mount] What=172.16.0.1:/home/nfs Where=/home/nfs Options=_netdev,auto Type=nfs [Install] WantedBy=multi-user.target Reiniciamos los demonios y activamos el servicio: systemctl daemon-reload systemctl start home-nfs.mount systemctl enable home-nfs.mount Como podemos ver en las imágenes anteriores, el directorio /home/nfs se ha montado correctamente en el cliente Rocky Linux y podemos realizar modificaciones desde bravo que veremos en alfa y en delta Conclusiones Tras configurar LDAP en Ubuntu y Rocky Linux hemos podido comprobar que funciona correctamente y que podemos conectarnos desde el cliente a nuestro servidor LDAP. La utilidad de esta herramiente es que podemos tener un único punto de acceso para todos los usuarios de nuestra red, y que todos ellos puedan acceder a los recursos de la misma manera. Además, podemos tener un único punto de control para los usuarios, y podemos gestionarlos de una manera más sencilla. Referencias [1] https://www.openldap.org/ [2] https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-openldap-and-phpldapadmin-on-ubuntu-18-04-es]]></summary></entry><entry><title type="html">Configuración de un servidor de correo en un VPS</title><link href="/hlc+sri/2023/01/22/servidor-correo.html" rel="alternate" type="text/html" title="Configuración de un servidor de correo en un VPS" /><published>2023-01-22T12:47:17+01:00</published><updated>2023-01-22T12:47:17+01:00</updated><id>/hlc+sri/2023/01/22/servidor-correo</id><content type="html" xml:base="/hlc+sri/2023/01/22/servidor-correo.html"><![CDATA[<h2 id="introducción">Introducción</h2>

<p>En este post vamos a configurar un servidor de correos en nuestro VPS. El nombre del servidor será <code class="language-plaintext highlighter-rouge">mail.mariatec.es</code>, que será el nombre que aparecerá en el registro MX.</p>

<h2 id="gestión-de-correos-desde-el-servidor">Gestión de correos desde el servidor</h2>

<p>El envío y recepción se hará desde el servidor a trávés de la herramienta <code class="language-plaintext highlighter-rouge">mail</code>.</p>

<h2 id="gestión-de-correos-desde-el-servidor-1">Gestión de correos desde el servidor</h2>

<h3 id="tarea-1">Tarea 1</h3>

<p>Lo primero que deberemos hacer es realizar un registro DNS en nuestro dominio y añadir un registro <code class="language-plaintext highlighter-rouge">A</code> con el nombre <code class="language-plaintext highlighter-rouge">mail</code> y la IP del servidor.</p>

<p>🔲 mail.mariatec.es     A       82.223.1.72</p>

<p>Y agregamos un registro SPF para evitar que nuestro servidor sea utilizado como servidor de spam.</p>

<p>🔲 mariatec.es     SPF     “v=spf1 ip4:82.223.1.72 -all”</p>

<p><img src="/assets/images/correo/correo/1.png" alt="1" /></p>

<p>Abrimos el puerto 25 en el cortafuegos del servidor y configuramos el registro PTR con el fqdn de nuestro VPS.</p>

<p><img src="/assets/images/correo/correo/2.png" alt="2" /></p>

<p>Una vez terminado esto, nos conectamos a nuestro VPS y comentamos con la configuración:</p>

<ul>
  <li>
    <p>Instalamos postfix y bsd-mailx</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>postfix bsd-mailx
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>NOTA</strong>: Recuerda que al instalar postfix te pedirá que configures el servidor de correo. En nuestro caso, seleccionamos la opción <code class="language-plaintext highlighter-rouge">Internet Site</code> y el nombre del dominio será <code class="language-plaintext highlighter-rouge">mariatec.es</code>.</p>

<ul>
  <li>
    <p>Enviaremos un correo a nuestro correo personal para comprobar que todo funciona correctamente.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola, esto es una prueba"</span> | mail <span class="nt">-s</span> <span class="s2">"Prueba"</span>
</code></pre></div>    </div>

    <p>Como podemos ver en la siguiente imagen, en el log del correo aparece el correo que hemos enviado y que ha sido recibido correctamente.</p>

    <p><img src="/assets/images/correo/correo/3.png" alt="3" /></p>

    <p><img src="/assets/images/correo/correo/4.png" alt="4" /></p>
  </li>
</ul>

<h3 id="tarea-2">Tarea 2</h3>

<p>En esta tarea, deberemos cerciorarnos de que podemos recibir correos ennuestro servidor VPS y por ello, vamos a usar el servicio de correo de gmail. Para que esto sea posible, deberemos realizar un nuevo registro MX 10 en nuestro dominio.</p>

<p>🔲 mariatec.es     MX 10    mail.mariatec.es</p>

<p>Para comprobar qeu funciona, accedemos a nuestra cuenta personal de correo y enviamos un correo a nuestro servidor.</p>

<p><img src="/assets/images/correo/correo/4.png" alt="4" /></p>

<p>Y desde nuestra consola, nos enviaremos un correo y podemos ver que ha llegado correctamente:</p>

<p><img src="/assets/images/correo/correo/5.png" alt="5" /></p>

<p><img src="/assets/images/correo/correo/6.png" alt="6" /></p>

<h2 id="uso-de-alias-y-redirecciones">Uso de alias y redirecciones</h2>

<h3 id="tarea-3">Tarea 3</h3>

<p>Para completar esta tarea, configuraremos, mediante <code class="language-plaintext highlighter-rouge">cron</code>, un script que nos permita enviar un correo cada minuto con la fecha y hora actual. Para ello, crearemos un script en <code class="language-plaintext highlighter-rouge">/usr/local/bin</code> que se llame <code class="language-plaintext highlighter-rouge">cronmail.sh</code> y que tenga el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo</span> <span class="s2">"=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_="</span>
<span class="nb">echo</span> <span class="s2">"Fecha y hora actual: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_="</span>
<span class="nb">echo</span> <span class="s2">"Uptime: </span><span class="si">$(</span><span class="nb">uptime</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_="</span>
<span class="nb">echo</span> <span class="s2">"Estado de los procesos:"</span>
ps
</code></pre></div></div>

<p>Le damos permisos de ejecución y comprobamos que funciona correctamente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x /root/cronmail.sh
<span class="nt">---</span>
bash /root/cronmail.sh
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/7.png" alt="7" /></p>

<p>Ahora, crearemos un archivo en <code class="language-plaintext highlighter-rouge">/etc/cron.d</code> que se llame <code class="language-plaintext highlighter-rouge">cronmail</code> y que tenga el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">MAILTO</span><span class="o">=</span>root
<span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> root /root/cronmail.sh
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/8.png" alt="8" /></p>

<p>Esperamos un minuto y comprobamos que el correo ha llegado correctamente:</p>

<p><img src="/assets/images/correo/correo/9.png" alt="9" /></p>

<p>Lo que hemos hecho es crear un script que se ejecuta cada minuto y que envía un correo con la fecha y hora actual, el uptime del servidor y el estado de los procesos.</p>

<p>El paso que viene ahora crear un alias para que los correos que se envíen a <code class="language-plaintext highlighter-rouge">root</code> se envíen a nuestro correo personal.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/aliases
<span class="nt">---</span>
root:   mariajesus
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/10.png" alt="10" /></p>

<p>Ejecutamos <code class="language-plaintext highlighter-rouge">newaliases</code> para que se actualice el archivo de alias y comprobamos que funciona correctamente:</p>

<p><img src="/assets/images/correo/correo/11.png" alt="11" /></p>

<p><img src="/assets/images/correo/correo/12.png" alt="12" /></p>

<p>Por último, creamos una redirección para que los correos que se envíen a <code class="language-plaintext highlighter-rouge">root</code> se envíen a nuestro correo personal.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /home/mariajesus/.forward
<span class="nt">---</span>
correo@gmail.com
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/13.png" alt="13" /></p>

<h2 id="para-asegurar-el-envío">Para asegurar el envío</h2>

<h3 id="tarea-4">Tarea 4</h3>

<p>En esta tarea, deberemos configurar el DomainKeys Identified Mail (DKIM) para que los correos que envíe nuestro servidor sean firmados digitalmente. Para ello, instalaremos el paquete <code class="language-plaintext highlighter-rouge">opendkim</code> y <code class="language-plaintext highlighter-rouge">opendkim-tools</code> y crearemos un archivo de configuración en <code class="language-plaintext highlighter-rouge">/etc/opendkim.conf</code> que tenga el siguiente contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>opendkim opendkim-tools <span class="nt">-y</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Domain mariatec.es
Selector dkim2023
KeyFile /etc/dkimkeys/dkim2023.private
<span class="c">#Socket local:/var/opendkim/opendkim.sock</span>
Socket inet:8891@localhost
PidFile /var/opendkim/opendkim.pid
TrustAnchorFile /usr/share/dns/root.key
</code></pre></div></div>

<p>Tras esto, modificaremos el archivo <code class="language-plaintext highlighter-rouge">/etc/default/opendkim</code> para que se ejecute en el puerto 8891 y no en el socket local.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SOCKET</span><span class="o">=</span>inet:8891@localhost
</code></pre></div></div>

<p>Y modificamos el archivo <code class="language-plaintext highlighter-rouge">/etc/postfix/main.cf</code> para señalar el modo de firma de los correos y el puerto en el que se ejecuta el servicio de <code class="language-plaintext highlighter-rouge">opendkim</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>milter_default_action <span class="o">=</span> accept
milter_protocol <span class="o">=</span> 2
smtpd_milters <span class="o">=</span> inet:localhost:8891
non_smtpd_milters <span class="o">=</span> <span class="nv">$smtpd_milters</span>
</code></pre></div></div>

<p>Cuando tengamos todo esto configurado, generamos la clave privada y pública para el selector <code class="language-plaintext highlighter-rouge">dkim2023</code>. También le cambiamos el propietario al usuario <code class="language-plaintext highlighter-rouge">opendkim</code> y reiniciamos los servicios.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /etc/dkimkeys
opendkim-genkey <span class="nt">-s</span> dkim2023 <span class="nt">-d</span> mariatec.es <span class="nt">-b</span> 2048
<span class="nb">chown </span>opendkim:opendkim dkim2023.private dkim2023.txt
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/14.png" alt="14" /></p>

<p>Para que postfix pueda usar la clave, deberá tener la siguiente estructura:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dkim2023._domainkey     IN      TXT     <span class="o">(</span> <span class="s2">"v=DKIM1; h=sha256; k=rsa; "</span>
          <span class="s2">"p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3gaVO68xhAlj7yNqNHEPh2zJDF+Mz5Zt9nsb54fElkvjUhAWUc+YiQ2yb+5tSo2EXjZV8LZCogkdKWkJniAmID/ZcyxZZB3XDa7nWpVJGF1JlOPXw+gJonq3Pdii945bIBR91ZcPR9KBL2TUZX0mHs1I1DlyXEALjajI5v2qbUFIVVCM6Kvv2qHB1FKhbkXozOW/ILoQr6unUp"</span>
          <span class="s2">"Y4pFGzgZBkUUWQVTHCJ/J9d2VIjN1lp1Ro3sV788PoU8Mk9piRmyW3+p1hoh6qeTqFv9QekD4jsiWBHuWM7mo3vLBoO4lzMsvcyPuAgaqsy2oEuq3RvtO23mNoqwtA5QmNGrQsBwIDAQAB"</span> <span class="o">)</span>  <span class="p">;</span> <span class="nt">-----</span> DKIM key dkim2023 <span class="k">for </span>mariatec.es
</code></pre></div></div>

<p>Y en el registro TXT del DNS colocaremos la clave pública:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">v</span><span class="o">=</span>DKIM1<span class="p">;</span> <span class="nv">h</span><span class="o">=</span>sha256<span class="p">;</span> <span class="nv">k</span><span class="o">=</span>rsa<span class="p">;</span> <span class="nv">p</span><span class="o">=</span><span class="nv">p</span><span class="o">=</span>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3gaVO68xhAlj7yNqNHEPh2zJDF+Mz5Zt9nsb54fElkvjUhAWUc+YiQ2yb+5tSo2EXjZV8LZCogkdKWkJniAmID/ZcyxZZB3XDa7nWpVJGF1JlOPXw+gJonq3Pdii945bIBR91ZcPR9KBL2TUZX0mHs1I1DlyXEALjajI5v2qbUFIVVCM6Kvv2qHB1FKhbkXozOW/ILoQr6unUp
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/15.png" alt="15" /></p>

<p>Reiniciamos los servicios y comprobamos que funciona correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart opendkim postfix
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tulpn</span> | <span class="nb">grep </span>8891
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/16.png" alt="16" /></p>

<p>Como podemos ver en las siguientes capturas, en la cabecera del correo se añade la información de la firma.</p>

<p><img src="/assets/images/correo/correo/17.png" alt="17" /></p>

<p>Y en la web de <a href="https://dkimvalidator.com/">dkimvalidator</a> podemos comprobar que la firma es correcta.</p>

<p><img src="/assets/images/correo/correo/18.png" alt="18" /></p>

<h2 id="para-luchar-contra-el-spam">Para luchar contra el SPAM</h2>

<h3 id="tarea-5">Tarea 5</h3>

<p>Le ha llegado el turno a la tarea 5. En esta tarea vamos a configurar Postfix para que tenga en cuenta el registro SPF de los correos que recibe. Para ello, vamos a instalar el paquete <code class="language-plaintext highlighter-rouge">postfix-policyd-spf-python</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>postfix-policyd-spf-python <span class="nt">-y</span>
</code></pre></div></div>

<p>Modificaremos el archivo <code class="language-plaintext highlighter-rouge">/etc/postfix/main.cf</code> para que se ejecute el servicio de <code class="language-plaintext highlighter-rouge">policyd-spf</code> y para que se ejecute el servicio de <code class="language-plaintext highlighter-rouge">opendkim</code>. Con la siguiente sentencia le estaremos indicando a postfix para comprobar el SPF de los correos que recibe.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>policy-spf  unix  -       n       n       -       0       spawn
    <span class="nv">user</span><span class="o">=</span>policyd-spf <span class="nv">argv</span><span class="o">=</span>/usr/bin/policyd-spf
</code></pre></div></div>

<p>Reiniciamos el servicio de postfix y comprobamos que funciona correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart postfix

<span class="nb">tail</span> <span class="nt">-f</span> /var/log/mail.log
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/19.png" alt="19" /></p>

<h3 id="tarea-6">Tarea 6</h3>

<p>Le toca el turno a la protección contra el SPAM. Para ello, vamos a instalar el paquete <code class="language-plaintext highlighter-rouge">spamassassin</code> y habilitaremos el servicio.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>spamassassin spamc <span class="nt">-y</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable</span> <span class="nt">--now</span> spamassassin
</code></pre></div></div>

<p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/default/spamassassin</code> y agregaremos las líneas necesarias para que se actualice la base de datos de spamassassin.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CRON</span><span class="o">=</span>1
</code></pre></div></div>

<p>Y en el fichero <code class="language-plaintext highlighter-rouge">/etc/postfix/master.cf</code> agregaremos la siguiente línea para que el servicio de postfix ejecute el servicio de spamassassin.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smtp      inet  n       -       y       -       -       smtpd
  <span class="nt">-o</span> <span class="nv">content_filter</span><span class="o">=</span>spamassassin
submission inet n       -       y       -       -       smtpd
  <span class="nt">-o</span> <span class="nv">content_filter</span><span class="o">=</span>spamassassin
spamassassin unix -     n       n       -       -       pipe
  <span class="nv">user</span><span class="o">=</span>debian-spamd <span class="nv">argv</span><span class="o">=</span>/usr/bin/spamc <span class="nt">-f</span> <span class="nt">-e</span> /usr/sbin/sendmail <span class="nt">-oi</span> <span class="nt">-f</span> <span class="k">${</span><span class="nv">sender</span><span class="k">}</span> <span class="k">${</span><span class="nv">recipient</span><span class="k">}</span>
</code></pre></div></div>

<p>Y para configurar que los emails que se detecten como SPAM, reciban una etiqueta en el asunto, modificaremos el fichero <code class="language-plaintext highlighter-rouge">/etc/spamassassin/local.cf</code> y descomentamos la siguiente línea.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rewrite_header Subject <span class="k">*****</span>SPAM<span class="k">*****</span>
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/20.png" alt="20" /></p>

<p>Reiniciamos los servicios y comprobamos que funciona correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart postfix spamassassin
</code></pre></div></div>

<p>Comprobaremos que funciona, enviando un correo a nuestro email en nuestro VPS y comprobando que se ha etiquetado como SPAM. Por ello, usaremos <a href="https://spamassassin.apache.org/gtube/">The GTUBE</a> para enviar un correo que se detecte como SPAM.</p>

<p>Comprobando que el email se ha etiquetado como SPAM, miraremos también el log de mail para comprobar que se ha ejecutado el servicio de spamassassin.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tail</span> <span class="nt">-f</span> /var/log/mail.log <span class="nt">-n</span> 26
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/21.png" alt="21" /></p>

<h3 id="tarea-7">Tarea 7</h3>

<p>Nuestro servidor de correo deberá tener antivirus que se encargue de detectar y eliminar los virus que se encuentren en los correos que recibe. Para ello, vamos a instalar el paquete <code class="language-plaintext highlighter-rouge">clamav</code> y habilitaremos el servicio.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>clamsmtp clamav-daemon arc arj bzip2 cabextract lzop nomarch p7zip pax tnef unrar-free unzip <span class="nt">-y</span>

systemctl <span class="nb">enable</span> <span class="nt">--now</span> clamav-daemon
</code></pre></div></div>

<p>El siguiente paso el fichero <code class="language-plaintext highlighter-rouge">/etc/postfix/master.cf</code> y agregaremos la siguiente línea para que el servicio de postfix ejecute el servicio de clamav.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scan unix -       -       n       -       16       smtp
  <span class="nt">-o</span> <span class="nv">smtp_data_done_timeout</span><span class="o">=</span>1200
  <span class="nt">-o</span> <span class="nv">smtp_send_xforward_command</span><span class="o">=</span><span class="nb">yes</span>
  <span class="nt">-o</span> <span class="nv">disable_dns_lookups</span><span class="o">=</span><span class="nb">yes
</span>127.0.0.1:10025 inet n       -       n       -       16       smtpd
  <span class="nt">-o</span> <span class="nv">content_filter</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">local_recipient_maps</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">relay_recipient_maps</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">smtpd_restriction_classes</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">smtpd_client_restrictions</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">smtpd_helo_restrictions</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">smtpd_sender_restrictions</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">smtpd_recipient_restrictions</span><span class="o">=</span>permit_mynetworks,reject
  <span class="nt">-o</span> <span class="nv">mynetworks_style</span><span class="o">=</span>host
  <span class="nt">-o</span> <span class="nv">smtpd_authorized_xforward_hosts</span><span class="o">=</span>127.0.0.0/8
</code></pre></div></div>

<p>Y en el fichero <code class="language-plaintext highlighter-rouge">/etc/postfix/main.cf</code> y le indicamos el socket que usará el servicio de clamav.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>content_filter <span class="o">=</span> scan:127.0.0.1:10026
</code></pre></div></div>

<p>Reconfiguramos <code class="language-plaintext highlighter-rouge">clamav-daemon</code> de forma que le indiquemos los hilos de procesador que usará y el resto de parámetros.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dpkg-reconfigure clamav-daemon
</code></pre></div></div>

<p>Y reiniciamos los servicios.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart postfix clamav-daemon
</code></pre></div></div>

<p><strong>NOTA</strong> : Será normal que <code class="language-plaintext highlighter-rouge">ClamAV</code> tarde un poco en arrancar, ya que tiene que actualizar la base de datos de virus.</p>

<p>Para probarlo, enviaremos un correo con <code class="language-plaintext highlighter-rouge">X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*</code> para probar que se detecta como virus.</p>

<p>Comprobando que el email se ha etiquetado como virus, miraremos también el log de mail para comprobar que se ha ejecutado el servicio de clamav.</p>

<p><img src="/assets/images/correo/correo/22.png" alt="22" /></p>

<h2 id="gestión-de-correos-desde-un-cliente">Gestión de correos desde un cliente</h2>

<h3 id="tarea-8">Tarea 8</h3>

<p>Aquí vamos a configurar el buzón de los usuarios para que puedan acceder a él desde un cliente de correo. Y para ello, el primer paso es modificar la configuración de <code class="language-plaintext highlighter-rouge">postfix</code>, en el fichero <code class="language-plaintext highlighter-rouge">/etc/postfix/main.cf</code> para que use el buzón <code class="language-plaintext highlighter-rouge">Maildir</code> añadiendo al final del fichero <code class="language-plaintext highlighter-rouge">home_mailbox = Maildir/</code>.</p>

<p>Reiniciamos el servicio de postfix y tras esto, la función <code class="language-plaintext highlighter-rouge">mail</code> dejará de funcionar, ya que no encontrará el buzón <code class="language-plaintext highlighter-rouge">Maildir</code> en el directorio <code class="language-plaintext highlighter-rouge">/var/mail</code>. Para ello, instalaremos <code class="language-plaintext highlighter-rouge">mutt</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>mutt <span class="nt">-y</span>
systemctl restart postfix
</code></pre></div></div>

<p>Y configuramos <code class="language-plaintext highlighter-rouge">mutt</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span><span class="nv">mbox_type</span><span class="o">=</span>Maildir
<span class="nb">set </span><span class="nv">mbox</span><span class="o">=</span><span class="s2">"~/Maildir"</span>
<span class="nb">set </span><span class="nv">folder</span><span class="o">=</span><span class="s2">"~/Maildir"</span>
<span class="nb">set </span><span class="nv">spoolfile</span><span class="o">=</span><span class="s2">"~/Maildir"</span>
<span class="nb">set </span><span class="nv">record</span><span class="o">=</span><span class="s2">"+.Sent"</span>
<span class="nb">set </span><span class="nv">postponed</span><span class="o">=</span><span class="s2">"+.Drafts"</span>
<span class="nb">set </span><span class="nv">mask</span><span class="o">=</span><span class="s2">"!^</span><span class="se">\\</span><span class="s2">.[^.]"</span>
</code></pre></div></div>

<p>Para probar que funciona, enviaremos un correo a nuestro buzón y comprobaremos que se ha recibido correctamente.</p>

<p><img src="/assets/images/correo/correo/23.png" alt="23" /></p>

<p><img src="/assets/images/correo/correo/24.png" alt="24" /></p>

<p>Realizado esto, podemos decir que tenemos un buzón de correo funcionando correctamente como <code class="language-plaintext highlighter-rouge">Maildir</code> en vez de <code class="language-plaintext highlighter-rouge">mbox</code>.</p>

<h3 id="tarea-9">Tarea 9</h3>

<p>Vamos a configurar el protocolo IMAP instalando el paquete <code class="language-plaintext highlighter-rouge">dovecot-imapd</code> y habilitaremos el servicio.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>dovecot-imapd <span class="nt">-y</span>
systemctl <span class="nb">enable</span> <span class="nt">--now</span> dovecot
netstat <span class="nt">-tulpn</span> | <span class="nb">grep </span>dovecot
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/25.png" alt="25" /></p>

<p>Paramos nginx para que no interfiera con el puerto 80.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl stop nginx
</code></pre></div></div>

<p>Y generamos un certificado SSL para el servidor de correo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>certbot certonly <span class="nt">--standalone</span> <span class="nt">-d</span> mail.mariatec.es
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/26.png" alt="26" /></p>

<p>Modificamos la configuración de <code class="language-plaintext highlighter-rouge">dovecot</code> en el fichero <code class="language-plaintext highlighter-rouge">/etc/dovecot/dovecot.conf</code> para que use el certificado SSL que hemos generado. Una vez configurado, reiniciamos el servicio y también el servicio de nginx.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssl_cert <span class="o">=</span> &lt;/etc/letsencrypt/live/mail.mariatec.es/fullchain.pem
ssl_key <span class="o">=</span> &lt;/etc/letsencrypt/live/mail.mariatec.es/privkey.pem
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/27.png" alt="27" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart dovecot
systemctl restart nginx
</code></pre></div></div>

<p><strong>INCISO</strong>: Vamos a realizar primero la configuración de postfix para que mande correos desde un cliente remoto, ya que si no, no podremos probar el servicio de IMAP. Después de esto, instalaremos un webmail.</p>

<h3 id="tarea-11">Tarea 11</h3>

<p>Los mismos certificados que hemos generado antes para cifrar los emails enviados y recibidos. Para ello, modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/postfix/main.cf</code> y añadimos las siguientes líneas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smtpd_tls_cert_file <span class="o">=</span> /etc/letsencrypt/live/mail.mariatec.es/fullchain.pem
smtpd_tls_key_file <span class="o">=</span> /etc/letsencrypt/live/mail.mariatec.es/privkey.pem

smtpd_sasl_auth_enable <span class="o">=</span> <span class="nb">yes
</span>smtpd_sasl_type <span class="o">=</span> dovecot
smtpd_sasl_path <span class="o">=</span> private/auth
smtpd_sasl_authenticated_header <span class="o">=</span> <span class="nb">yes
</span>broken_sasl_auth_clients <span class="o">=</span> <span class="nb">yes</span>
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/28.png" alt="28" /></p>

<p>Acto seguido, configuraremos el fichero <code class="language-plaintext highlighter-rouge">master.cf</code> y modificamos la directiva submission para que use el puerto 587 y el fichero <code class="language-plaintext highlighter-rouge">smtpd.conf</code> para que use el puerto 465.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
submission inet n       -       y       -       -       smtpd
  <span class="nt">-o</span> <span class="nv">content_filter</span><span class="o">=</span>spamassassin
  <span class="nt">-o</span> <span class="nv">syslog_name</span><span class="o">=</span>postfix/submission
  <span class="nt">-o</span> <span class="nv">smtpd_tls_security_level</span><span class="o">=</span>encrypt
  <span class="nt">-o</span> <span class="nv">smtpd_sasl_auth_enable</span><span class="o">=</span><span class="nb">yes</span>
  <span class="nt">-o</span> <span class="nv">smtpd_tls_auth_only</span><span class="o">=</span><span class="nb">yes</span>
  <span class="nt">-o</span> <span class="nv">smtpd_reject_unlisted_recipient</span><span class="o">=</span>no
  <span class="nt">-o</span> <span class="nv">smtpd_client_restrictions</span><span class="o">=</span><span class="nv">$mua_client_restrictions</span>
  <span class="nt">-o</span> <span class="nv">smtpd_helo_restrictions</span><span class="o">=</span><span class="nv">$mua_helo_restrictions</span>
  <span class="nt">-o</span> <span class="nv">smtpd_sender_restrictions</span><span class="o">=</span><span class="nv">$mua_sender_restrictions</span>
  <span class="nt">-o</span> <span class="nv">smtpd_recipient_restrictions</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">smtpd_relay_restrictions</span><span class="o">=</span>permit_sasl_authenticated,reject
  <span class="nt">-o</span> <span class="nv">milter_macro_daemon_name</span><span class="o">=</span>ORIGINATING

smtps     inet  n       -       y       -       -       smtpd
  <span class="nt">-o</span> <span class="nv">syslog_name</span><span class="o">=</span>postfix/smtps
  <span class="nt">-o</span> <span class="nv">smtpd_tls_wrappermode</span><span class="o">=</span><span class="nb">yes</span>
  <span class="nt">-o</span> <span class="nv">smtpd_sasl_auth_enable</span><span class="o">=</span><span class="nb">yes</span>
  <span class="nt">-o</span> <span class="nv">smtpd_reject_unlisted_recipient</span><span class="o">=</span>no
  <span class="nt">-o</span> <span class="nv">smtpd_client_restrictions</span><span class="o">=</span><span class="nv">$mua_client_restrictions</span>
  <span class="nt">-o</span> <span class="nv">smtpd_helo_restrictions</span><span class="o">=</span><span class="nv">$mua_helo_restrictions</span>
  <span class="nt">-o</span> <span class="nv">smtpd_sender_restrictions</span><span class="o">=</span><span class="nv">$mua_sender_restrictions</span>
  <span class="nt">-o</span> <span class="nv">smtpd_recipient_restrictions</span><span class="o">=</span>
  <span class="nt">-o</span> <span class="nv">smtpd_relay_restrictions</span><span class="o">=</span>permit_sasl_authenticated,reject
  <span class="nt">-o</span> <span class="nv">milter_macro_daemon_name</span><span class="o">=</span>ORIGINATING
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/29.png" alt="29" /></p>

<p>Ahora, a <code class="language-plaintext highlighter-rouge">dovecot</code>, le indicamos qué debe hacer para autenticarse. Lo haremos en el fichero <code class="language-plaintext highlighter-rouge">/etc/dovecot/conf.d/10-master.conf</code> y añadimos las siguientes líneas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service auth <span class="o">{</span>
  ...
  <span class="c"># Postfix smtp-auth</span>
  unix_listener /var/spool/postfix/private/auth <span class="o">{</span>
    mode <span class="o">=</span> 0666
  <span class="o">}</span>
  ...
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/30.png" alt="30" /></p>

<p>Reiniciamos los servicios y comprobamos que todo funciona correctamente. Deberemos abrir los puertos 465 y 993 en el firewall de nuestro VPS.</p>

<p>Para comprobar que funciona correctamente, he usado <code class="language-plaintext highlighter-rouge">Thunderbird</code>, configuramos el correo y comprobamos que funciona correctamente.</p>

<p><img src="/assets/images/correo/correo/31.png" alt="31" /></p>

<p>Ya podemos decir que los correos están sincronizados correctamente entre el servidor y el cliente. También probaremos que, desde <code class="language-plaintext highlighter-rouge">Thunderbird</code>, podemos enviar un correo a mi cuenta de gmail y que llega correctamente.</p>

<p><img src="/assets/images/correo/correo/32.png" alt="32" /></p>

<p>También vamos a probar que podemos responder al email y que se sincronizan correctamente los emails de mi servidor y los emailsdel cliente de correo.</p>

<p><img src="/assets/images/correo/correo/33.png" alt="33" /></p>

<h3 id="tarea-10">Tarea 10</h3>

<p>Ha llegado la hora de instalar un webmail. Para ello, vamos a instalar <code class="language-plaintext highlighter-rouge">Roundcube</code>. Para ello, prepararemos el VPS para que pueda instalar <code class="language-plaintext highlighter-rouge">Roundcube</code> y sus dependencias.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>docker.io
</code></pre></div></div>

<p>Agregaremos un registro CNAME en nuestro DNS para que el dominio <code class="language-plaintext highlighter-rouge">webmail.mariatec.es</code> apunte a la IP del servidor.</p>

<p>🔲 webmail.mariatec.es     CNAME      mariatec.es</p>

<p>Le toca el turno a roundcube y a su configuración, y para eso empezaremos por crear un directorio en el depositaremos los ficheros de configuración de <code class="language-plaintext highlighter-rouge">Roundcube</code> y lo estrenaremos creando el fichero <code class="language-plaintext highlighter-rouge">custom.inc.php</code> que contendrá la configuración de la base de datos.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /root/config-roundcube

nano /root/configs-roundcube/custom.inc.php
</code></pre></div></div>

<p>Dentro del fichero, añadiremos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php
<span class="nv">$config</span><span class="o">[</span><span class="s1">'mail_domain'</span><span class="o">]</span> <span class="o">=</span> array<span class="o">(</span>
    <span class="s1">'mail.mariatec.es'</span> <span class="o">=&gt;</span> <span class="s1">'mariatec.es'</span>
<span class="o">)</span><span class="p">;</span>
?&gt;
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/34.png" alt="34" /></p>

<p>Echamos a andar el contenedor de docker donde tenemos la aplicación de <code class="language-plaintext highlighter-rouge">Roundcube</code> y le pasamos los parámetros necesarios para que funcione correctamente.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-v</span> /root/config-roundcube/:/var/roundcube/config/ <span class="nt">-e</span> <span class="nv">ROUNDCUBEMAIL_DEFAULT_HOST</span><span class="o">=</span>ssl://mail.mariatec.es <span class="nt">-e</span> <span class="nv">ROUNDCUBEMAIL_SMTP_SERVER</span><span class="o">=</span>ssl://mail.mariatec.es <span class="nt">-e</span> <span class="nv">ROUNDCUBEMAIL_SMTP_PORT</span><span class="o">=</span>465 <span class="nt">-e</span> <span class="nv">ROUNDCUBEMAIL_DEFAULT_PORT</span><span class="o">=</span>993 <span class="nt">-p</span> 8001:80 <span class="nt">-d</span> roundcube/roundcubemail
</code></pre></div></div>

<p>Y en la siguiente imagen podemos ver como el contenedor se ha levantado correctamente.</p>

<p><img src="/assets/images/correo/correo/35.png" alt="35" /></p>

<p>Paramos de nuevo <code class="language-plaintext highlighter-rouge">Nginx</code> y creamos un certificado para el dominio <code class="language-plaintext highlighter-rouge">webmail.mariatec.es</code> y lo instalamos en el servidor.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl stop nginx

certbot certonly <span class="nt">--standalone</span> <span class="nt">-d</span> webmail.mariatec.es
</code></pre></div></div>

<p>Ya terminada toda la configuración anterior, tendremos que crear un VirtualHost para <code class="language-plaintext highlighter-rouge">Nginx</code> que redirija las peticiones a <code class="language-plaintext highlighter-rouge">Roundcube</code> y que esté protegido por <code class="language-plaintext highlighter-rouge">Let's Encrypt</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/nginx/sites-available/webmail.mariatec.es
</code></pre></div></div>

<p>Dentro del fichero, añadiremos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
        listen 80<span class="p">;</span>
        listen <span class="o">[</span>::]:80<span class="p">;</span>

        server_name webmail.mariatec.es<span class="p">;</span>

        <span class="k">return </span>301 https://<span class="nv">$host$request_uri</span><span class="p">;</span>
<span class="o">}</span>

server <span class="o">{</span>
        listen 443 ssl http2<span class="p">;</span>
        listen <span class="o">[</span>::]:443 ssl http2<span class="p">;</span>

        ssl    on<span class="p">;</span>
        ssl_certificate /etc/letsencrypt/live/webmail.mariatec.es/fullchain.pem<span class="p">;</span>
        ssl_certificate_key     /etc/letsencrypt/live/webmail.mariatec.es/privkey.pem<span class="p">;</span>

        index index.html index.php index.htm index.nginx-debian.html<span class="p">;</span>

        server_name webmail.mariatec.es<span class="p">;</span>

        location / <span class="o">{</span>
                proxy_pass http://localhost:8001<span class="p">;</span>
                include proxy_params<span class="p">;</span>
        <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Para que esté habilitado el VirtualHost, tendremos que crear un enlace simbólico en <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code> y reiniciar el servicio de <code class="language-plaintext highlighter-rouge">Nginx</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/webmail.mariatec.es /etc/nginx/sites-enabled/webmail.mariatec.es

systemctl restart nginx
</code></pre></div></div>

<p><img src="/assets/images/correo/correo/36.png" alt="36" /></p>

<p>Ahora, ya podemos acceder a <code class="language-plaintext highlighter-rouge">Roundcube</code> desde el navegador.</p>

<p><img src="/assets/images/correo/correo/37.png" alt="37" /></p>

<p><img src="/assets/images/correo/correo/38.png" alt="38" /></p>

<p>Hacemos una prueba de envío de correo desde <code class="language-plaintext highlighter-rouge">Roundcube</code> y comprobamos que funciona correctamente.</p>

<p><img src="/assets/images/correo/correo/39.png" alt="39" /></p>

<p>En gmail podemos verificar que el correo ha llegado correctamente.</p>

<p><img src="/assets/images/correo/correo/40.png" alt="40" /></p>

<h3 id="tarea-12">Tarea 12</h3>

<p>En la tarea 10 ya hemos comprobado que ya hemos podido enviar y recibir correos desde el servidor de correo. Ahora, vamos a comprobar que el servidor de correo funciona correctamente y que podemos enviar y recibir correos desde el servidor.</p>

<h2 id="comprobación-final">Comprobación final</h2>

<h3 id="tarea-13">Tarea 13</h3>

<p>Última tarea, comprobación final. Para ello, vamos a comprobar que el servidor de correo funciona correctamente y que podemos enviar y recibir correos desde el servidor. Comprobaremos con un correo generado por <a href="https://www.mail-tester.com/">mail-tester.com</a> y que, con la puntuación que nos da, podemos ver que el servidor de correo funciona correctamente.</p>

<p>Para ello, modificaremos nuestro DNS y añadiremos un registro TXT con el valor que nos da <code class="language-plaintext highlighter-rouge">mail-tester.com</code> y que nos permitirá que el servidor de correo sea verificado por <code class="language-plaintext highlighter-rouge">mail-tester.com</code>.</p>

<p>🔲 _dmarc.mariatec.es     TXT      v=DMARC1; p=none;</p>

<p><img src="/assets/images/correo/correo/41.png" alt="41" /></p>

<p><img src="/assets/images/correo/correo/42.png" alt="42" /></p>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Introducción]]></summary></entry><entry><title type="html">Taller de Almacenamiento - Gestión de pool de almacenamiento lógico en KVM-libvirt</title><link href="/hlc+sri/2023/01/21/almacenamiento.html" rel="alternate" type="text/html" title="Taller de Almacenamiento - Gestión de pool de almacenamiento lógico en KVM-libvirt" /><published>2023-01-21T12:47:17+01:00</published><updated>2023-01-21T12:47:17+01:00</updated><id>/hlc+sri/2023/01/21/almacenamiento</id><content type="html" xml:base="/hlc+sri/2023/01/21/almacenamiento.html"><![CDATA[<h2 id="taller-1-gestión-de-pool-de-almacenamiento-lógico-en-kvmlibvirt">Taller 1: Gestión de pool de almacenamiento lógico en KVM/libvirt</h2>

<ol>
  <li>Vamos a crear un pool de almacenamiento lógico. Para ello, lo más fácil, es tener un grupo de volúmenes con espacio libre.</li>
</ol>

<ul>
  <li>
    <p>Listamos los grupos de volúmenes.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vgs
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/1.png" alt="1" /></p>
  </li>
  <li>
    <p>Creamos un pool de almacenamiento lógico.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  virsh <span class="nt">-c</span> qemu:///system pool-define-as <span class="nt">--name</span> pool-t1 <span class="nt">--type</span> logical <span class="nt">--source-name</span> debian
</code></pre></div>    </div>
  </li>
  <li>
    <p>Activamos el pool.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  virsh <span class="nt">-c</span> qemu:///system pool-start pool-t1
  virsh <span class="nt">-c</span> qemu:///system pool-autostart pool-t1
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/2.png" alt="2" /></p>
  </li>
</ul>

<ol>
  <li>
    <p>Ahora vamos a crear un volumen dentro de ese pool.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> virsh <span class="nt">-c</span> qemu:///system vol-create-as <span class="nt">--pool</span> pool-t1 <span class="nt">--name</span> vol1 <span class="nt">--capacity</span> 5G <span class="nt">--format</span> qcow2
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Ahora, usaremos <code class="language-plaintext highlighter-rouge">virt-install</code>para crear ua máquina virtual cuyo disco corresponda al volumen que hemos creado anteriormente.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> virt-install <span class="nt">--connect</span> qemu:///system <span class="se">\</span>
 <span class="nt">--virt-type</span> kvm <span class="se">\</span>
 <span class="nt">--name</span> taller1 <span class="se">\</span>
 <span class="nt">--cdrom</span> ~/Documentos/ISO/debian-11.5.0-amd64-netinst.iso <span class="se">\</span>
 <span class="nt">--os-variant</span> debian10 <span class="se">\</span>
 <span class="nt">--disk</span><span class="o">=</span>/dev/mapper/debian-vol1 <span class="se">\</span>
 <span class="nt">--memory</span> 2048 <span class="se">\</span>
 <span class="nt">--network</span> <span class="nv">network</span><span class="o">=</span>default <span class="se">\</span>
 <span class="nt">--vcpus</span> 1
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Una vez que la máquina esté funcionando, creamos un nuevo volumen y lo añadimos a la máquina.</p>

    <ul>
      <li>Iniciamos la máquina.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> virsh <span class="nt">-c</span> qemu:///system start taller1
</code></pre></div>    </div>

    <ul>
      <li>Creamos un nuevo volumen.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> virsh <span class="nt">-c</span> qemu:///system vol-create-as <span class="nt">--pool</span> pool-t1 <span class="nt">--name</span> vol2 <span class="nt">--capacity</span> 5G <span class="nt">--format</span> qcow2
</code></pre></div>    </div>

    <ul>
      <li>Añadimos el nuevo volumen a la máquina.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> virsh <span class="nt">-c</span> qemu:///system attach-disk taller1 /dev/mapper/debian-vol2 vdb <span class="nt">--targetbus</span> virtio <span class="nt">--persistent</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/5.png" alt="5" /></p>

    <p><img src="/assets/images/almacenamiento/taller1/6.png" alt="6" /></p>
  </li>
  <li>
    <p>Apagamos la máquina, montamos la partición del disco de la máquina en nuestro anfitrión para acceder al sistema de archivos.</p>

    <ul>
      <li>Apagamos la máquina.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> virsh <span class="nt">-c</span> qemu:///system shutdown taller1
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/7.png" alt="7" /></p>

    <ul>
      <li>Montamos la partición del disco de la máquina en nuestro anfitrión para acceder al sistema de archivos.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kpartx <span class="nt">-va</span> /dev/mapper/debian-vol1

 mount /dev/mapper/debian-vol1p1 /mnt/taller1

 <span class="nb">ls</span> <span class="nt">-Shail</span> /mnt/taller1
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/8.png" alt="8" /></p>
  </li>
</ol>

<h2 id="extra">Extra</h2>

<p>Vamos a desmontar la partición del disco de la máquina y a eliminar el volumen.</p>

<ul>
  <li>
    <p>Desmontamos la partición del disco de la máquina.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  umount /mnt/taller1
</code></pre></div>    </div>
  </li>
  <li>
    <p>Borramos las particiones del volumen que hemos mapeado</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kpartx <span class="nt">-dv</span> /dev/mapper/debian-vol1
</code></pre></div>    </div>

    <p><img src="/assets/images/almacenamiento/taller1/9.png" alt="9" /></p>
  </li>
</ul>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Taller 1: Gestión de pool de almacenamiento lógico en KVM/libvirt]]></summary></entry></feed>