<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-01-09T20:24:05+01:00</updated><id>/feed.xml</id><title type="html">sysmaria</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Certificados digitales. HTTPS</title><link href="/seguridad/2023/01/02/Criptograf%C3%ADa3.html" rel="alternate" type="text/html" title="Certificados digitales. HTTPS" /><published>2023-01-02T16:45:16+01:00</published><updated>2023-01-02T16:45:16+01:00</updated><id>/seguridad/2023/01/02/Criptograf%C3%ADa3</id><content type="html" xml:base="/seguridad/2023/01/02/Criptograf%C3%ADa3.html"><![CDATA[<h2 id="certificado-digital-de-persona-física">Certificado digital de persona física</h2>

<p><img src="/assets/images/certificado/cert.png" alt="certificado" /></p>

<p>Un certificado digital es un documento electrónico que contiene información sobre la identidad de una persona física o jurídica, y que se utiliza para firmar documentos electrónicos. El certificado digital contiene información sobre la persona que lo solicita, como su nombre, apellidos, DNI, fecha de nacimiento, etc. Además, contiene información sobre la entidad que lo emite, como el nombre de la entidad, el CIF, la dirección, etc.</p>

<h3 id="tarea-1-instalación-del-certificado">Tarea 1: Instalación del certificado</h3>

<p><strong>NOTA</strong>: Para solicitar el certificado, podemos hacerlo a través de una acreditación presencial en una oficina de la FNMT o usando el DNI electrónico.</p>

<ol>
  <li>
    <p>Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito.</p>

    <ul>
      <li>
        <p>Instalamos el certificado en el navegador. Para ello, accedemos a la página de la FNMT y descargamos el certificado. Nos pedirá nuestro DNI, nuestro primer apellido y un código de validación que nos han mandado a nuestro correo, con el que hemos solicitado el certificado. Una vez descargado, lo instalamos en el navegador.</p>

        <p><img src="/assets/images/certificado/1.png" alt="1" /></p>
      </li>
      <li>
        <p>A continuación, tras aceptar los términos y condiciones, nos pedirá que introduzcamos la contraseña que hemos establecido al solicitar el certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo.</p>

        <p><img src="/assets/images/certificado/2.png" alt="2" /></p>
      </li>
      <li>
        <p>Tras la descarga, nos preguntará si queremos crear una copia de seguridad del certificado.</p>

        <p><img src="/assets/images/certificado/3.png" alt="3" /></p>
      </li>
      <li>
        <p>Finalmente, nos confirmará que la copia de seguridad se ha realizado correctamente.</p>

        <p><img src="/assets/images/certificado/4.png" alt="4" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Muestra una captura de pantalla donde se vea las preferencias del navegador donde se ve instalado tu certificado.</p>

    <ul>
      <li>Para ver las preferencias del navegador, accedemos a <code class="language-plaintext highlighter-rouge">Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados</code>. Se abrirá una ventana con todos los certificados instalados en nuestro navegador. En ella, podemos ver el certificado que hemos instalado.</li>
    </ul>

    <p><img src="/assets/images/certificado/5.png" alt="5" /></p>
  </li>
  <li>
    <p>¿Cómo puedes hacer una copia de tu certificado?¿Como vas a realizar la copia de seguridad de tu certificado?. Razona la respuesta.</p>

    <ul>
      <li>Para hacer una copia de seguridad de nuestro certificado, debemos dirigirnos a <code class="language-plaintext highlighter-rouge">Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados</code>. Se nos abrirá la misma ventana de la imagen anterior. Clicamos en el certificado que queremos hacer una copia de seguridad y pulsamos en “Hacer copia”. Se nos abrirá una ventana en la que nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos una contraseña para proteger nuestra copia de seguridad. Finalmente, tendremos nuestra copia de seguridad.</li>
    </ul>

    <p>En mi caso, he almacenado mi clave en un NAS privado, en un directorio cifrado con clave alfanumérica. De esta forma, si alguien accede a mi NAS, no podrá acceder a mi clave privada, ya que no conoce la clave de cifrado.</p>

    <p><img src="/assets/images/certificado/6.png" alt="6" /></p>
  </li>
  <li>
    <p>Investiga como exportar la clave pública de tu certificado.</p>

    <ul>
      <li>
        <p>Con la copia de seguridad que tenemos de nuestra clave, y en mi caso, teniendo acceso a mi NAS, tanto en local como por VPN, puedo exportar mi clave a otros dispositivos. En mi caso, he exportado mi clave a mi móvil, (teniedo este sistema operativo iOS).</p>
      </li>
      <li>
        <p>Para la comprobación, he instalado la aplicación de la DGT y poder tener mi documentación en mi dispositivo móvil.</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="tarea-2-validación-del-certificado">Tarea 2: Validación del certificado</h3>

<ol>
  <li>
    <p>Instala en tu ordenador el software autofirma y desde la página de VALIDe valida tu certificado. Muestra capturas de pantalla donde se comprueba la validación.</p>

    <ul>
      <li>
        <p>Para instalar autofirma, debemos dirigirnos a la página de autofirma y descargar el instalador. Una vez descargado, lo instalamos en nuestro ordenador.</p>
      </li>
      <li>
        <p>Una vez instalado, abrimos la aplicación y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo.</p>
      </li>
      <li>
        <p>Ingresamos en la página de VALIDe y seleccionamos la opción de <code class="language-plaintext highlighter-rouge">Validar Certificado</code></p>

        <p><img src="/assets/images/certificado/7.png" alt="7" /></p>
      </li>
      <li>
        <p>Al ser la primera vez, autorizamos a autofirma a acceder a nuestra clave privada.</p>

        <p><img src="/assets/images/certificado/8.png" alt="8" /></p>
      </li>
      <li>
        <p>Elegimos la clave que queremos validar, escribimos el captcha y pulsamos en <code class="language-plaintext highlighter-rouge">Validar</code></p>

        <p><img src="/assets/images/certificado/9.png" alt="9" /></p>
      </li>
      <li>
        <p>Como podemos ver, la clave es válida.</p>

        <p><img src="/assets/images/certificado/10.png" alt="10" /></p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="preparando-el-entorno-de-trabajo-en-debian">Preparando el entorno de trabajo en Debian</h3>

<p>Como anteriormente he realizado los ejercicios en Windows, a partir de ahora vamos a realizarlo desde Debian. Para ello, <code class="language-plaintext highlighter-rouge">sudo apt install libnss3-tools</code> para instalar Java y las herramientas de Mozilla. Una vez instalado, ejecutamos el fichero <code class="language-plaintext highlighter-rouge">.deb</code> de autofirma y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo.</p>

<h3 id="tarea-3-firma-electrónica">Tarea 3: Firma electrónica</h3>

<ol>
  <li>
    <p>Utilizando la página VALIDe y el programa autofirma, firma un documento con tu certificado y envíalo por correo a un compañero.</p>

    <ul>
      <li>
        <p>Creamos dos documentos de texto: uno para la comprobación de la página VALIDe y otro para la aplicación de autofirma.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hola. Soy Maria. Esto es una prueba de VALIDe."</span> <span class="o">&gt;</span> valide.txt
  <span class="nb">echo</span> <span class="s2">"Hola. Soy Maria. Esto es una prueba de autofirma."</span> <span class="o">&gt;</span> autofirma.txt
</code></pre></div>        </div>
      </li>
      <li>
        <p>Una vez creados los documentos, los firmamos, uno con VALIDe y otro con autofirma.</p>

        <p><img src="/assets/images/certificado/11.png" alt="11" /></p>

        <p><img src="/assets/images/certificado/12.png" alt="12" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Tu debes recibir otro documento firmado por un compañero y utilizando las herramientas anteriores debes visualizar la firma <code class="language-plaintext highlighter-rouge">Visualizar Firma</code> y <code class="language-plaintext highlighter-rouge">Verificar Firma</code>.</p>

    <ul>
      <li>¿Puedes verificar la firma aunque no tengas la clave pública de tu compañero?
        <ul>
          <li>Si,debido a que la clave pública de mi compañero se adjunta en el fichero ya firmado, por lo que puedo verificar la firma.</li>
        </ul>
      </li>
      <li>¿Es necesario estar conectado a internet para hacer la validación de la firma?. Razona tus respuestas.
        <ul>
          <li>Para VALIDe si que es necesario estar conectado a internet, ya que es una página web. Para autofirma, no es necesario estar conectado a internet, ya que es una aplicación que se ejecuta en nuestro ordenador.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Entre dos compañeros, firmar los dos un documento, verificar la firma para comprobar que está firmado por los dos.</p>

    <p><img src="/assets/images/certificado/13.png" alt="13" /></p>

    <p><img src="/assets/images/certificado/14.png" alt="14" /></p>
  </li>
</ol>

<h3 id="tarea-4-autenticación">Tarea 4: Autenticación</h3>

<ol>
  <li>
    <p>Utilizando tu certificado accede a alguna página de la administración pública (cita médica, becas, puntos del carnet,…). Entrega capturas de pantalla donde se demuestre el acceso a ellas.</p>

    <ul>
      <li>
        <p>Accedemos a la web de la <a href="https://www.dgt.es/nuestros-servicios/permisos-de-conducir/tus-puntos-y-tus-permisos/consulta-y-certificado-de-puntos/">DGT</a> para verificar el funcionamiento de nuestro certificado digital accediendo a nuestro historial de puntos.</p>

        <p><img src="/assets/images/certificado/dgt1.png" alt="dgt" /></p>
      </li>
      <li>
        <p>Nos redigirá a una página donde podremos elegir entre los distintos tipos de acceso y elegimos <code class="language-plaintext highlighter-rouge">Cl@ave</code>.</p>

        <p><img src="/assets/images/certificado/dgt2.png" alt="dgt2" /></p>
      </li>
      <li>
        <p>El navegador, en mi caso, requiere de la aplicación de autofirma para poder acceder a la contraseña. Una vez introducida, nos redirige a la página de la DGT donde podemos ver nuestro historial de puntos.</p>

        <p><img src="/assets/images/certificado/dgt3.png" alt="dgt3" /></p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="https--ssl">HTTPS / SSL</h2>

<p><img src="/assets/images/certificado/https.png" alt="https" /></p>

<p><strong>NOTA</strong>: Vamos a realizar esta práctica en una web que se acceda con el nombre <code class="language-plaintext highlighter-rouge">maria.iesgn.org</code>.</p>

<p>Para realizar esta tarea, vamos a necesitar la colaboración de un compañero, ya que fimraré una Autoridad Certificadora y mi compañero la firmará, y viceversa.</p>

<p>Para ello, podemos hacer uso de los siguientes enlaces para buscar más información:</p>

<ul>
  <li><a href="https://www.phildev.net/ssl/">Phil’s X509/SSL Guide</a></li>
  <li><a href="https://gist.github.com/Soarez/9688998">How to setup your own CA with OpenSSL</a></li>
  <li><a href="https://blog.guillen.io/2018/09/29/crear-autoridad-certificadora-ca-y-certificados-autofirmados-en-linux/">Crear autoridad certificadora (CA) y certificados autofirmados en Linux</a></li>
</ul>

<h3 id="creamos-la-autoridad-certificadora">Creamos la Autoridad certificadora</h3>

<ol>
  <li>
    <p>Crear su autoridad certificadora (generar el certificado digital de la CA). Mostrar el fichero de configuración de la AC.</p>

    <ul>
      <li>
        <p>Creamos el directorio donde alojaremos todo lo necesario para la CA, dándole los permisos necesarios.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir </span>CA
  <span class="nb">cd </span>CA
  <span class="nb">mkdir </span>certs csr crl newcerts private 
  <span class="nb">chmod </span>700 private
  <span class="nb">touch </span>index.txt
  <span class="nb">touch </span>index.txt.attr
  <span class="nb">echo </span>1000 <span class="o">&gt;</span> serial
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos las variables de entorno donde definiremos los datos de configuración de la CA.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">countryName_default</span><span class="o">=</span><span class="s2">"ES"</span>
  <span class="nv">stateOrProvinceName_default</span><span class="o">=</span><span class="s2">"Sevilla"</span>
  <span class="nv">localityName_default</span><span class="o">=</span><span class="s2">"Dos Hermanas"</span>
  <span class="nv">organizationName_default</span><span class="o">=</span><span class="s2">"Maria"</span>
  <span class="nv">organizationalUnitName_default</span><span class="o">=</span><span class="s2">"ASIR2"</span>
  <span class="nv">emailAddress_default</span><span class="o">=</span><span class="s2">"mariajesus.alloza@outlook.es"</span>
  <span class="nv">DIR_CA</span><span class="o">=</span><span class="s2">"./"</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos el fichero de configuración.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">&gt;</span><span class="nv">$DIR_CA</span><span class="sh">/openssl.conf
  [ ca ]
  # man ca
  default_ca = CA_default

  [ CA_default ]
  # Directory and file locations.
  dir               = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">
  certs             = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">certs
  crl_dir           = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">crl
  new_certs_dir     = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">newcerts
  database          = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">index.txt
  serial            = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">serial
  RANDFILE          = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">private/.rand

  # The root key and root certificate.
  private_key       = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">private/private.key
  certificate       = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">certs/cacert.crt

  # For certificate revocation lists.
  crlnumber         = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">crlnumber
  crl               = </span><span class="k">${</span><span class="nv">DIR_CA</span><span class="k">}</span><span class="sh">crl/ca.crl.pem
  crl_extensions    = crl_ext
  default_crl_days  = 30

  # SHA-1 is deprecated, so use SHA-2 instead.
  default_md        = sha256

  name_opt          = ca_default
  cert_opt          = ca_default
  default_days      = 375
  preserve          = no
  policy            = policy_strict

  [ policy_strict ]
  # The root CA should only sign intermediate certificates that match.
  # See the POLICY FORMAT section of man ca.
  countryName             = match
  stateOrProvinceName     = match
  organizationName        = match
  organizationalUnitName  = optional
  commonName              = supplied
  emailAddress            = optional

  [ policy_loose ]
  # Allow the intermediate CA to sign a more diverse range of certificates.
  # See the POLICY FORMAT section of the ca man page.
  countryName             = optional
  stateOrProvinceName     = optional
  localityName            = optional
  organizationName        = optional
  organizationalUnitName  = optional
  commonName              = supplied
  emailAddress            = optional

  [ req ]
  # Options for the req tool (man req).
  default_bits        = 2048
  distinguished_name  = req_distinguished_name
  string_mask         = utf8only
  # SHA-1 is deprecated, so use SHA-2 instead.
  default_md          = sha256
  # Extension to add when the -x509 option is used.
  x509_extensions     = v3_ca
  # Extension for SANs
  req_extensions      = v3_req

  [ v3_req ]
  # Extensions to add to a certificate request
  # Before invoke openssl use: export SAN=DNS:value1,DNS:value2
  basicConstraints = CA:FALSE
  keyUsage = nonRepudiation, digitalSignature, keyEncipherment
  xxxsubjectAltNamexxx =

  [ req_distinguished_name ]
  # See &lt;https://en.wikipedia.org/wiki/Certificate_signing_request&gt;.
  countryName                     = Country Name (2 letter code)
  stateOrProvinceName             = State or Province Name
  localityName                    = Locality Name
  0.organizationName              = Organization Name
  organizationalUnitName          = Organizational Unit Name
  commonName                      = Common Name
  emailAddress                    = Email Address

  # Optionally, specify some defaults.
  countryName_default             = </span><span class="nv">$countryName_default</span><span class="sh">
  stateOrProvinceName_default     = </span><span class="nv">$stateOrProvinceName_default</span><span class="sh">
  localityName_default            = </span><span class="nv">$localityName_default</span><span class="sh">
  0.organizationName_default      = </span><span class="nv">$organizationName_default</span><span class="sh">
  organizationalUnitName_default  = </span><span class="nv">$organizationalUnitName_default</span><span class="sh">
  emailAddress_default            = </span><span class="nv">$emailAddress_default</span><span class="sh">

  [ v3_ca ]
  # Extensions for a typical CA (man x509v3_config).
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = critical, CA:true
  keyUsage = critical, digitalSignature, cRLSign, keyCertSign

  [ v3_intermediate_ca ]
  # Extensions for a typical intermediate CA (man x509v3_config).
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = critical, CA:true, pathlen:0
  keyUsage = critical, digitalSignature, cRLSign, keyCertSign

  [ usr_cert ]
  # Extensions for client certificates (man x509v3_config).
  basicConstraints = CA:FALSE
  nsCertType = client, email
  nsComment = "OpenSSL Generated Client Certificate"
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid,issuer
  keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
  extendedKeyUsage = clientAuth, emailProtection

  [ server_cert ]
  # Extensions for server certificates (man x509v3_config).
  basicConstraints = CA:FALSE
  nsCertType = server
  nsComment = "OpenSSL Generated Server Certificate"
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid,issuer:always
  keyUsage = critical, digitalSignature, keyEncipherment
  extendedKeyUsage = serverAuth

  [ crl_ext ]
  # Extension for CRLs (man x509v3_config).
  authorityKeyIdentifier=keyid:always

  [ ocsp ]
  # Extension for OCSP signing certificates (man ocsp).
  basicConstraints = CA:FALSE
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid,issuer
  keyUsage = critical, digitalSignature
  extendedKeyUsage = critical, OCSPSigning
</span><span class="no">  EOF
</span></code></pre></div>        </div>

        <ul>
          <li>Creamos tanto la clavecomoel certificado de a AC (autoridad de certificación) con el siguiente comando:</li>
        </ul>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">#Creación de la clave</span>
  openssl genrsa <span class="nt">-aes256</span> <span class="nt">-out</span> private/private.key 4096
  <span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s|xxxsubjectAltNamexxx =|subjectAltName = ${ENV::SAN}|g'</span> openssl.conf
  <span class="nv">URL</span><span class="o">=</span>juanjesus.iesgn.org
  <span class="nb">export </span><span class="nv">SAN</span><span class="o">=</span>DNS:<span class="nv">$URL</span>
        
  <span class="c">#Creación del certificado</span>
  openssl req <span class="nt">-config</span> openssl.conf <span class="nt">-key</span> private/private.key <span class="nt">-new</span> <span class="nt">-x509</span> <span class="nt">-days</span> 3650 <span class="nt">-sha256</span> <span class="nt">-extensions</span> v3_ca <span class="nt">-out</span> certs/cacert.crt
  <span class="nb">chmod </span>444 certs/cacert.crt
    
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Debe recibir el fichero CSR (Solicitud de Firmar un Certificado) de su compañero, debe firmarlo y enviar el certificado generado a su compañero.</p>

    <ul>
      <li>Mi compañero me envía mir fichero CSR, lo firmo y lo envío de vuelta.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">#Firmar el certificado</span>
 openssl ca <span class="nt">-config</span> openssl.conf <span class="nt">-extensions</span> v3_req <span class="nt">-days</span> 3650 <span class="nt">-notext</span> <span class="nt">-md</span> sha256 <span class="nt">-in</span> csr/juanjesus-mjca.csr <span class="nt">-out</span> certs/juanjesus-mjca.crt
</code></pre></div>    </div>
  </li>
  <li>
    <p>¿Qué otra información debes aportar a tu compañero para que éste configure de forma adecuada su servidor web con el certificado generado?</p>

    <ul>
      <li>Dentro de nuestro fichero <code class="language-plaintext highlighter-rouge">openssl.conf</code> nos encontraremos con los datos que nuestro compañero debe rellenar para configurar su servidor web, que son:
        <ul>
          <li><code class="language-plaintext highlighter-rouge">countryName</code></li>
          <li><code class="language-plaintext highlighter-rouge">stateOrProvinceName</code></li>
          <li><code class="language-plaintext highlighter-rouge">localityName</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="administramos-el-servidor-web">Administramos el servidor web</h3>

<h4 id="preparando-el-escenario">Preparando el escenario</h4>

<p>Para realizar este punto, deberemos crear un servidor apache, y configurarlo para que nos sirva una página web con https. Para ello, deberemos seguir los siguientes pasos:</p>

<ul>
  <li>
    <p>Instalamos el servidor apache:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>apache2
</code></pre></div>    </div>
  </li>
  <li>
    <p>Deshabilitamos el virtual host por defecto:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>a2dissite 000-default.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos un nuevo virtual host y su fichero de configuración:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo mkdir</span> /var/www/html/maria.iesgn.org
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos el fichero <code class="language-plaintext highlighter-rouge">index.html</code> dentro de la carpeta que hemos creado anteriormente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /var/www/html/maria.iesgn.org/index.html
</code></pre></div>    </div>
    <ul>
      <li>
        <p>Y dentro de este fichero, escribimos lo siguiente:</p>

        <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;!DOCTYPE html&gt;</span>
      <span class="nt">&lt;html&gt;</span>
          <span class="nt">&lt;head&gt;</span>
          <span class="nt">&lt;title&gt;</span>maria.iesgn.org<span class="nt">&lt;/title&gt;</span>
          <span class="nt">&lt;/head&gt;</span>
      <span class="nt">&lt;body&gt;</span>
          <span class="nt">&lt;h1&gt;</span>maria.iesgn.org<span class="nt">&lt;/h1&gt;</span>
          <span class="nt">&lt;p&gt;</span>Web de prueba para cripto 3 - HTTPS<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/body&gt;</span>
  <span class="nt">&lt;/html&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Habilitamos el nuevo virtual host y reiniciamos el servicio apache:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>a2ensite maria.iesgn.org.conf
  <span class="nb">sudo </span>systemctl restart apache2
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="empezamos">Empezamos</h4>

<ol>
  <li>
    <p>Crea una clave privada RSA de 4096 bits para identificar el servidor.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>openssl genrsa <span class="nt">-aes256</span> <span class="nt">-out</span> /etc/ssl/private/maria-priv.key 4096
 <span class="nb">sudo chmod </span>400 /etc/ssl/private/maria-priv.key
</code></pre></div>    </div>
  </li>
  <li>
    <p>Utiliza la clave anterior para generar un CSR, considerando que deseas acceder al servidor con el FQDN (<code class="language-plaintext highlighter-rouge">maria.iesgn.org</code>).</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>openssl req <span class="nt">-new</span> <span class="nt">-sha256</span> <span class="nt">-key</span> /etc/ssl/private/maria-priv.key <span class="nt">-out</span> maria.csr
</code></pre></div>    </div>
  </li>
  <li>
    <p>Envía la solicitud de firma a la entidad certificadora (su compañero). Recibe como respuesta un certificado X.509 para el servidor firmado y el certificado de la autoridad certificadora.</p>
  </li>
  <li>
    <p>Configura tu servidor web con https en el puerto 443, haciendo que las peticiones http se redireccionen a https (forzar https).</p>

    <ul>
      <li>
        <p>Modificamos el fichero de configuración:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;IfModule mod_ssl.c&gt;
      &lt;VirtualHost <span class="k">*</span>:443&gt;
          ServerName maria.iesgn.org
          DocumentRoot /var/www/html/maria.iesgn.org
          ErrorLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/error-maria.log
          CustomLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/access-maria.log combined

          SSLEngine on
          SSLCertificateFile /etc/ssl/certs/maria.crt
          SSLCertificateKeyFile /etc/ssl/private/maria-priv.key
          SSLCertificateChainFile /etc/ssl/certs/cacert.crt

          &lt;Directory /var/www/html/maria.iesgn.org&gt;
              Options Indexes FollowSymLinks
              AllowOverride None
              Require all granted
          &lt;/Directory&gt;
      &lt;/VirtualHost&gt;
  &lt;/IfModule&gt;
</code></pre></div>        </div>
      </li>
      <li>
        <p>Movemos los ficheros que hemos generado a la carpeta <code class="language-plaintext highlighter-rouge">/etc/ssl/certs</code> y le proporcionamos los permisos necesarios:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo mv </span>maria.crt /etc/ssl/certs/
  <span class="nb">sudo mv </span>cacert.crt /etc/ssl/certs/
  <span class="nb">sudo chown </span>root:root /etc/ssl/certs/maria.crt
  <span class="nb">sudo chown </span>root:root /etc/ssl/certs/cacert.crt
  <span class="nb">sudo chmod </span>644 /etc/ssl/certs/maria.crt
  <span class="nb">sudo chmod </span>644 /etc/ssl/certs/cacert.crt
</code></pre></div>        </div>
      </li>
      <li>
        <p>Habilitamos el módulo ssl y reiniciamos el servicio apache:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>a2enmod ssl
  <span class="nb">sudo </span>a2ensite ssl-maria.iesgn.org.conf
  <span class="nb">sudo </span>systemctl reload apache2
</code></pre></div>        </div>
      </li>
      <li>
        <p>Modificamos el fichero para que realice una redirección de http a https:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /etc/apache2/sites-available/maria.iesgn.org.conf

  <span class="c">#Añadimos la siguiente línea:</span>
  Redirect 301 / https://maria.iesgn.org/
</code></pre></div>        </div>
      </li>
      <li>
        <p>Reiniciamos el servicio apache:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl reload apache2
</code></pre></div>        </div>
      </li>
      <li>
        <p>Comprobamos su funcionamiento:</p>

        <p><img src="/assets/images/certificado/15.png" alt="15" /></p>

        <p><img src="/assets/images/certificado/16.png" alt="16" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Instala ahora un servidor nginx, y realiza la misma configuración que anteriormente para que se sirva la página con HTTPS.</p>

    <ul>
      <li>
        <p>Deshabilitamos apache:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>systemctl disable <span class="nt">--now</span> apache2
</code></pre></div>        </div>
      </li>
      <li>
        <p>Instalamos el servidor nginx:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>nginx
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos el fichero de configuración dentro de la carpeta que hemos creado anteriormente:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>nano /var/www/html/maria.iesgn.org/index.html
</code></pre></div>        </div>
        <ul>
          <li>
            <p>Y dentro de este fichero, escribimos lo siguiente:</p>

            <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  server {
      listen 80;
      listen [::]:80;
      server_name maria.iesgn.org;
      return 301 https://$server_name$request_uri;
  }

  server {
      listen 443 ssl http2;
      listen [::]:443 ssl http2;
      server_name maria.iesgn.org;

      ssl_certificate /etc/ssl/certs/maria.crt;
      ssl_certificate_key /etc/ssl/private/maria-priv.key;
      ssl_trusted_certificate /etc/ssl/certs/cacert.crt;

      root /var/www/html/maria.iesgn.org;
      index index.html;

      location / {
          try_files $uri $uri/ =404;
      }
  }
</code></pre></div>            </div>
          </li>
          <li>
            <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">index.html</code> que hemos creado anteriormente:</p>

            <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;!DOCTYPE html&gt;</span>
      <span class="nt">&lt;html&gt;</span>
          <span class="nt">&lt;head&gt;</span>
          <span class="nt">&lt;title&gt;</span>maria.iesgn.org<span class="nt">&lt;/title&gt;</span>
          <span class="nt">&lt;/head&gt;</span>
      <span class="nt">&lt;body&gt;</span>
          <span class="nt">&lt;h1&gt;</span>maria.iesgn.org<span class="nt">&lt;/h1&gt;</span>
          <span class="nt">&lt;p&gt;</span>Web de prueba para cripto 3 - HTTPS<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>PRUEBA NGINX<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/body&gt;</span>
  <span class="nt">&lt;/html&gt;</span>
</code></pre></div>            </div>
          </li>
          <li>
            <p>Realizamos la firma del certificado:</p>

            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>openssl rsa <span class="nt">-in</span> /etc/ssl/private/maria-priv.key <span class="nt">-out</span> /etc/ssl/private/maria-priv2.key
</code></pre></div>            </div>
          </li>
          <li>
            <p>Realizamos el enlace simbólico del fichero de configuración y reiniciamos el servicio nginx:</p>

            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/maria.iesgn.org.conf /etc/nginx/sites-enabled/
  <span class="nb">sudo </span>systemctl restart nginx
</code></pre></div>            </div>
          </li>
          <li>
            <p>Comprobamos que el servidor funciona correctamente:</p>

            <p><img src="/assets/images/certificado/17.png" alt="17" /></p>

            <p><img src="/assets/images/certificado/18.png" alt="18" /></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Certificado digital de persona física Un certificado digital es un documento electrónico que contiene información sobre la identidad de una persona física o jurídica, y que se utiliza para firmar documentos electrónicos. El certificado digital contiene información sobre la persona que lo solicita, como su nombre, apellidos, DNI, fecha de nacimiento, etc. Además, contiene información sobre la entidad que lo emite, como el nombre de la entidad, el CIF, la dirección, etc. Tarea 1: Instalación del certificado NOTA: Para solicitar el certificado, podemos hacerlo a través de una acreditación presencial en una oficina de la FNMT o usando el DNI electrónico. Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito. Instalamos el certificado en el navegador. Para ello, accedemos a la página de la FNMT y descargamos el certificado. Nos pedirá nuestro DNI, nuestro primer apellido y un código de validación que nos han mandado a nuestro correo, con el que hemos solicitado el certificado. Una vez descargado, lo instalamos en el navegador. A continuación, tras aceptar los términos y condiciones, nos pedirá que introduzcamos la contraseña que hemos establecido al solicitar el certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo. Tras la descarga, nos preguntará si queremos crear una copia de seguridad del certificado. Finalmente, nos confirmará que la copia de seguridad se ha realizado correctamente. Muestra una captura de pantalla donde se vea las preferencias del navegador donde se ve instalado tu certificado. Para ver las preferencias del navegador, accedemos a Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados. Se abrirá una ventana con todos los certificados instalados en nuestro navegador. En ella, podemos ver el certificado que hemos instalado. ¿Cómo puedes hacer una copia de tu certificado?¿Como vas a realizar la copia de seguridad de tu certificado?. Razona la respuesta. Para hacer una copia de seguridad de nuestro certificado, debemos dirigirnos a Ajustes &gt; Privacidad y Seguridad &gt; Certificados &gt; Ver Certificados. Se nos abrirá la misma ventana de la imagen anterior. Clicamos en el certificado que queremos hacer una copia de seguridad y pulsamos en “Hacer copia”. Se nos abrirá una ventana en la que nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos una contraseña para proteger nuestra copia de seguridad. Finalmente, tendremos nuestra copia de seguridad. En mi caso, he almacenado mi clave en un NAS privado, en un directorio cifrado con clave alfanumérica. De esta forma, si alguien accede a mi NAS, no podrá acceder a mi clave privada, ya que no conoce la clave de cifrado. Investiga como exportar la clave pública de tu certificado. Con la copia de seguridad que tenemos de nuestra clave, y en mi caso, teniendo acceso a mi NAS, tanto en local como por VPN, puedo exportar mi clave a otros dispositivos. En mi caso, he exportado mi clave a mi móvil, (teniedo este sistema operativo iOS). Para la comprobación, he instalado la aplicación de la DGT y poder tener mi documentación en mi dispositivo móvil. Tarea 2: Validación del certificado Instala en tu ordenador el software autofirma y desde la página de VALIDe valida tu certificado. Muestra capturas de pantalla donde se comprueba la validación. Para instalar autofirma, debemos dirigirnos a la página de autofirma y descargar el instalador. Una vez descargado, lo instalamos en nuestro ordenador. Una vez instalado, abrimos la aplicación y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo. Ingresamos en la página de VALIDe y seleccionamos la opción de Validar Certificado Al ser la primera vez, autorizamos a autofirma a acceder a nuestra clave privada. Elegimos la clave que queremos validar, escribimos el captcha y pulsamos en Validar Como podemos ver, la clave es válida. Preparando el entorno de trabajo en Debian Como anteriormente he realizado los ejercicios en Windows, a partir de ahora vamos a realizarlo desde Debian. Para ello, sudo apt install libnss3-tools para instalar Java y las herramientas de Mozilla. Una vez instalado, ejecutamos el fichero .deb de autofirma y nos pedirá que introduzcamos la contraseña de nuestro certificado. Una vez introducida, nos pedirá que introduzcamos la contraseña de nuestro certificado para poder instalarlo. Tarea 3: Firma electrónica Utilizando la página VALIDe y el programa autofirma, firma un documento con tu certificado y envíalo por correo a un compañero. Creamos dos documentos de texto: uno para la comprobación de la página VALIDe y otro para la aplicación de autofirma. echo "Hola. Soy Maria. Esto es una prueba de VALIDe." &gt; valide.txt echo "Hola. Soy Maria. Esto es una prueba de autofirma." &gt; autofirma.txt Una vez creados los documentos, los firmamos, uno con VALIDe y otro con autofirma. Tu debes recibir otro documento firmado por un compañero y utilizando las herramientas anteriores debes visualizar la firma Visualizar Firma y Verificar Firma. ¿Puedes verificar la firma aunque no tengas la clave pública de tu compañero? Si,debido a que la clave pública de mi compañero se adjunta en el fichero ya firmado, por lo que puedo verificar la firma. ¿Es necesario estar conectado a internet para hacer la validación de la firma?. Razona tus respuestas. Para VALIDe si que es necesario estar conectado a internet, ya que es una página web. Para autofirma, no es necesario estar conectado a internet, ya que es una aplicación que se ejecuta en nuestro ordenador. Entre dos compañeros, firmar los dos un documento, verificar la firma para comprobar que está firmado por los dos. Tarea 4: Autenticación Utilizando tu certificado accede a alguna página de la administración pública (cita médica, becas, puntos del carnet,…). Entrega capturas de pantalla donde se demuestre el acceso a ellas. Accedemos a la web de la DGT para verificar el funcionamiento de nuestro certificado digital accediendo a nuestro historial de puntos. Nos redigirá a una página donde podremos elegir entre los distintos tipos de acceso y elegimos Cl@ave. El navegador, en mi caso, requiere de la aplicación de autofirma para poder acceder a la contraseña. Una vez introducida, nos redirige a la página de la DGT donde podemos ver nuestro historial de puntos. HTTPS / SSL NOTA: Vamos a realizar esta práctica en una web que se acceda con el nombre maria.iesgn.org. Para realizar esta tarea, vamos a necesitar la colaboración de un compañero, ya que fimraré una Autoridad Certificadora y mi compañero la firmará, y viceversa. Para ello, podemos hacer uso de los siguientes enlaces para buscar más información: Phil’s X509/SSL Guide How to setup your own CA with OpenSSL Crear autoridad certificadora (CA) y certificados autofirmados en Linux Creamos la Autoridad certificadora Crear su autoridad certificadora (generar el certificado digital de la CA). Mostrar el fichero de configuración de la AC. Creamos el directorio donde alojaremos todo lo necesario para la CA, dándole los permisos necesarios. mkdir CA cd CA mkdir certs csr crl newcerts private chmod 700 private touch index.txt touch index.txt.attr echo 1000 &gt; serial Creamos las variables de entorno donde definiremos los datos de configuración de la CA. countryName_default="ES" stateOrProvinceName_default="Sevilla" localityName_default="Dos Hermanas" organizationName_default="Maria" organizationalUnitName_default="ASIR2" emailAddress_default="mariajesus.alloza@outlook.es" DIR_CA="./" Creamos el fichero de configuración. cat &lt;&lt;EOF&gt;$DIR_CA/openssl.conf [ ca ] # man ca default_ca = CA_default [ CA_default ] # Directory and file locations. dir = ${DIR_CA} certs = ${DIR_CA}certs crl_dir = ${DIR_CA}crl new_certs_dir = ${DIR_CA}newcerts database = ${DIR_CA}index.txt serial = ${DIR_CA}serial RANDFILE = ${DIR_CA}private/.rand # The root key and root certificate. private_key = ${DIR_CA}private/private.key certificate = ${DIR_CA}certs/cacert.crt # For certificate revocation lists. crlnumber = ${DIR_CA}crlnumber crl = ${DIR_CA}crl/ca.crl.pem crl_extensions = crl_ext default_crl_days = 30 # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 name_opt = ca_default cert_opt = ca_default default_days = 375 preserve = no policy = policy_strict [ policy_strict ] # The root CA should only sign intermediate certificates that match. # See the POLICY FORMAT section of man ca. countryName = match stateOrProvinceName = match organizationName = match organizationalUnitName = optional commonName = supplied emailAddress = optional [ policy_loose ] # Allow the intermediate CA to sign a more diverse range of certificates. # See the POLICY FORMAT section of the ca man page. countryName = optional stateOrProvinceName = optional localityName = optional organizationName = optional organizationalUnitName = optional commonName = supplied emailAddress = optional [ req ] # Options for the req tool (man req). default_bits = 2048 distinguished_name = req_distinguished_name string_mask = utf8only # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 # Extension to add when the -x509 option is used. x509_extensions = v3_ca # Extension for SANs req_extensions = v3_req [ v3_req ] # Extensions to add to a certificate request # Before invoke openssl use: export SAN=DNS:value1,DNS:value2 basicConstraints = CA:FALSE keyUsage = nonRepudiation, digitalSignature, keyEncipherment xxxsubjectAltNamexxx = [ req_distinguished_name ] # See &lt;https://en.wikipedia.org/wiki/Certificate_signing_request&gt;. countryName = Country Name (2 letter code) stateOrProvinceName = State or Province Name localityName = Locality Name 0.organizationName = Organization Name organizationalUnitName = Organizational Unit Name commonName = Common Name emailAddress = Email Address # Optionally, specify some defaults. countryName_default = $countryName_default stateOrProvinceName_default = $stateOrProvinceName_default localityName_default = $localityName_default 0.organizationName_default = $organizationName_default organizationalUnitName_default = $organizationalUnitName_default emailAddress_default = $emailAddress_default [ v3_ca ] # Extensions for a typical CA (man x509v3_config). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ v3_intermediate_ca ] # Extensions for a typical intermediate CA (man x509v3_config). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true, pathlen:0 keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ usr_cert ] # Extensions for client certificates (man x509v3_config). basicConstraints = CA:FALSE nsCertType = client, email nsComment = "OpenSSL Generated Client Certificate" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection [ server_cert ] # Extensions for server certificates (man x509v3_config). basicConstraints = CA:FALSE nsCertType = server nsComment = "OpenSSL Generated Server Certificate" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth [ crl_ext ] # Extension for CRLs (man x509v3_config). authorityKeyIdentifier=keyid:always [ ocsp ] # Extension for OCSP signing certificates (man ocsp). basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, digitalSignature extendedKeyUsage = critical, OCSPSigning EOF Creamos tanto la clavecomoel certificado de a AC (autoridad de certificación) con el siguiente comando: #Creación de la clave openssl genrsa -aes256 -out private/private.key 4096 sed -i 's|xxxsubjectAltNamexxx =|subjectAltName = ${ENV::SAN}|g' openssl.conf URL=juanjesus.iesgn.org export SAN=DNS:$URL #Creación del certificado openssl req -config openssl.conf -key private/private.key -new -x509 -days 3650 -sha256 -extensions v3_ca -out certs/cacert.crt chmod 444 certs/cacert.crt Debe recibir el fichero CSR (Solicitud de Firmar un Certificado) de su compañero, debe firmarlo y enviar el certificado generado a su compañero. Mi compañero me envía mir fichero CSR, lo firmo y lo envío de vuelta. #Firmar el certificado openssl ca -config openssl.conf -extensions v3_req -days 3650 -notext -md sha256 -in csr/juanjesus-mjca.csr -out certs/juanjesus-mjca.crt ¿Qué otra información debes aportar a tu compañero para que éste configure de forma adecuada su servidor web con el certificado generado? Dentro de nuestro fichero openssl.conf nos encontraremos con los datos que nuestro compañero debe rellenar para configurar su servidor web, que son: countryName stateOrProvinceName localityName Administramos el servidor web Preparando el escenario Para realizar este punto, deberemos crear un servidor apache, y configurarlo para que nos sirva una página web con https. Para ello, deberemos seguir los siguientes pasos: Instalamos el servidor apache: sudo apt install apache2 Deshabilitamos el virtual host por defecto: sudo a2dissite 000-default.conf Creamos un nuevo virtual host y su fichero de configuración: sudo mkdir /var/www/html/maria.iesgn.org Creamos el fichero index.html dentro de la carpeta que hemos creado anteriormente: sudo nano /var/www/html/maria.iesgn.org/index.html Y dentro de este fichero, escribimos lo siguiente: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;maria.iesgn.org&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;maria.iesgn.org&lt;/h1&gt; &lt;p&gt;Web de prueba para cripto 3 - HTTPS&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Habilitamos el nuevo virtual host y reiniciamos el servicio apache: sudo a2ensite maria.iesgn.org.conf sudo systemctl restart apache2 Empezamos Crea una clave privada RSA de 4096 bits para identificar el servidor. sudo openssl genrsa -aes256 -out /etc/ssl/private/maria-priv.key 4096 sudo chmod 400 /etc/ssl/private/maria-priv.key Utiliza la clave anterior para generar un CSR, considerando que deseas acceder al servidor con el FQDN (maria.iesgn.org). sudo openssl req -new -sha256 -key /etc/ssl/private/maria-priv.key -out maria.csr Envía la solicitud de firma a la entidad certificadora (su compañero). Recibe como respuesta un certificado X.509 para el servidor firmado y el certificado de la autoridad certificadora. Configura tu servidor web con https en el puerto 443, haciendo que las peticiones http se redireccionen a https (forzar https). Modificamos el fichero de configuración: &lt;IfModule mod_ssl.c&gt; &lt;VirtualHost *:443&gt; ServerName maria.iesgn.org DocumentRoot /var/www/html/maria.iesgn.org ErrorLog ${APACHE_LOG_DIR}/error-maria.log CustomLog ${APACHE_LOG_DIR}/access-maria.log combined SSLEngine on SSLCertificateFile /etc/ssl/certs/maria.crt SSLCertificateKeyFile /etc/ssl/private/maria-priv.key SSLCertificateChainFile /etc/ssl/certs/cacert.crt &lt;Directory /var/www/html/maria.iesgn.org&gt; Options Indexes FollowSymLinks AllowOverride None Require all granted &lt;/Directory&gt; &lt;/VirtualHost&gt; &lt;/IfModule&gt; Movemos los ficheros que hemos generado a la carpeta /etc/ssl/certs y le proporcionamos los permisos necesarios: sudo mv maria.crt /etc/ssl/certs/ sudo mv cacert.crt /etc/ssl/certs/ sudo chown root:root /etc/ssl/certs/maria.crt sudo chown root:root /etc/ssl/certs/cacert.crt sudo chmod 644 /etc/ssl/certs/maria.crt sudo chmod 644 /etc/ssl/certs/cacert.crt Habilitamos el módulo ssl y reiniciamos el servicio apache: sudo a2enmod ssl sudo a2ensite ssl-maria.iesgn.org.conf sudo systemctl reload apache2 Modificamos el fichero para que realice una redirección de http a https: sudo nano /etc/apache2/sites-available/maria.iesgn.org.conf #Añadimos la siguiente línea: Redirect 301 / https://maria.iesgn.org/ Reiniciamos el servicio apache: sudo systemctl reload apache2 Comprobamos su funcionamiento: Instala ahora un servidor nginx, y realiza la misma configuración que anteriormente para que se sirva la página con HTTPS. Deshabilitamos apache: sudo systemctl disable --now apache2 Instalamos el servidor nginx: sudo apt install nginx Creamos el fichero de configuración dentro de la carpeta que hemos creado anteriormente: sudo nano /var/www/html/maria.iesgn.org/index.html Y dentro de este fichero, escribimos lo siguiente: server { listen 80; listen [::]:80; server_name maria.iesgn.org; return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name maria.iesgn.org; ssl_certificate /etc/ssl/certs/maria.crt; ssl_certificate_key /etc/ssl/private/maria-priv.key; ssl_trusted_certificate /etc/ssl/certs/cacert.crt; root /var/www/html/maria.iesgn.org; index index.html; location / { try_files $uri $uri/ =404; } } Modificamos el fichero index.html que hemos creado anteriormente: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;maria.iesgn.org&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;maria.iesgn.org&lt;/h1&gt; &lt;p&gt;Web de prueba para cripto 3 - HTTPS&lt;/p&gt; &lt;p&gt;PRUEBA NGINX&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Realizamos la firma del certificado: sudo openssl rsa -in /etc/ssl/private/maria-priv.key -out /etc/ssl/private/maria-priv2.key Realizamos el enlace simbólico del fichero de configuración y reiniciamos el servicio nginx: sudo ln -s /etc/nginx/sites-available/maria.iesgn.org.conf /etc/nginx/sites-enabled/ sudo systemctl restart nginx Comprobamos que el servidor funciona correctamente:]]></summary></entry><entry><title type="html">Montaje NFS mediante systemd</title><link href="/aso/2022/12/28/nfs-systemd.html" rel="alternate" type="text/html" title="Montaje NFS mediante systemd" /><published>2022-12-28T11:59:07+01:00</published><updated>2022-12-28T11:59:07+01:00</updated><id>/aso/2022/12/28/nfs-systemd</id><content type="html" xml:base="/aso/2022/12/28/nfs-systemd.html"><![CDATA[<p>En este post vamos a crear una instancia en OpensStack y anexarle un volumen de 2GB. El objetivo será configurar un servicio NFS de exportación y en el volumen anexado, un punto de montaje de la exportación mediante systemd.</p>

<h2 id="creamos-el-escenario">Creamos el escenario</h2>

<h3 id="creamos-el-servidor">Creamos el servidor</h3>
<p>Creamos una instancia en OpenStack con una imagen de Debian 11.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openstack server create <span class="nt">--flavor</span> m1.mini <span class="se">\</span>
<span class="nt">--image</span> <span class="s2">"Debian 11 Bullseye"</span> <span class="se">\</span>
<span class="nt">--key-name</span> pass <span class="se">\</span>
<span class="nt">--security-group</span> default <span class="se">\</span>
<span class="nt">--network</span> <span class="s2">"red de mariajesus.alloza"</span> <span class="se">\</span>
NFS-Systemd
</code></pre></div></div>

<p>Le añadimos un volumen de 2GB</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openstack volume create <span class="nt">--size</span> 2 <span class="se">\</span>
<span class="nt">--description</span> <span class="s2">"Volumen NFS-Systemd"</span> <span class="se">\</span>
<span class="nt">--availability-zone</span> <span class="s2">"nova"</span> <span class="se">\</span>
<span class="nt">--bootable</span> <span class="se">\</span>
nfs
</code></pre></div></div>

<p>Le asignamos una IP flotante.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openstack floating ip create ext-net
<span class="c">#IP flotante asignada:</span>
172.22.201.229
</code></pre></div></div>

<p><img src="/assets/images/nfs-systemd/1.png" alt="1" /></p>

<h3 id="creamos-el-cliente">Creamos el cliente</h3>

<p>Creamos una instancia en OpenStack con una imagen de Debian 11.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openstack server create <span class="nt">--flavor</span> m1.mini <span class="se">\</span>
<span class="nt">--image</span> <span class="s2">"Debian 11 Bullseye"</span> <span class="se">\</span>
<span class="nt">--key-name</span> pass <span class="se">\</span>
<span class="nt">--security-group</span> default <span class="se">\</span>
<span class="nt">--network</span> <span class="s2">"red de mariajesus.alloza"</span> <span class="se">\</span>
NFS-Systemd-Cliente
</code></pre></div></div>

<p>Le asignamos una IP flotante.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openstack floating ip create ext-net
<span class="c">#IP flotante asignada:</span>
172.22.201.247
</code></pre></div></div>

<h2 id="configuración">Configuración</h2>

<h3 id="configuramos-el-servicio-nfs">Configuramos el servicio NFS</h3>

<p>En la máquina servidor,con ip <code class="language-plaintext highlighter-rouge">172.22.201.229</code> realizamos las siguientes acciones:</p>

<ul>
  <li>
    <p>Instalamos el servicio NFS:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt <span class="nb">install </span>nfs-kernel-server
  <span class="nb">sudo </span>apt <span class="nb">install </span>nfs-common
</code></pre></div>    </div>
  </li>
  <li>
    <p>Tras su instalación, vamos a habilitar y activar el servicio:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  systemctl start rpcbind nfs-server
  systemctl <span class="nb">enable </span>rpcbind nfs-server
</code></pre></div>    </div>
  </li>
  <li>
    <p>Comprobamos que el servicio está activo:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  systemctl status rpcbind nfs-server
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/2.png" alt="2" /></p>

    <p>En la siguiente imagen podemos ver que el servicio está activo y que está a la escucha en el puerto 2049.</p>

    <p><img src="/assets/images/nfs-systemd/3.png" alt="3" /></p>
  </li>
</ul>

<h3 id="configuramos-el-punto-de-montaje">Configuramos el punto de montaje</h3>

<p>Ahora le toca el turno a la máquina cliente, con ip <code class="language-plaintext highlighter-rouge">172.22.201.247</code>. En ella realizamos las siguientes acciones:</p>

<ul>
  <li>
    <p>Creamos el punto de montaje:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir</span> /nfs
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos el fichero de configuración del punto de montaje:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  nano /etc/systemd/system/nfs.mount
</code></pre></div>    </div>
  </li>
  <li>
    <p>Añadimos el siguiente contenido:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">[</span>Unit]
  <span class="c">#Descripción</span>
  <span class="nv">Description</span><span class="o">=</span>Montaje NFS-Systemd

  <span class="o">[</span>Mount]
  <span class="c">#Volumen de 2GB añadido a la instancia</span>
  <span class="nv">What</span><span class="o">=</span>/dev/vdb
  <span class="c">#Directorio de montaje</span>
  <span class="nv">Where</span><span class="o">=</span>/nfs
  <span class="c">#Sistema de ficheros empleado</span>
  <span class="nv">Type</span><span class="o">=</span>ext4
  <span class="c">#Opciones de montaje</span>
  <span class="nv">Options</span><span class="o">=</span>defaults

  <span class="o">[</span>Install]
  <span class="c">#Autoarranque</span>
  <span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Vamos a formatear el volumen anexado a la instancia:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  mkfs.ext4 /dev/vdb
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/5.png" alt="5" /></p>

    <p>Y a continuación, reiniciamos el demonio e iniciamos el punto de montaje:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  systemctl daemon-reload
  systemctl start nfs.mount
</code></pre></div>    </div>
  </li>
  <li>
    <p>Comprobamos que el punto de montaje está activo:</p>

    <p><img src="/assets/images/nfs-systemd/6.png" alt="6" /></p>
  </li>
</ul>

<h3 id="montaje-permanente-del-punto-de-montaje">Montaje permanente del punto de montaje</h3>

<p>Para que el punto de montaje sea permanente, es decir, que se monte automáticamente al arrancar la máquina, realizamos las siguientes acciones:</p>

<ul>
  <li>
    <p>Añadimos el punto de montaje al fichero <code class="language-plaintext highlighter-rouge">/etc/fstab</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  nano /etc/fstab

  <span class="c">#Añadimos la siguiente línea al final del fichero:</span>
  /dev/vdb /nfs ext4 defaults 0 0
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/7.png" alt="7" /></p>
  </li>
  <li>
    <p>Para que los clientes puedan acceder al punto de montaje, debemos añadir la siguiente línea al fichero <code class="language-plaintext highlighter-rouge">/etc/exports</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  nano /etc/exports

  <span class="c">#Añadimos la siguiente línea al final del fichero:</span>
  /nfs 10.0.0.0/24<span class="o">(</span>rw,sync,no_root_squash,no_subtree_check<span class="o">)</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/8.png" alt="8" /></p>

    <p>La configuración anterior permite que todos los clientes de la red <code class="language-plaintext highlighter-rouge">10.0.0.0/24</code> puedan acceder al punto de montaje <code class="language-plaintext highlighter-rouge">/nfs</code> con permisos de lectura y escritura.</p>
  </li>
  <li>
    <p>Reiniciamos la máquina y comprobamos que el punto de montaje se monta de forma automática al iniciar el sistema.</p>

    <p><img src="/assets/images/nfs-systemd/9.png" alt="9" /></p>
  </li>
</ul>

<h3 id="configuración-del-cliente-nfs">Configuración del cliente NFS</h3>

<p>Ahora vamos a configurar el cliente NFS. En la máquina cliente, con ip <code class="language-plaintext highlighter-rouge">172.22.201.247</code>, realizamos las siguientes acciones:</p>

<ul>
  <li>
    <p>Instalamos el cliente NFS:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt update <span class="o">&amp;&amp;</span> apt upgrade <span class="nt">-y</span>
  apt <span class="nb">install </span>nfs-common
</code></pre></div>    </div>
  </li>
  <li>
    <p>Para comprobar que el cliente NFS está instalado, ejecutamos el siguiente comando:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  showmount <span class="nt">-e</span> 10.0.0.215
</code></pre></div>    </div>

    <p>Lo que se nos mostrará es la exportación del servidor:</p>

    <p><img src="/assets/images/nfs-systemd/10.png" alt="10" /></p>
  </li>
</ul>

<h3 id="configuración-del-punto-de-montaje-del-cliente">Configuración del punto de montaje del cliente</h3>

<p>Ahora vamos a configurar el punto de montaje del cliente. En la máquina cliente, con ip <code class="language-plaintext highlighter-rouge">172.22.201.247</code>, realizamos las siguientes acciones:</p>

<ul>
  <li>
    <p>Creamos el directorio que usaremos como punto de montaje:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir</span> /cliente
</code></pre></div>    </div>
  </li>
  <li>
    <p>Y a continuación, creamos el fichero de configuración del punto de montaje:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  nano /etc/systemd/system/cliente.mount
</code></pre></div>    </div>

    <p>La configuración del fichero es la siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">[</span>Unit]
  <span class="nv">Description</span><span class="o">=</span>Montaje NFS-cliente

  <span class="o">[</span>Mount]
  <span class="c">#Dirección IP:Directorio de exportación</span>
  <span class="nv">What</span><span class="o">=</span>10.0.0.215:/nfs
  <span class="c">#Directorio del recurso compartido</span>
  <span class="nv">Where</span><span class="o">=</span>/cliente
  <span class="c">#Tipo de recurso</span>
  <span class="nv">Type</span><span class="o">=</span>nfs
  <span class="c">#Opciones de montaje</span>
  <span class="nv">Options</span><span class="o">=</span>defaults

  <span class="o">[</span>Install]
  <span class="c">#Autoarranque</span>
  <span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/11.png" alt="11" /></p>

    <ul>
      <li>
        <p>Activamos y montamos el recurso que queremos compartir:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  systemctl <span class="nb">enable </span>NFS-cliente.mount
  systemctl start NFS-cliente.mount
</code></pre></div>        </div>
      </li>
      <li>
        <p>Comprobamos que el punto de montaje está activo:</p>
      </li>
    </ul>

    <p><img src="/assets/images/nfs-systemd/12.png" alt="12" /></p>
  </li>
</ul>

<h3 id="montaje-permanente-del-punto-de-montaje-del-cliente">Montaje permanente del punto de montaje del cliente</h3>

<p>Para que el punto de montaje sea permanente, es decir, que se monte automáticamente al arrancar la máquina, realizamos las siguientes acciones:</p>

<ul>
  <li>
    <p>Añadimos el punto de montaje al fichero <code class="language-plaintext highlighter-rouge">/etc/fstab</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  nano /etc/fstab

  <span class="c">#Añadimos la siguiente línea al final del fichero:</span>
  10.0.0.215:/nfs /cliente nfs defaults 0 0
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/13.png" alt="13" /></p>
  </li>
  <li>
    <p>Reiniciamos la máquina y comprobamos que el punto de montaje se monta de forma automática al iniciar el sistema.</p>

    <p><img src="/assets/images/nfs-systemd/14.png" alt="14" /></p>
  </li>
</ul>

<h2 id="comprobación-del-funcionamiento-del-servicio-nfs">Comprobación del funcionamiento del servicio NFS</h2>

<p>Para comprobar que el servicio NFS está funcionando de forma correcta, vamos a crear un directorio y un fichero en el punto de montaje del servidor y comprobar que se reflejan en el punto de montaje del cliente.</p>

<p><strong>¡NOTA!</strong> 
Recuerda que una vez realizados los cambios, para que el sercidor NFS los reconozca, debemos ejecutar <code class="language-plaintext highlighter-rouge">sudo exportfs -ra</code> para que se actualicen los cambios.</p>

<ul>
  <li>
    <p>Creamos un directorio y un fichero en el punto de montaje del servidor:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir</span> /NFS-Systemd/prueba
  <span class="nb">echo</span> <span class="s2">"Esto es un texto escrito desde el servidor"</span> <span class="o">&gt;</span> /nfs/nfs-prueba.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/15.png" alt="15" /></p>
  </li>
  <li>
    <p>Accederemos al punto de montaje del cliente y comprobaremos que el directorio y el fichero se han creado correctamente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cd</span> /cliente
  <span class="nb">ls
  cat </span>nfs-prueba.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/16.png" alt="16" /></p>
  </li>
  <li>
    <p>Si lo que queremos es crear un fichero desde el cliente, lo crearemos en el punto de montaje del cliente y comprobaremos que se ha creado en el punto de montaje del servidor:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Esto es un texto escrito desde el cliente"</span> <span class="o">&gt;</span> /cliente/prueba/prueba-cliente.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/17.png" alt="17" /></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">ls</span> /nfs/prueba
  <span class="nb">cat</span> /nfs/prueba/prueba-cliente.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/nfs-systemd/18.png" alt="18" /></p>
  </li>
</ul>]]></content><author><name></name></author><category term="ASO" /><summary type="html"><![CDATA[En este post vamos a crear una instancia en OpensStack y anexarle un volumen de 2GB. El objetivo será configurar un servicio NFS de exportación y en el volumen anexado, un punto de montaje de la exportación mediante systemd. Creamos el escenario Creamos el servidor Creamos una instancia en OpenStack con una imagen de Debian 11. openstack server create --flavor m1.mini \ --image "Debian 11 Bullseye" \ --key-name pass \ --security-group default \ --network "red de mariajesus.alloza" \ NFS-Systemd Le añadimos un volumen de 2GB openstack volume create --size 2 \ --description "Volumen NFS-Systemd" \ --availability-zone "nova" \ --bootable \ nfs Le asignamos una IP flotante. openstack floating ip create ext-net #IP flotante asignada: 172.22.201.229 Creamos el cliente Creamos una instancia en OpenStack con una imagen de Debian 11. openstack server create --flavor m1.mini \ --image "Debian 11 Bullseye" \ --key-name pass \ --security-group default \ --network "red de mariajesus.alloza" \ NFS-Systemd-Cliente Le asignamos una IP flotante. openstack floating ip create ext-net #IP flotante asignada: 172.22.201.247 Configuración Configuramos el servicio NFS En la máquina servidor,con ip 172.22.201.229 realizamos las siguientes acciones: Instalamos el servicio NFS: sudo apt install nfs-kernel-server sudo apt install nfs-common Tras su instalación, vamos a habilitar y activar el servicio: systemctl start rpcbind nfs-server systemctl enable rpcbind nfs-server Comprobamos que el servicio está activo: systemctl status rpcbind nfs-server En la siguiente imagen podemos ver que el servicio está activo y que está a la escucha en el puerto 2049. Configuramos el punto de montaje Ahora le toca el turno a la máquina cliente, con ip 172.22.201.247. En ella realizamos las siguientes acciones: Creamos el punto de montaje: mkdir /nfs Creamos el fichero de configuración del punto de montaje: nano /etc/systemd/system/nfs.mount Añadimos el siguiente contenido: [Unit] #Descripción Description=Montaje NFS-Systemd [Mount] #Volumen de 2GB añadido a la instancia What=/dev/vdb #Directorio de montaje Where=/nfs #Sistema de ficheros empleado Type=ext4 #Opciones de montaje Options=defaults [Install] #Autoarranque WantedBy=multi-user.target Vamos a formatear el volumen anexado a la instancia: mkfs.ext4 /dev/vdb Y a continuación, reiniciamos el demonio e iniciamos el punto de montaje: systemctl daemon-reload systemctl start nfs.mount Comprobamos que el punto de montaje está activo: Montaje permanente del punto de montaje Para que el punto de montaje sea permanente, es decir, que se monte automáticamente al arrancar la máquina, realizamos las siguientes acciones: Añadimos el punto de montaje al fichero /etc/fstab: nano /etc/fstab #Añadimos la siguiente línea al final del fichero: /dev/vdb /nfs ext4 defaults 0 0 Para que los clientes puedan acceder al punto de montaje, debemos añadir la siguiente línea al fichero /etc/exports: nano /etc/exports #Añadimos la siguiente línea al final del fichero: /nfs 10.0.0.0/24(rw,sync,no_root_squash,no_subtree_check) La configuración anterior permite que todos los clientes de la red 10.0.0.0/24 puedan acceder al punto de montaje /nfs con permisos de lectura y escritura. Reiniciamos la máquina y comprobamos que el punto de montaje se monta de forma automática al iniciar el sistema. Configuración del cliente NFS Ahora vamos a configurar el cliente NFS. En la máquina cliente, con ip 172.22.201.247, realizamos las siguientes acciones: Instalamos el cliente NFS: apt update &amp;&amp; apt upgrade -y apt install nfs-common Para comprobar que el cliente NFS está instalado, ejecutamos el siguiente comando: showmount -e 10.0.0.215 Lo que se nos mostrará es la exportación del servidor: Configuración del punto de montaje del cliente Ahora vamos a configurar el punto de montaje del cliente. En la máquina cliente, con ip 172.22.201.247, realizamos las siguientes acciones: Creamos el directorio que usaremos como punto de montaje: mkdir /cliente Y a continuación, creamos el fichero de configuración del punto de montaje: nano /etc/systemd/system/cliente.mount La configuración del fichero es la siguiente: [Unit] Description=Montaje NFS-cliente [Mount] #Dirección IP:Directorio de exportación What=10.0.0.215:/nfs #Directorio del recurso compartido Where=/cliente #Tipo de recurso Type=nfs #Opciones de montaje Options=defaults [Install] #Autoarranque WantedBy=multi-user.target Activamos y montamos el recurso que queremos compartir: systemctl enable NFS-cliente.mount systemctl start NFS-cliente.mount Comprobamos que el punto de montaje está activo: Montaje permanente del punto de montaje del cliente Para que el punto de montaje sea permanente, es decir, que se monte automáticamente al arrancar la máquina, realizamos las siguientes acciones: Añadimos el punto de montaje al fichero /etc/fstab: nano /etc/fstab #Añadimos la siguiente línea al final del fichero: 10.0.0.215:/nfs /cliente nfs defaults 0 0 Reiniciamos la máquina y comprobamos que el punto de montaje se monta de forma automática al iniciar el sistema. Comprobación del funcionamiento del servicio NFS Para comprobar que el servicio NFS está funcionando de forma correcta, vamos a crear un directorio y un fichero en el punto de montaje del servidor y comprobar que se reflejan en el punto de montaje del cliente. ¡NOTA! Recuerda que una vez realizados los cambios, para que el sercidor NFS los reconozca, debemos ejecutar sudo exportfs -ra para que se actualicen los cambios. Creamos un directorio y un fichero en el punto de montaje del servidor: mkdir /NFS-Systemd/prueba echo "Esto es un texto escrito desde el servidor" &gt; /nfs/nfs-prueba.txt Accederemos al punto de montaje del cliente y comprobaremos que el directorio y el fichero se han creado correctamente: cd /cliente ls cat nfs-prueba.txt Si lo que queremos es crear un fichero desde el cliente, lo crearemos en el punto de montaje del cliente y comprobaremos que se ha creado en el punto de montaje del servidor: echo "Esto es un texto escrito desde el cliente" &gt; /cliente/prueba/prueba-cliente.txt ls /nfs/prueba cat /nfs/prueba/prueba-cliente.txt]]></summary></entry><entry><title type="html">Desarrollo y despliegue de una aplicación Java simple</title><link href="/iaw/2022/12/28/java-simple.html" rel="alternate" type="text/html" title="Desarrollo y despliegue de una aplicación Java simple" /><published>2022-12-28T11:59:07+01:00</published><updated>2022-12-28T11:59:07+01:00</updated><id>/iaw/2022/12/28/java-simple</id><content type="html" xml:base="/iaw/2022/12/28/java-simple.html"><![CDATA[<p>En este post vamos a crear una aplicación Java simple y desplegarla en un servidor Tomcat con Maven.</p>

<p><strong>Tomcat</strong> es un servidor web que permite ejecutar aplicaciones Java. En este post vamos a ver como desplegar una aplicación Java en un servidor Tomcat.</p>

<p>Mientras que <strong>Maven</strong> es una herramienta de construcción de software que nos permite gestionar el ciclo de vida de un proyecto Java. En este post vamos a ver como crear un proyecto Java con Maven.</p>

<h2 id="escenario">Escenario</h2>
<ol>
  <li>
    <p>Instala tomcat9 como hemos visto en la documentación.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt <span class="nb">install </span>tomcat9 tomcat9-admin
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configuramos el panel de administración Tomcat-Manager y configúralo para su acceso.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> nano /etc/tomcat9/tomcat-users.xml
</code></pre></div>    </div>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;tomcat-users&gt;</span>
     <span class="nt">&lt;role</span> <span class="na">rolename=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
     <span class="nt">&lt;user</span> <span class="na">username=</span><span class="s">"tomcat"</span> <span class="na">password=</span><span class="s">"s3cret"</span> <span class="na">roles=</span><span class="s">"manager-gui"</span><span class="nt">/&gt;</span>
 <span class="nt">&lt;/tomcat-users&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Instala la aplicación maven que nos va a ayudar a compilar aplicaciones java.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt <span class="nb">install </span>maven
</code></pre></div>    </div>
  </li>
  <li>
    <p>A continuación vamos a generar un proyecto, que será el esqueleto de nuestra aplicación Java, para ello ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mvn archetype:generate <span class="nt">-DgroupId</span><span class="o">=</span>com.app.example <span class="nt">-DartifactId</span><span class="o">=</span>java-app <span class="nt">-DarchetypeArtifactId</span><span class="o">=</span>maven-archetype-quickstart <span class="nt">-DinteractiveMode</span><span class="o">=</span><span class="nb">false</span>
</code></pre></div>    </div>

    <p>La estructura de nuestro directorio sería la siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> java-app/
 ├── pom.xml
 └── src
     ├── main
     │   ├── java
     │   │   └── com
     │   │       └── app
     │   │           └── example
     │   │               └── App.java
     │   └── resources
     └── <span class="nb">test</span>
         └── java
             └── com
                 └── app
                     └── example
                         └── AppTest.java
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">java-app/pom.xml</code> para que tenga la siguiente estructura:</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="cp">&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;</span>
     <span class="nt">&lt;project</span> <span class="na">xmlns =</span> <span class="s">"http://maven.apache.org/POM/4.0.0"</span> 
        <span class="na">xmlns:xsi =</span> <span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>

     <span class="na">xsi:schemaLocation =</span> <span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

        <span class="nt">&lt;groupId&gt;</span>com.tutorialspoint<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>hello-world<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>

        <span class="nt">&lt;parent&gt;</span>
           <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
           <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
           <span class="nt">&lt;version&gt;</span>2.3.0.RELEASE<span class="nt">&lt;/version&gt;</span>
           <span class="nt">&lt;relativePath/&gt;</span> 
        <span class="nt">&lt;/parent&gt;</span>

        <span class="nt">&lt;properties&gt;</span>
           <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
           <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
           <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
           <span class="nt">&lt;tomcat.version&gt;</span>9.0.37<span class="nt">&lt;/tomcat.version&gt;</span>
        <span class="nt">&lt;/properties&gt;</span>

        <span class="nt">&lt;dependencies&gt;</span>
           <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
           <span class="nt">&lt;/dependency&gt;</span>
           <span class="nt">&lt;dependency&gt;</span>  
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>  
     	 <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>  
     	 <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>  
           <span class="nt">&lt;/dependency&gt;</span>   
           <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
           <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>

        <span class="nt">&lt;build&gt;</span>
           <span class="nt">&lt;plugins&gt;</span>
              <span class="nt">&lt;plugin&gt;</span>
                 <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                 <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;/plugin&gt;</span>
           <span class="nt">&lt;/plugins&gt;</span>
        <span class="nt">&lt;/build&gt;</span>

     <span class="nt">&lt;/project&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Construimos la aplicación, y para ello modificamos el fichero <code class="language-plaintext highlighter-rouge">src/main/java/com/app/example/App.java</code> para que tenga la siguiente estructura:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">package</span> <span class="nn">com.app.example</span><span class="o">;</span>

 <span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.builder.SpringApplicationBuilder</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.boot.web.servlet.support.SpringBootServletInitializer</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

 <span class="nd">@SpringBootApplication</span>
 <span class="nd">@RestController</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="kd">extends</span> <span class="nc">SpringBootServletInitializer</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">SpringApplicationBuilder</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">SpringApplicationBuilder</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
       <span class="k">return</span> <span class="n">application</span><span class="o">.</span><span class="na">sources</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
       <span class="k">return</span> <span class="s">"&lt;center&gt;Hola mundo!!!&lt;/center&gt;"</span><span class="o">;</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Construimos la aplicación, y para ello ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mvn package
</code></pre></div>    </div>
  </li>
  <li>
    <p>Copiamos el fichero <code class="language-plaintext highlighter-rouge">java-app/target/hello-world-1.war</code> a la carpeta <code class="language-plaintext highlighter-rouge">/var/lib/tomcat9/webapps/</code> y reiniciamos el servicio de tomcat9.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> systemctl restart tomcat9
</code></pre></div>    </div>

    <p><img src="/assets/images/java-simple/1.png" alt="1" /></p>
  </li>
</ol>

<h2 id="comprobación">Comprobación</h2>
<p>Si accedemos a la ip de nuestro servidor, veremos el mensaje <code class="language-plaintext highlighter-rouge">Hola mundo!!!</code> en el navegador.</p>

<p><img src="/assets/images/java-simple/2.png" alt="2" /></p>

<p>Y si accedemos al Tomcat-Manager, veremos que la aplicación se ha desplegado correctamente.</p>

<p><img src="/assets/images/java-simple/3.png" alt="3" /></p>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[En este post vamos a crear una aplicación Java simple y desplegarla en un servidor Tomcat con Maven.]]></summary></entry><entry><title type="html">Despliegue de una aplcación Python</title><link href="/hlc+sri/2022/12/19/despliegue-python.html" rel="alternate" type="text/html" title="Despliegue de una aplcación Python" /><published>2022-12-19T12:32:50+01:00</published><updated>2022-12-19T12:32:50+01:00</updated><id>/hlc+sri/2022/12/19/despliegue-python</id><content type="html" xml:base="/hlc+sri/2022/12/19/despliegue-python.html"><![CDATA[<h1 id="descripción">Descripción</h1>

<p>En esta entrada vamos a desplegar una aplicación Python realizada en Django.</p>

<h2 id="entorno-de-desarrollo">Entorno de desarrollo</h2>

<ol>
  <li>
    <p>Utilizamos la máquina <code class="language-plaintext highlighter-rouge">bravo</code> de nuestro <a href="https://sysmaria.netlify.app/hlc+sri/2022/12/05/escenario.html">escenario</a> que usa Rocky Linux 9.</p>
  </li>
  <li>
    <p>Vamos a configurar nuestro escenario de la siguiente manera:</p>

    <ul>
      <li>
        <p>Realizamos un fork del repositorio con la <a href="https://github.com/josedom24/django_tutorial">app</a>.</p>
      </li>
      <li>
        <p>Creamos un entorno virtual de Python3 e instalamos las dependencias necesarias.</p>
      </li>
      <li>Comprobamos que la base de datos con la que vamosa trabajar es SQLite.
        <ul>
          <li>¿Qué fichero tenemos que consultar?</li>
          <li>¿Cómo se llama la base de datos que vamos a crear?</li>
        </ul>
      </li>
      <li>
        <p>Creamos la base de datos.</p>
      </li>
      <li>
        <p>Creamos el usuario Administrador.</p>
      </li>
      <li>
        <p>Ejecutamos el servidor web de desarrollo y entramos en la zona de administración para comprobar que los datos se han almacenado correctamente.</p>
      </li>
      <li>
        <p>Creamos dos preguntas con posibles respuestas.</p>
      </li>
      <li>
        <p>Comprobamos que podemos acceder a la aplicación desde el navegador. y accedemos a la url <code class="language-plaintext highlighter-rouge">/polls</code>.</p>
      </li>
      <li>Configura el servidor web con el módulo wsgi para sevir la página web. Como hemos utilizado la máquina <code class="language-plaintext highlighter-rouge">bravo</code> se accederá por el nombre <code class="language-plaintext highlighter-rouge">python.maria.gonzalonazareno.org</code>.</li>
    </ul>
  </li>
</ol>

<h2 id="entorno-de-producción">Entorno de producción</h2>

<p>Eneste apartado vamos a realizar el despliegue de nuestra aplicación en un entorno de producción, para ello vamos a utilizar nuestro VPS.</p>

<p>Para ello:</p>

<ol>
  <li>
    <p>Vamos a clonar el repositorio de la aplicación en el VPS.</p>
  </li>
  <li>
    <p>Creamos un entorno virtual e instalamos las dependencias de nuestra aplicación.</p>
  </li>
  <li>
    <p>Instalamos el módulo que nos permitirá que python trabajecon mysql:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> pip <span class="nb">install </span>mysqlclient
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos la base de datos y un usuario en mysql.</p>
  </li>
  <li>
    <p>Configuramos la aplicación para trabajar con mysql, por ello, modificamos el fichero <code class="language-plaintext highlighter-rouge">settings.py</code> de la siguiente manera:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
     <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
     <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.mysql'</span><span class="p">,</span>
     <span class="s">'NAME'</span><span class="p">:</span> <span class="s">'myproject'</span><span class="p">,</span>
     <span class="s">'USER'</span><span class="p">:</span> <span class="s">'myprojectuser'</span><span class="p">,</span>
     <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="s">'password'</span><span class="p">,</span>
     <span class="s">'HOST'</span><span class="p">:</span> <span class="s">'localhost'</span><span class="p">,</span>
     <span class="s">'PORT'</span><span class="p">:</span> <span class="s">''</span><span class="p">,</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creamos una copia de seguridad de la base de datos, teniendo en cuenta que en el entorno de desarrollo hemos utilizado SQLite y en el de producción MySQL. Por ello, lo recomendable es realizar la copia de seguridad y recuperarla con los comandos adecuados.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> manage.py dumpdata
 python manage.py loaddata 
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configuramos el servidor de aplicaciones uwsgi, creando una unidad de systemd (como hemor realizado en el paso 2 de <a href="https://sysmaria.netlify.app/iaw/2022/12/17/wsgi.html#h-despliegue-de-la-aplicaci%C3%B3n-flask">talleres wsgi</a>) y configuramos nginx como proxy inverso para servir la aplicación.</p>
  </li>
  <li>
    <p>Debemos asegurarnos que el contenido estático se está sirviendo: ¿Se muestra la imagen de fondo de la aplicación? ¿Se ve de forma adecuada la hoja de estilo de la zona de administración?</p>
  </li>
  <li>
    <p>Desactivamos la configuración el modo debug a <code class="language-plaintext highlighter-rouge">False</code>, para que los errores de ejecución no den información sensible de la aplicación.</p>
  </li>
  <li>
    <p>La página web deberá ser accesible usando https, en la URL: <code class="language-plaintext highlighter-rouge">https://python.mariatec.es</code>.</p>
  </li>
</ol>

<p>Como podemos ver en la siguiente imagen, la página funciona correctamente:</p>

<p><img src="/assets/images/posts/app-python.png" alt="app-python" /></p>

<h2 id="entorno-de-producción-1">Entorno de producción</h2>

<p>En este apartado vamos a realizar cambios en el entorno de desarrollo y posteriormente vamos a subirlas a producción. Vamos a realizar tres modificaciones, pero recuerda que primero lo haces en el entrono de desarrollo, y luego tendrás que llevar los cambios a producción:</p>

<ol>
  <li>
    <p>Modifica la página inicial donde se ven las encuestas para que aparezca tu nombre, para ello modifica el archivo <code class="language-plaintext highlighter-rouge">django_tutorial/polls/templates/polls/index.html</code>.</p>
  </li>
  <li>
    <p>Modificamos la imagen que aparece como fondo de la aplicación.</p>
  </li>
  <li>
    <p>Vamos a crear una nueva tabla en la base de datos, para ello sigue los siguientes pasos:</p>

    <ol>
      <li>
        <p>Añadimos un nuevo modelo al fichero <code class="language-plaintext highlighter-rouge">polls/models.py</code>:</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">Persona</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
     <span class="n">Abr</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
     <span class="n">Nombre</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>

     <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
         <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">Abr</span><span class="o">+</span><span class="s">" - "</span><span class="o">+</span><span class="bp">self</span><span class="p">.</span><span class="n">Nombre</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos una migración.</p>
      </li>
      <li>
        <p>Aplicamos la migración.</p>
      </li>
      <li>Añadimos el nuevomodelo al sitio de administración de django:
        <ul>
          <li>
            <p>Cambiamos la siguiente línea del fichero <code class="language-plaintext highlighter-rouge">polls/admin.py</code>:</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Choice</span><span class="p">,</span> <span class="n">Question</span>
</code></pre></div>            </div>

            <p>por:</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Choice</span><span class="p">,</span> <span class="n">Question</span><span class="p">,</span> <span class="n">Persona</span>
</code></pre></div>            </div>
          </li>
          <li>
            <p>Añadimos la siguiente línea al fichero <code class="language-plaintext highlighter-rouge">polls/admin.py</code>:</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">Categoria</span><span class="p">)</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>Deplegamos el cambio en el entorno de producción.</li>
    </ol>
  </li>
</ol>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Descripción]]></summary></entry><entry><title type="html">Desplegando aplicaciones flask con apache2 + mod_wsgi</title><link href="/iaw/2022/12/17/wsgi.html" rel="alternate" type="text/html" title="Desplegando aplicaciones flask con apache2 + mod_wsgi" /><published>2022-12-17T08:17:50+01:00</published><updated>2022-12-17T08:17:50+01:00</updated><id>/iaw/2022/12/17/wsgi</id><content type="html" xml:base="/iaw/2022/12/17/wsgi.html"><![CDATA[<h2 id="desplegando-aplicaciones-flask-con-apache2--mod_wsgi">Desplegando aplicaciones flask con apache2 + mod_wsgi</h2>

<h3 id="introducción">Introducción</h3>

<p>En esta entrada vamos a ver como desplegar una aplicación flask con apache2 + mod_wsgi.</p>

<h3 id="configuración-de-apache2-para-servir-una-aplicación-web-flask">Configuración de apache2 para servir una aplicación web flask</h3>

<ol>
  <li>Instalamos apache2 y mod_wsgi</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@debian:~ apt <span class="nb">install </span>apache2 libapache2-mod-wsgi-py3
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Suponiendo que tenemos:
    - Un servidor web apache2 con wsgi activado.
    - Una aplicación flask en el directorio /home/debian/guestbook
    - Un entorno virtual con flask instalado en /home/debian/guestbook/venv
</code></pre></div></div>

<ol>
  <li>Creamos el fichero wsgi que estará en el directorio del entorno virtual con el siguiente contenido:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from app import prog as aplicacion
</code></pre></div></div>

<p>Y veremos que:
    - El app se corresponde con el nombre del módulo, <code class="language-plaintext highlighter-rouge">app.py</code>.
    - El <code class="language-plaintext highlighter-rouge">prog</code> corresponde a la aplicación flask creada en app.py: prog = Flask(<strong>name</strong>).
    - Importamos la aplicación flask, pero la llamamos application necesario para que el servidor web pueda enviarle peticiones.</p>

<h3 id="configuración-de-apache2-para-servir-una-aplicación-web-flask-1">Configuración de apache2 para servir una aplicación web flask</h3>

<ol>
  <li>
    <p>Creamos un virtualhost que se acceda con el nombre flask.tunombre.org, esta configuración irá en el fichero correspondiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> DocumentRoot /home/debian/guestbook
 WSGIDaemonProcess flask_guestbook python-path<span class="o">=</span>/home/debian/guestbook:/home/debian/venv/flask/lib/python3.9/site-packages
 WSGIProcessGroup flask_guestbook
 WSGIScriptAlias / /home/debian/guestbook/wsgi.py process-group<span class="o">=</span>flask_guestbook
 &lt;Directory /home/debian/guestbook&gt;
         Require all granted
 &lt;/Directory&gt;
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/1.png" alt="1" /></p>
  </li>
  <li>
    <p>Activamos el módulo wsgi y el virtualhost:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ a2enmod wsgi
 root@debian:~ a2ensite flask.maria.org
</code></pre></div>    </div>
  </li>
  <li>
    <p>Reiniciamos el servicio apache2:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ systemctl restart apache2
</code></pre></div>    </div>
  </li>
  <li>
    <p>Cambiamos el fichero hosts para que apunte a la ip del servidor:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>nano /etc/hosts
 <span class="nt">---</span>
 172.22.201.119 www.flask.maria.org
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/2.png" alt="2" /></p>
  </li>
</ol>

<h2 id="desplegando-aplicaciones-flask-con-apache2--mod_uwsgi">Desplegando aplicaciones flask con apache2 + mod_uwsgi</h2>

<h3 id="introducción-1">Introducción</h3>

<p>En esta entrada vamos a ver como desplegar una aplicación flask con apache2 + mod_uwsgi.</p>

<h3 id="instalación-de-apache2--mod_uwsgi">Instalación de apache2 + mod_uwsgi</h3>

<ol>
  <li>
    <p>Instalamos el paquete python3-dev y uwsgi:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ apt <span class="nb">install </span>python3-dev uwsgi
</code></pre></div>    </div>

    <p>Es posible que también tengamos que instalar <code class="language-plaintext highlighter-rouge">build-essential</code> para que se instale correctamente uwsgi.</p>
  </li>
</ol>

<h3 id="despliegue-de-la-aplicación-flask">Despliegue de la aplicación flask</h3>

<ol>
  <li>
    <p>Probamos que el servidor uwsgi funciona correctamente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">(</span>flask<span class="o">)</span><span class="nv">$ </span>uwsgi <span class="nt">--http</span> :8080 <span class="nt">--chdir</span> /home/debian/guestbook <span class="nt">--wsgi-file</span> wsgi.py <span class="nt">--process</span> 4 <span class="nt">--threads</span> 2 <span class="nt">--master</span> 
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/0-1.png" alt="01" /></p>

    <p>Otra forma de comprobar que funciona es creando el ficher <code class="language-plaintext highlighter-rouge">ini</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">(</span>flask<span class="o">)</span><span class="nv">$ </span>nano guestbook.ini
 <span class="nt">---</span>
 <span class="o">[</span>uwsgi]
 http <span class="o">=</span> :8080
 chdir <span class="o">=</span> /home/debian/guestbook
 wsgi-file <span class="o">=</span> wsgi.py
 processes <span class="o">=</span> 4
 threads <span class="o">=</span> 2
</code></pre></div>    </div>
    <p>Y ejecutamos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">(</span>flask<span class="o">)</span><span class="nv">$ </span>uwsgi <span class="nt">--ini</span> uwsgi.ini
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/0-2.png" alt="02" /></p>
  </li>
  <li>
    <p>Creamos una unidad systemd para controlarla con systemctl.</p>

    <ul>
      <li>Creamos el fichero <code class="language-plaintext highlighter-rouge">/etc/systemd/system/uwsgi.guestbook.service</code>:</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">[</span>Unit]
 <span class="nv">Description</span><span class="o">=</span>uwsgi-guestbook
 <span class="nv">After</span><span class="o">=</span>network.target

 <span class="o">[</span>Install]
 <span class="nv">WantedBy</span><span class="o">=</span>multi-user.target

 <span class="o">[</span>Service]
 <span class="nv">User</span><span class="o">=</span>www-data
 <span class="nv">Group</span><span class="o">=</span>www-data
 <span class="nv">Restart</span><span class="o">=</span>always

 <span class="nv">ExecStart</span><span class="o">=</span>/home/debian/venv/flask/bin/uwsgi /home/debian/venv/flask/guestbook.ini
 <span class="nv">ExecReload</span><span class="o">=</span>/bin/kill <span class="nt">-s</span> HUP <span class="nv">$MAINPID</span>
 <span class="nv">ExecStop</span><span class="o">=</span>/bin/kill <span class="nt">-s</span> TERM <span class="nv">$MAINPID</span>
    
 <span class="nv">WorkingDirectory</span><span class="o">=</span>/home/debian/guestbook
 <span class="nv">Environment</span><span class="o">=</span><span class="nv">PYTHONPATH</span><span class="o">=</span> <span class="s1">'/home/debian/guestbook:/home/debian/venv/flask/lib/python3.9/site-packages'</span>
    
 <span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/3.png" alt="3" /></p>

    <ul>
      <li>Activamos el servicio:</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ systemctl <span class="nb">enable </span>uwsgi.guestbook
 root@debian:~ systemctl start uwsgi.guestbook
</code></pre></div>    </div>

    <p><strong>NOTA</strong>: Si cambiamos el contenido de la unidad lo recargaremos ejecutando:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ systemctl daemon-reload
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="proxy-inverso-para-uwsgi">Proxy Inverso para uwsgi</h3>

<ol>
  <li>
    <p>Activamos el módulo proxy_http:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> DocumentRoot /home/debian/guestbook
 ProxyPass / http://127.0.0.1:8080/
 ProxyPassReverse / http://127.0.0.1:8080/
 &lt;Directory /home/debian/guestbook&gt;
     Require all granted
 &lt;/Directory&gt;
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Reiniciamos el servicio apache2:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ a2enmod proxy_http
 root@debian:~ systemctl restart apache2
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/5.png" alt="5" /></p>
  </li>
</ol>

<h3 id="nginx-como-proxy-inverso-de-uwsgi">Nginx como proxy inverso de uwsgi</h3>

<ol>
  <li>
    <p>Configuramos el virtualhost de nginx en <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/guestbook.conf</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> server <span class="o">{</span>
     listen 80<span class="p">;</span>
     server_name www.guestbook-nginx.maria.org<span class="p">;</span>
     root /home/debian/guestbook<span class="p">;</span>
     location / <span class="o">{</span>
         proxy_pass http://localhost:8080<span class="p">;</span>
         include proxy_params<span class="p">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/6.png" alt="6" /></p>
  </li>
  <li>
    <p>Activamos el virtualhost:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ <span class="nb">ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/guestbook.conf /etc/nginx/sites-enabled/guestbook.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Reiniciamos el servicio nginx:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root@debian:~ systemctl restart nginx
</code></pre></div>    </div>

    <p><img src="/assets/images/uwsgi/7.png" alt="7" /></p>
  </li>
</ol>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[Desplegando aplicaciones flask con apache2 + mod_wsgi]]></summary></entry><entry><title type="html">Integridad, firmas y autenticación</title><link href="/seguridad/2022/12/13/integridad.html" rel="alternate" type="text/html" title="Integridad, firmas y autenticación" /><published>2022-12-13T08:17:50+01:00</published><updated>2022-12-13T08:17:50+01:00</updated><id>/seguridad/2022/12/13/integridad</id><content type="html" xml:base="/seguridad/2022/12/13/integridad.html"><![CDATA[<h2 id="tarea-1-firmas-electrónicas">Tarea 1: Firmas electrónicas</h2>

<p>En este primer apartado vamos a trabajar con las firmas electrónicas, para ello te pueden ayudar los siguientes enlaces:</p>

<p><a href="https://www.gnupg.org/gph/es/manual/x75.html">Intercambiar clave</a></p>

<p><a href="https://www.gnupg.org/gph/es/manual/x354.html">Validar otras claves en nuestro anillo de claves públicas</a></p>

<p><a href="https://www.debian.org/events/keysigning.es.html">Firmado de claves (Debian)</a></p>

<ol>
  <li>
    <p>Manda un documento y la firma electrónica del mismo a un compañero. Verifica la firma que tu has recibido.</p>

    <ul>
      <li>Creamos la firma de la clave pública de Maria Jesus Alloza:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg <span class="nt">--list-keys</span>
 gpg <span class="nt">--armor</span> <span class="nt">--export</span> <span class="nt">-a</span> <span class="s2">"Maria Jesus Alloza"</span> <span class="o">&gt;</span> mjar.asc
</code></pre></div>        </div>
      </li>
      <li>Creamos el fichero de prueba y lo firmamos:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">echo</span> <span class="s2">"Fichero de prueba - Criptografía 2"</span> <span class="o">&gt;</span> fichero.txt
 gpg <span class="nt">--detach-sign</span> fichero.txt
</code></pre></div>        </div>
      </li>
      <li>
        <p>Enviamos el fichero y la firma a nuestro compañero.</p>
      </li>
      <li>Verificamos la firma:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg <span class="nt">--verify</span> integridad.txt.sig integridad.txt
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/integridad/1.png" alt="1" /></p>
  </li>
  <li>
    <p>¿Qué significa el mensaje que aparece en el momento de verificar la firma?</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg: Firma correcta de <span class="s2">"Pepe D &lt;josedom24@gmail.com&gt;"</span> <span class="o">[</span>desconocido]
 gpg: ATENCIÓN: ¡Esta clave no está certificada por una firma de confianza!
 gpg:          No hay indicios de que la firma pertenezca al propietario.
 Huellas dactilares de la clave primaria: E8DD 5DA9 3B88 F08A DA1D  26BF 5141 3DDB 0C99 55FC
</code></pre></div>    </div>

    <ul>
      <li>Este mensaje nos indica que al realizar la firma de dicha clave pública, no se ha encontrado ninguna firma de confianza, por lo que no se puede asegurar que la clave pertenezca al propietario.</li>
    </ul>
  </li>
  <li>
    <p>Vamos a crear un anillo de confianza entre los miembros de nuestra clase, para ello.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> - Tu clave pública debe estar en un servidor de claves.
 - Escribe tu fingerprint en un papel y dárselo a tu compañero, para que puede descargarse tu clave pública.
 - Te debes bajar al menos tres claves públicas de compañeros. Firma estas claves.
 - Tu te debes asegurar que tu clave pública es firmada por al menos tres compañeros de la clase.
 - Una vez que firmes una clave se la tendrás que devolver a su dueño, para que otra persona se la firme.
 - Cuando tengas las tres firmas sube la clave al servidor de claves y rellena tus datos en la tabla Claves públicas PGP 2022-2023.
 - Asegurate que te vuelves a bajar las claves públicas de tus compañeros que tengan las tres firmas.
</code></pre></div>    </div>

    <ul>
      <li>Subo mi clave a <code class="language-plaintext highlighter-rouge">keyserver.ubuntu.com</code>, dado que rediris está fuera de servicio:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--keyserver</span> keyserver.ubuntu.com <span class="nt">--send-keys</span> 2614614FABC5378E657019153C7A682537DE4164
</code></pre></div>        </div>
      </li>
      <li>Envío mi fingerprint a mi compañero para que pueda descargar mi clave pública:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--fingerprint</span>
  <span class="nv">$ </span>2614614FABC5378E657019153C7A682537DE4164
</code></pre></div>        </div>
      </li>
      <li>
        <p>Descargo las claves públicas de mis compañeros:
  ```bash
  gpg –keyserver keys.openpgp.org –recv-keys 43140D1577041C18C5830A9B195360276022F67D # Arantxa
  gpg –keyserver keyserver.ubuntu.com –recv-keys 4C6D5995F2B13373 # Antonio
  gpg –keyserver keyserver.ubuntu.com –recv-keys 212357B9A18C9EFA3531CDF994615205285D18A5 # Juan Jesús</p>
      </li>
      <li>Firmo las claves públicas de mis compañeros:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--sign-key</span> 43140D1577041C18C5830A9B195360276022F67D <span class="c"># Arantxa</span>
  gpg <span class="nt">--sign-key</span> 4C6D5995F2B13373 <span class="c"># Antonio</span>
  gpg <span class="nt">--sign-key</span> 212357B9A18C9EFA3531CDF994615205285D18A5 <span class="c"># Juan Jesús</span>
</code></pre></div>        </div>
      </li>
      <li>Envío las claves firmadas a mis compañeros para que las firmen:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--armor</span> <span class="nt">--export</span> <span class="nt">-a</span> <span class="s2">"Arantxa"</span> <span class="o">&gt;</span> arantxa.asc
  gpg <span class="nt">--armor</span> <span class="nt">--export</span> <span class="nt">-a</span> <span class="s2">"Antonio"</span> <span class="o">&gt;</span> antonio.asc
  gpg <span class="nt">--armor</span> <span class="nt">--export</span> <span class="nt">-a</span> <span class="s2">"Juan Jesús"</span> <span class="o">&gt;</span> juanjesus.asc
</code></pre></div>        </div>
      </li>
      <li>Importo mi clave ya firmada por mis compañeros:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--import</span> arantxa.asc
  gpg <span class="nt">--import</span> antonio.asc
  gpg <span class="nt">--import</span> juanjesus.asc
</code></pre></div>        </div>
      </li>
      <li>Compruebo que mis compañeros han firmado mi clave:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--list-sigs</span> 2614614FABC5378E657019153C7A682537DE4164
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/integridad/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Muestra las firmas que tiene tu clave pública.</p>

    <p><img src="/assets/images/integridad/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Comprueba que ya puedes verificar sin “problemas” una firma recibida por una persona en la que confías.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg <span class="nt">--verify</span> integridad.txt.sig integridad.txt
</code></pre></div>    </div>
  </li>
  <li>
    <p>Comprueba que puedes verificar con confianza una firma de una persona en las que no confías, pero sin embargo si confía otra persona en la que tu tienes confianza total.</p>

    <ul>
      <li>Importo la clave de antonio con su anillo de confianza:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg <span class="nt">--import</span> 4C6D5995F2B13373
</code></pre></div>        </div>
      </li>
      <li>Edito la confianza de la clave de antonio:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg  <span class="nt">--edit-key</span> 4C6D5995F2B13373
 trust
 5
 quit
</code></pre></div>        </div>
      </li>
      <li>
        <p>Antonio le ha mandado su clave a Roberto y este a su vez a mi, por lo que yo tengo confianza en la clave de Antonio.</p>
      </li>
      <li>
        <p>Ahora yo, le mando a Roberto un fichero firmado por mi proia clave, y al tener la clave de Antonio, el cual previamente me ha dado confianza mutuamente y viceversa, puede verificar mi fichero sin problemas.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--verify</span> fichero.txt.sig fichero.txt
</code></pre></div>        </div>

        <p><img src="/assets/images/integridad/4.png" alt="4" /></p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="tarea-2-correo-seguro-con-evolutionthunderbird">Tarea 2: Correo seguro con evolution/thunderbird</h2>

<ol>
  <li>
    <p>Configura el cliente de correo evolution/thunderbird con tu cuenta de correo habitual.</p>

    <ul>
      <li>Instalamos thunderbird:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt <span class="nb">install </span>thunderbird-l10n-es-es
</code></pre></div>        </div>
      </li>
      <li>Configuramos nuestra cuenta habitual de correo.</li>
    </ul>
  </li>
  <li>
    <p>Añade a la cuenta las opciones de seguridad para poder enviar correos firmados con tu clave privada o cifrar los mensajes para otros destinatarios.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg <span class="nt">--export-secret-keys</span> <span class="nt">--armor</span> 2614614FABC5378E657019153C7A682537DE4164 <span class="o">&gt;</span> clave-correo.asc
</code></pre></div>    </div>

    <p><img src="/assets/images/integridad/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Envía y recibe varios mensajes con tus compañeros y comprueba el funcionamiento adecuado de GPG.</p>

    <p><img src="/assets/images/integridad/9.png" alt="9" /></p>

    <p><img src="/assets/images/integridad/10.png" alt="10" /></p>
  </li>
</ol>

<p><strong>EXTRA</strong> Añadid a la tarea 2 un último punto consistente en enviarle un correo electrónico al profesor un mensaje firmado por vosotros y que solo pueda descifrar yo.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Para realizar esta actividad extra, vamos a importar la clave pública del profesor a nuestro sistema, y la exportamos en formato ASCII para poder enviarla por correo electrónico.

```bash
gpg --keyserver keyserver.ubuntu.com --recv-keys 8DEB2BE5
---
gpg --export --armor 8DEB2BE5 &gt; clave-profesor.asc
```
</code></pre></div></div>

<p><img src="/assets/images/integridad/extra.png" alt="extra" /></p>

<h2 id="tarea-3-integridad-de-ficheros">Tarea 3: Integridad de ficheros</h2>

<ol>
  <li>
    <p>Para validar el contenido de la imagen CD, solo asegúrese de usar la herramienta apropiada para sumas de verificación. Para cada versión publicada existen archivos de suma de comprobación con algoritmos fuertes (SHA256 y SHA512); debería usar las herramientas sha256sum o sha512sum para trabajar con ellos.</p>

    <ul>
      <li>Descargamos la imagen de debian 11.0.0:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-11.6.0-amd64-netinst.iso
</code></pre></div>        </div>
      </li>
      <li>Descargamos el fichero de sumas de comprobación:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA512SUMS
</code></pre></div>        </div>
      </li>
      <li>Comprobamos la integridad de la imagen:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sha512sum</span> <span class="nt">--check</span> <span class="nt">--ignore-missing</span> SHA512SUMS
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/integridad/6.png" alt="6" /></p>
  </li>
  <li>
    <p>Verifica que el contenido del hash que has utilizado no ha sido manipulado, usando la firma digital que encontrarás en el repositorio. Puedes encontrar una guía para realizarlo en este artículo: How to verify an authenticity of downloaded Debian ISO images.</p>

    <ul>
      <li>Descargamos la firma digital del repositorio:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA512SUMS.sign
</code></pre></div>        </div>
      </li>
      <li>Verificamos la firma:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg <span class="nt">--verify</span> SHA512SUMS.sign SHA512SUMS
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/integridad/7.png" alt="7" /></p>

    <p>Vemos que nos ha saltado el error de que es impossible verificar la firma, esto es debido a que no tenemos la clave publica de la persona que ha firmado el fichero. Para solucionarlo, importamos la clave publica de la persona que ha firmado el fichero:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```bash
 gpg --keyserver keyserver.ubuntu.com --recv-keys DF9B9C49EAA9298432589D76DA87E80D6294BE9B
 ```
</code></pre></div>    </div>

    <p>Y verificamos la firma de nuevo:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```bash
 gpg --verify SHA512SUMS.sign SHA512SUMS
 ```
</code></pre></div>    </div>

    <p><img src="/assets/images/integridad/8.png" alt="8" /></p>

    <p>Vemos que ahora si que nos ha verificado la firma correctamente.</p>
  </li>
</ol>

<h2 id="tarea-4-integridad-y-autenticidad-apt-secure">Tarea 4: Integridad y autenticidad (apt secure)</h2>

<p>Busca información sobre apt secure y responde las siguientes preguntas:</p>

<ol>
  <li>¿Qué software utiliza apt secure para realizar la criptografía asimétrica?
    <ul>
      <li>gpg.</li>
    </ul>
  </li>
  <li>¿Para que sirve el comando apt-key? ¿Qué muestra el comando apt-key list?
    <ul>
      <li>apt-key permite administrar las claves de los repositorios de paquetes.</li>
      <li>Muestra las claves que tenemos en el sistema.</li>
    </ul>
  </li>
  <li>En que fichero se guarda el anillo de claves que guarda la herramienta apt-key?
    <ul>
      <li>/etc/apt/trusted.gpg.d/</li>
    </ul>
  </li>
  <li>¿Qué contiene el archivo Release de un repositorio de paquetes?. ¿Y el archivo Release.gpg?. Puedes ver estos archivos en el repositorio http://ftp.debian.org/debian/dists/Debian10.1/. Estos archivos se descargan cuando hacemos un apt update.
    <ul>
      <li>Contiene información sobre los paquetes que contiene el repositorio, como la versión, la arquitectura, etc.</li>
      <li>La firma digital del fichero Release.</li>
    </ul>
  </li>
  <li>Explica el proceso por el cual el sistema nos asegura que los ficheros que estamos descargando son legítimos.
    <ul>
      <li>El sistema descarga el fichero Release, fichero Release.gpg y el fichero packages.</li>
      <li>Comprueba que el fichero Release.gpg es una firma válida del fichero Release.</li>
      <li>Se compara el checksum del fichero packages con el que se encuentra en el fichero Release. En caso de que no coincidan, se descarga el fichero packages y se comprueba su integridad.</li>
      <li>Se descarga el fichero Packages.gz y se comprueba su integridad. En caso de que coincida, se descomprime y se comprueba que el fichero Packages es una firma válida del fichero Packages.gz.</li>
    </ul>
  </li>
  <li>Añade de forma correcta el repositorio de virtualbox añadiendo la clave pública de virtualbox como se indica en la documentación.
    <ul>
      <li>Añadimos las claves públicas de virtualbox a nuestro sistema.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  wget <span class="nt">-q</span> https://www.virtualbox.org/download/oracle<span class="se">\_</span>vbox<span class="se">\_</span>2016.asc <span class="nt">-O-</span> | <span class="nb">sudo </span>apt-key add -
  wget <span class="nt">-q</span> https://www.virtualbox.org/download/oracle<span class="se">\_</span>vbox.asc <span class="nt">-O-</span> | <span class="nb">sudo </span>apt-key add -
</code></pre></div>        </div>
      </li>
      <li>Añadimos el repositorio de virtualbox a nuestro sistema.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="se">\"</span>deb <span class="se">\[</span><span class="nb">arch</span><span class="o">=</span>amd64] https://download.virtualbox.org/virtualbox/debian buster contrib<span class="se">\"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/virtualbox.list
</code></pre></div>        </div>
      </li>
      <li>Actualizamos el sistema.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt update
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h2 id="tarea-5-autentificación-ejemplo-ssh">Tarea 5: Autentificación: ejemplo SSH</h2>

<ol>
  <li>
    <p>Explica los pasos que se producen entre el cliente y el servidor para que el protocolo cifre la información que se transmite. ¿Para qué se utiliza la criptografía simétrica? ¿Y la asimétrica?</p>

    <ul>
      <li>
        <p>La criptografía simétrica proporciona un grado de autentificación porque los datos se cifran y descifran con la misma clave. Siempre que ambas partes mantengan la clave en secreto, nadie más podrá descifrar los datos. Su uso es principalmente para cifrar conexiones.</p>
      </li>
      <li>
        <p>La criptografía asimétrica utiliza un par de claves, una pública y otra privada. La clave pública se utiliza para cifrar la información, mientras que la clave privada se utiliza para descifrarla. Se utiliza para autentificar a los usuarios, ya que solo el usuario con la clave privada puede descifrar la información cifrada con la clave pública.</p>
      </li>
    </ul>
  </li>
  <li>Explica los dos métodos principales de autentificación: por contraseña y utilizando un par de claves públicas y privadas.
    <ul>
      <li>Por contraseña: el usuario introduce la contraseña en el cliente y el servidor la compara con la que tiene almacenada. Si coinciden, el usuario se autentifica.</li>
      <li>Con par de claves:
        <ol>
          <li>El cliente genera un par de claves pública y privada.</li>
          <li>El cliente envía la clave pública al servidor y la almacena en el fichero ~/.ssh/authorized_keys.</li>
          <li>Ya almacenada la clave pública, en la primera conexión, el servidor solicitará al cliente que se autentifique mediante la clave privada. Si la clave privada es correcta, el servidor autentifica al cliente.</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>En el cliente para que sirve el contenido que se guarda en el fichero ~/.ssh/know_hosts?
    <ul>
      <li>Se utiliza para autenticar a los servidores a los que nos conectamos.En este fichero nos encontraremos todas las claves públicas de los servidores a los que nos hemos conectado. De esta forma, cuando nos conectemos a un servidor, el cliente comprobará que la clave pública del servidor coincide con la que tiene almacenada en el fichero.</li>
    </ul>
  </li>
  <li>¿Qué significa este mensaje que aparece la primera vez que nos conectamos a un servidor?
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ssh debian@172.22.200.74
 The authenticity of host 172.22.200.74 <span class="o">(</span>172.22.200.74<span class="o">)</span> can t be established.
 ECDSA key fingerprint is SHA256:7ZoNZPCbQTnDso1meVSNoKszn38ZwUI4i6saebbfL4M.
 Are you sure you want to <span class="k">continue </span>connecting <span class="o">(</span><span class="nb">yes</span>/no<span class="o">)</span>?
</code></pre></div>    </div>
    <ul>
      <li>El cliente no tiene almacenada la clave pública del servidor, por lo que no puede autentificarlo. Por ello, nos pregunta si queremos continuar la conexión.</li>
    </ul>
  </li>
  <li>En ocasiones cuando estamos trabajando en el cloud, y reutilizamos una ip flotante nos aparece este mensaje:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ssh debian@172.22.200.74
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
 Someone could be eavesdropping on you right now <span class="o">(</span>man-in-the-middle attack<span class="o">)!</span>
 It is also possible that a host key has just been changed.
 The fingerprint <span class="k">for </span>the ECDSA key sent by the remote host is
 SHA256:W05RrybmcnJxD3fbwJOgSNNWATkVftsQl7EzfeKJgNc.
 Please contact your system administrator.
 Add correct host key <span class="k">in</span> /home/jose/.ssh/known_hosts to get rid of this message.
 Offending ECDSA key <span class="k">in</span> /home/jose/.ssh/known_hosts:103
   remove with:
   ssh-keygen <span class="nt">-f</span> <span class="s2">"/home/jose/.ssh/known_hosts"</span> <span class="nt">-R</span> <span class="s2">"172.22.200.74"</span>
 ECDSA host key <span class="k">for </span>172.22.200.74 has changed and you have requested strict checking.
</code></pre></div>    </div>

    <ul>
      <li>Cuando nos sale en pantalla este mensaje, es porque el servidor ha cambiado su clave pública pero la dirección IP del host no ha cambiando. Nos da un aviso de que alguien podría estar haciendo un ataque de man-in-the-middle. Para solucionarlo, debemos eliminar la clave pública del servidor del fichero ~/.ssh/known_hosts.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ssh-keygen <span class="nt">-f</span> <span class="s2">"/home/jose/.ssh/known_hosts"</span> <span class="nt">-R</span> <span class="s2">"ip"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>¿Qué guardamos y para qué sirve el fichero en el servidor ~/.ssh/authorized_keys?
    <ul>
      <li>En este fichero es único para cada usuario y en él se encuentran las claves públicas de los clientes que se han conectado al servidor. De esta manera, el servidor tiene almacenadas las claves públicas de los clientes que se han conectado a él y puede autentificarlos.</li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Tarea 1: Firmas electrónicas]]></summary></entry><entry><title type="html">Talleres DNS</title><link href="/hlc+sri/2022/12/12/talleres-dns.html" rel="alternate" type="text/html" title="Talleres DNS" /><published>2022-12-12T08:17:50+01:00</published><updated>2022-12-12T08:17:50+01:00</updated><id>/hlc+sri/2022/12/12/talleres-dns</id><content type="html" xml:base="/hlc+sri/2022/12/12/talleres-dns.html"><![CDATA[<h2 id="talleres-dns">Talleres DNS</h2>

<h3 id="taller-1-instalación-y-configuración-del-servidor-bind9-en-nuestra-red-local">Taller 1: Instalación y configuración del servidor bind9 en nuestra red local.</h3>

<ol>
  <li>
    <p>Creamos una máquina en Proxmox configurada con cloud init e instalamos bind9.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt <span class="nb">install </span>bind9
</code></pre></div>    </div>
  </li>
  <li>
    <p>Realizamos la siguiente configuración para que funcione como servidor.</p>

    <ul>
      <li>
        <p>En el fichero <code class="language-plaintext highlighter-rouge">/etc/default/named/</code> modificamos el fichero con la siguiente línea:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">OPTIONS</span><span class="o">=</span><span class="s2">"-4 -f -u bind"</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Además, debemos tener en cuenta que solo se permitirán consultas desde la red local. En caso de realizarlo con una VPNm debemos modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.options</code></p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  allow-query <span class="o">{</span>172.29.0.0/16<span class="p">;</span> 172.22.0.0/16<span class="p">;</span><span class="o">}</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Reiniciamos el servidor y realizamos la siguiente consulta desde nuestro pc:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dig @172.22.7.159 www.josedomingo.org
</code></pre></div>        </div>

        <p><img src="/assets/images/dns/1.png" alt="1" /></p>
      </li>
      <li>¿Cuánto ha tardado en realizar la consulta?
        <ul>
          <li>367 msec</li>
        </ul>
      </li>
      <li>¿Qué consultas se han realizado para averiguar la dirección IP?
        <ul>
          <li>La consulta es de tipo A y se ha realizado a la zona directa de josedomingo.org.</li>
        </ul>
      </li>
      <li>Realizamos de nuevo la consulta. ¿Cuánto ha tardado ahora?
        <ul>
          <li>
            <p>0 msec</p>

            <p><img src="/assets/images/dns/2.png" alt="2" /></p>
          </li>
        </ul>
      </li>
      <li>¿Por qué ha tardado menos?
        <ul>
          <li>Porque ya se ha realizado la consulta anteriormente y se ha guardado en el caché.</li>
        </ul>
      </li>
      <li>¿Qué consultas se han realizado para averiguar la dirección IP?
        <ul>
          <li>La consulta es de tipo A y se ha realizado a la zona directa de josedomingo.org.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Creamos una zona directa para nuestro dominio <code class="language-plaintext highlighter-rouge">maria.org</code>, añadiendo al fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.local</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> zone <span class="s2">"maria.org"</span> <span class="o">{</span>
 <span class="nb">type </span>master<span class="p">;</span>
 file <span class="s2">"db.maria.org"</span><span class="p">;</span>
 <span class="o">}</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/3.png" alt="3" /></p>
  </li>
  <li>
    <p>Creamos el fichero de la zona <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.maria.org</code> y el fichero quedaría de la siguiente manera:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$TTL</span>    86400
 @       IN      SOA     dns1.maria.org. root.maria.org. <span class="o">(</span>
                                1         <span class="p">;</span> Serial
                           604800         <span class="p">;</span> Refresh
                            86400         <span class="p">;</span> Retry
                          2419200         <span class="p">;</span> Expire
                            86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
 <span class="p">;</span>
 @	IN	NS		dns1.maria.org.
 @	IN	MX	10	correo.maria.org.

 <span class="nv">$ORIGIN</span> maria.org.

 dns1			IN	A	172.22.7.159
 correo			IN	A	172.22.200.101
 asterix		    IN	A	172.22.200.102
 obelix			IN	A	172.22.200.103
 www			    IN	CNAME	asterix
 informatica		IN	CNAME	asterix
 ftp			    IN	CNAME	obelix
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Creamos una zona inversa:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> zone <span class="s2">"22.172.in-addr.arpa"</span> <span class="o">{</span>
 <span class="nb">type </span>master<span class="p">;</span>
 file <span class="s2">"db.172.22.0.0"</span><span class="p">;</span>
 <span class="o">}</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/7.png" alt="7" /></p>

    <p>Y descomentamos la línea <code class="language-plaintext highlighter-rouge">include "/etc/bind/zones.rfc1918";</code> para así incluir todas las zonas correspondientes a las redes privadas para que no se pregunten por ellas al servidor DNS raíz.</p>

    <p><img src="/assets/images/dns/5.png" alt="5" /></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ...
 zone <span class="s2">"21.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
 //zone <span class="s2">"22.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
 zone <span class="s2">"23.172.in-addr.arpa"</span>  <span class="o">{</span> <span class="nb">type </span>master<span class="p">;</span> file <span class="s2">"/etc/bind/db.empty"</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
 ...
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/6.png" alt="6" /></p>
  </li>
  <li>
    <p>Creamos el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.172.22.0.0</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$TTL</span>    86400
 @       IN      SOA     dns1.maria.org. root.maria.org. <span class="o">(</span>
                                 1         <span class="p">;</span> Serial
                             604800        <span class="p">;</span> Refresh
                             86400         <span class="p">;</span> Retry
                             2419200       <span class="p">;</span> Expire
                             86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
 <span class="p">;</span>
 @	IN  NS      dns1.maria.org.

 <span class="nv">$ORIGIN</span> 22.172.in-addr.arpa.

 159.7		IN	PTR		dns1.maria.org.
 101.200		IN	PTR		correo.maria.org.
 102.200		IN 	PTR		asterix.maria.org.
 103.200		IN 	PTR		obelix.maria.org.
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/7.png" alt="7" /></p>
  </li>
  <li>
    <p>Reiniciamos el servicio. Y configuramos el nuevo DNS en otra máquina, desde la que vamos a realizar las siguentes consultas con dig.</p>
  </li>
</ol>

<ul>
  <li>
    <p>Incluimos en el fichero <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> la IP del servidor DNS:</p>

    <p><img src="/assets/images/dns/8.png" alt="8" /></p>

    <ul>
      <li>
        <p>Dirección IP de una máquina o servicio.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dig www.maria.org
</code></pre></div>        </div>

        <p><img src="/assets/images/dns/9.png" alt="9" /></p>
      </li>
      <li>
        <p>Servidor DNS con autoridad de dominio:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dig ns www.maria.org
</code></pre></div>        </div>

        <p><img src="/assets/images/dns/10.png" alt="10" /></p>
      </li>
      <li>
        <p>Servidor de correo del dominio.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dig mx maria.org
</code></pre></div>        </div>

        <p><img src="/assets/images/dns/11.png" alt="11" /></p>
      </li>
      <li>
        <p>Una resolución inversa.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  dig <span class="nt">-x</span> 172.22.200.103
</code></pre></div>        </div>

        <p><img src="/assets/images/dns/12.png" alt="12" /></p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="taller-2-instalación-y-configuración-de-un-servidor-dns-esclavo">Taller 2: Instalación y configuración de un servidor DNS esclavo.</h3>

<p>Un servidor DNS esclavo contiene una réplica de las zonas del servidor maestro. Se debe producir una transferencia de zona (el esclavo hace una solicitud de la zona completa al maestro) para que se sincronicen los servidores.</p>

<p>Antes que nada, cabe decir que el número de serie de la zona de transferencia tiene como función decirle al esclavo si la zona ha cambiado o no. Si el número de serie del esclavo es menor que el del maestro, el esclavo solicitará la zona al maestro. Si el número de serie del esclavo es mayor que el del maestro, el esclavo no solicitará la zona al maestro.</p>

<p>Los diferentes tiempos que se configuran enel registro <code class="language-plaintext highlighter-rouge">SOA</code> son:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Refresh</code>: Tiempo que debe pasar antes de que el esclavo vuelva a consultar al maestro si la zona ha cambiado.</li>
  <li><code class="language-plaintext highlighter-rouge">Retry</code>: Tiempo que debe pasar antes de que el esclavo vuelva a consultar al maestro si la zona no ha cambiado.</li>
  <li><code class="language-plaintext highlighter-rouge">Expire</code>: Tiempo que debe pasar antes de que el esclavo considere que la zona ha expirado y la borre.</li>
  <li><code class="language-plaintext highlighter-rouge">Negative Cache TTL</code>: Tiempo que debe pasar antes de que el esclavo considere que la zona ha expirado.</li>
</ul>

<ol>
  <li>
    <p>Creamos otra máquina en Proxmox cuyo rol será de Servidor DNS esclavo, al que le instalaremos bind9 y lo nombraremos con el nombre <code class="language-plaintext highlighter-rouge">dns2.maria.org</code>. La transferencia de zona entre maestro y esclavo usará el puerto 53/tcp, que abriremos en el grupo de seguridad.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">sudo </span>ufw allow 53/tcp
</code></pre></div>    </div>
  </li>
  <li>
    <p>Solo deberemos aceptar las transferencias de zonas hacia los esclavos autorizados, que lo haremos en el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.options</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> options <span class="o">{</span>
 ...
 allow-transfer <span class="o">{</span> none<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
 ...
 <span class="o">}</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/13.png" alt="13" /></p>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.local</code> para definir la zona del DNS maestro:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> include <span class="s2">"/etc/bind/zones.rfc1918"</span><span class="p">;</span>
 zone <span class="s2">"maria.org"</span> <span class="o">{</span>
     <span class="nb">type </span>master<span class="p">;</span>
     file <span class="s2">"db.maria.org"</span><span class="p">;</span>
     allow-transfer <span class="o">{</span> 172.22.6.208<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
     notify <span class="nb">yes</span><span class="p">;</span>
 <span class="o">}</span><span class="p">;</span>
 zone <span class="s2">"22.172.in-addr.arpa"</span> <span class="o">{</span>
     <span class="nb">type </span>master<span class="p">;</span>
     file <span class="s2">"db.172.22.0.0"</span><span class="p">;</span>
     allow-transfer <span class="o">{</span> 172.22.6.208<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
     notify <span class="nb">yes</span><span class="p">;</span>
 <span class="o">}</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/14.png" alt="14" /></p>
  </li>
  <li>
    <p>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.local</code> para definir la zona del DNS esclavo:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> include <span class="s2">"/etc/bind/zones.rfc1918"</span><span class="p">;</span>
 zone <span class="s2">"maria.org"</span> <span class="o">{</span>
     <span class="nb">type </span>slave<span class="p">;</span>
     file <span class="s2">"db.maria.org"</span><span class="p">;</span>
     masters <span class="o">{</span> 172.22.6.208<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
 <span class="o">}</span><span class="p">;</span>
 zone <span class="s2">"22.172.in-addr.arpa"</span> <span class="o">{</span>
     <span class="nb">type </span>slave<span class="p">;</span>
     file <span class="s2">"db.172.22.0.0"</span><span class="p">;</span>
     masters <span class="o">{</span> 172.22.6.208<span class="p">;</span> <span class="o">}</span><span class="p">;</span>
 <span class="o">}</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/15.png" alt="15" /></p>
  </li>
  <li>
    <p>Añadimos la información del DNS esclavo en las zonas. Añadimos un nuevo registro NS y su correspondiente registro <code class="language-plaintext highlighter-rouge">A</code> en el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.maria.org</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$TTL</span>    86400
 @       IN      SOA     dns1.maria.org. root.maria.org. <span class="o">(</span>
                             1         <span class="p">;</span> Serial
                         604800        <span class="p">;</span> Refresh
                         86400         <span class="p">;</span> Retry
                         2419200       <span class="p">;</span> Expire
                         86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
 <span class="p">;</span>
 @	IN	NS		dns1.maria.org.
 @	IN	NS		dns2.maria.org.
 @	IN	MX	10	correo.maria.org.

 <span class="nv">$ORIGIN</span> maria.org.

 dns1		IN	A         172.22.7.159
 dns2		IN	A	10    172.22.6.208
 ...
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/16.png" alt="16" /></p>

    <p>Y modificamos el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.172.22.0.0</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$TTL</span>    86400
 @       IN      SOA     dns1.maria.org. root.maria.org. <span class="o">(</span>
                               1         <span class="p">;</span> Serial
                          604800         <span class="p">;</span> Refresh
                           86400         <span class="p">;</span> Retry
                         2419200         <span class="p">;</span> Expire
                           86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
 <span class="p">;</span>
 @	IN	NS		dns1.maria.org.
 @	IN	NS		dns2.maria.org.  
    
 <span class="nv">$ORIGIN</span> 22.172.in-addr.arpa.    
 159.7		IN	PTR		dns1.maria.org.
 208.6		IN	PTR		dns2.maria.org.  
 ...
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/17.png" alt="17" /></p>
  </li>
  <li>
    <p>Reiniciamos los servidores DNS, tanto el maestro como el esclavo.</p>
  </li>
  <li>
    <p>En caso de que nos salga algún error, probamos con los siguientes comandos:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> named-checkzone maria.org /var/cache/bind/db.maria.org
 named-checkzone 22.172.in-addr.arpa /var/cache/bind/db.172.22.0.0  
 <span class="c">#Para detectar errores de configuración en `named.conf`, podemos usar:</span>
 named-checkconf
</code></pre></div>    </div>
  </li>
  <li>Configuramos el cliente con los dos servidores DNS. En el fichero <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> utiliza dos directivas <code class="language-plaintext highlighter-rouge">nameserver</code>. Si hacemos  una consulta desde un cliente, y el dns maestro no responde, responderá el esclavo. Prueba a realizar una consulta.
    <ul>
      <li>¿Quién ha respondido?.
        <ul>
          <li>Al realizar <code class="language-plaintext highlighter-rouge">dig www.maria.org</code> el servdor que responde es el maestro.</li>
        </ul>
      </li>
    </ul>

    <p><a href="/assets/images/dns/18.png"><img src="/assets/images/dns/18.png" alt="18" /></a></p>

    <p>Apagamos el servidor maestro, y volvemos a hacer la misma consulta.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">---Apagamos</span> el servicio de la máquina dns1
 <span class="nv">$ </span><span class="nb">sudo </span>systemctl stop bind9
 <span class="nt">---Hacemos</span> la consulta
 <span class="nv">$ </span>dig www.maria.org
</code></pre></div>    </div>

    <ul>
      <li>¿Ha respondido el servidor DNS esclavo?
        <ul>
          <li>Al apagar el servidor maestro y realizar la consulta, el servidor que responde es el esclavo.</li>
        </ul>
      </li>
    </ul>

    <p><a href="/assets/images/dns/19.png"><img src="/assets/images/dns/19.png" alt="19" /></a></p>
  </li>
  <li>
    <p>Modificamos la zona, y para ello lo modificamos en el servidor maestro en el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.maria.org</code> añadiendo:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ...
 prueba		IN  A   172.22.6.208
 ...
</code></pre></div>    </div>
  </li>
  <li>
    <p>Desde el cliente realizaremos una consulta para preguntar por la dirección IP de <code class="language-plaintext highlighter-rouge">prueba.maria.org</code>.</p>

    <ul>
      <li>¿Quién ha respondido?.
        <ul>
          <li>Al realizar <code class="language-plaintext highlighter-rouge">dig prueba.maria.org</code> el servdor que responde es el maestro.</li>
        </ul>
      </li>
    </ul>

    <p><a href="/assets/images/dns/20.png"><img src="/assets/images/dns/20.png" alt="20" /></a></p>

    <p>Apagamos el servidor maestro, y volvemos a hacer la misma consulta.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">---Apagamos</span> el servicio de la máquina dns1
<span class="nv">$ </span><span class="nb">sudo </span>systemctl stop bind9
<span class="nt">---Hacemos</span> la consulta
<span class="nv">$ </span>dig www.maria.org
</code></pre></div>    </div>

    <ul>
      <li>¿Ha respondido el servidor DNS esclavo?
        <ul>
          <li>Al apagar el servidor maestro y realizar la consulta, el servidor que responde es el esclavo.</li>
        </ul>
      </li>
    </ul>

    <p>Comprobamos en el esclavo que se ha producido la transferencia.
<img src="/assets/images/dns/21.png" alt="21" /></p>
  </li>
  <li>
    <p><strong>EXTRA</strong>. Crea un registro nuevo en el maestro y regístrarlo en el esclavo.</p>

    <ul>
      <li>En el maestro añadimos el registro <code class="language-plaintext highlighter-rouge">prueba2</code> con la IP <code class="language-plaintext highlighter-rouge">172.22.7.169</code> en el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.maria.org</code>:</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
prueba2		IN  A   172.22.7.169
...
</code></pre></div>    </div>

    <ul>
      <li>Modificamos el fichero <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> del host para realizar las pruebas.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
nameserver 172.22.7.159
nameserver 172.22.6.208
...
</code></pre></div>    </div>

    <ul>
      <li>Hacemos la consulta desde el cliente para comprobar que se ha registrado correctamente y comprobamos que responde el servidor maestro.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>dig prueba2.maria.org
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/22.png" alt="22" /></p>

    <ul>
      <li>Apagamos el servidor maestro y volvemos a hacer la consulta. En este caso, el servidor que responde es el esclavo.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>systemctl stop bind9
<span class="c">#Hacemos la consulta en el host</span>
<span class="nv">$ </span>dig prueba2.maria.org
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/23.png" alt="23" /></p>
  </li>
</ol>

<h3 id="taller-3-delegación-de-subdominios-con-bind9">Taller 3: Delegación de subdominios con bind9</h3>

<ol>
  <li>Crea una nueva máquina e instala un servidor DNS bind9, será el servidor DNS con autoridad para la zona delegada que será <code class="language-plaintext highlighter-rouge">informatica.maria.org</code>. Nombra de manera adecuada esta máquina para que tenga el nombre <code class="language-plaintext highlighter-rouge">dns.informatica.maria.org</code>.
    <ul>
      <li>Tendremos el servidor <code class="language-plaintext highlighter-rouge">dns1.maria.org</code> (y el esclavo <code class="language-plaintext highlighter-rouge">dns2.maria.org</code>) con autoridad para la zona <code class="language-plaintext highlighter-rouge">maria.org</code>. En esta zona, por ejemplo, puede existir el nombre <code class="language-plaintext highlighter-rouge">www.maria.org</code>.</li>
      <li>Tendremos el servidor <code class="language-plaintext highlighter-rouge">dns.informatica.maria.org</code> con autoridad sobre el subdominio delegado, es decir tendrá autoridad para la zona <code class="language-plaintext highlighter-rouge">informatica.maria.org</code>. En esta zona, por ejemplo, puede existir el nombre <code class="language-plaintext highlighter-rouge">www.informatica.maria.org</code>.</li>
    </ul>
  </li>
  <li>
    <p>Vamos a realizar la delegación de autoridad para el subdominio en el servidor DNS principal (en <code class="language-plaintext highlighter-rouge">dns1.maria.org</code>) para ello modificamos el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.maria.org</code> añadiendo las siguientes líneas donde realizamos la delegación:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ...
 <span class="nv">$ORIGIN</span> informatica.maria.org. 
 @		IN	 NS		dns
 dns 	IN	 A 		172.22.2.218
 ...
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/24.png" alt="24" /></p>
  </li>
  <li>
    <p>Ahora vamos a configurar el servidor DNS delegado. Por lo tanto en el servidor <code class="language-plaintext highlighter-rouge">dns.informatica.maria.org</code> creamos una nueva zona en el fichero <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.local</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     zone <span class="s2">"informatica.maria.org"</span> <span class="o">{</span>
     <span class="nb">type </span>master<span class="p">;</span>
     file <span class="s2">"db.informatica.maria.org"</span><span class="p">;</span>
 <span class="o">}</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/25.png" alt="25" /></p>

    <p>Y creamos la zona en el fichero <code class="language-plaintext highlighter-rouge">/var/cache/bind/db.informatica.maria.org</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$TTL</span>    86400
 @       IN      SOA     dns.informatica.maria.org. root.informatica.maria.org. <span class="o">(</span>
                               1         <span class="p">;</span> Serial
                          604800         <span class="p">;</span> Refresh
                           86400         <span class="p">;</span> Retry
                         2419200         <span class="p">;</span> Expire
                           86400 <span class="o">)</span>       <span class="p">;</span> Negative Cache TTL
 <span class="p">;</span>
 @	IN	NS		dns.informatica.maria.org.
 @	IN	MX	10	mail.informatica.maria.org.
 <span class="nv">$ORIGIN</span> informatica.maria.org.
 dns			IN	A		172.22.2.218
 mail		IN	A		172.22.200.121 
 web			IN	A 		172.22.200.122
 www			IN 	CNAME 	web
 ...
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/26.png" alt="26" /></p>
  </li>
  <li>No modifiques el fichero <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> del cliente, es decir, las consultas se hacen al servidor DNS principal, cuando preguntemos por un nombre en la zona delegada el servidor DNS principal, preguntará al servidor DNS delegado y guardara la respuesta en su caché. Pregunta por la dirección ip del nombre www.informatica.maria.org. 
 ¿Quién ha respondido?
    <ul>
      <li>El servidor DNS que ha respondido es el servidor maestro <code class="language-plaintext highlighter-rouge">dns1.maria.org</code> ya que es el que tiene la autoridad sobre la zona <code class="language-plaintext highlighter-rouge">maria.org</code>.</li>
    </ul>
  </li>
</ol>

<h4 id="comprobaciones-de-funcionamiento">Comprobaciones de funcionamiento</h4>

<ol>
  <li>
    <p>Vamos a realizar una consulta para averiguar la dirección IP de <code class="language-plaintext highlighter-rouge">www.informatica.maria.org</code> desde el cliente sin modificar el fichero <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> del cliente.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>dig www.informatica.maria.org
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/27.png" alt="27" /></p>
  </li>
  <li>
    <p>Realizamos una consulta para averiguar el servidor DNS con autoridad para la zona del dominio <code class="language-plaintext highlighter-rouge">informatica.maria.org</code>. ¿Es el mimso que el servidor DNS con autoridad para la zona del dominio <code class="language-plaintext highlighter-rouge">maria.org</code>?</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>dig ns wwwinformatica.maria.org
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/28.png" alt="28" /></p>

    <ul>
      <li>El servidor DNS con autoridad para la zona del dominio <code class="language-plaintext highlighter-rouge">informatica.maria.org</code> es el servidor <code class="language-plaintext highlighter-rouge">dns.informatica.maria.org</code> y el servidor DNS con autoridad para la zona del dominio <code class="language-plaintext highlighter-rouge">maria.org</code> es el servidor <code class="language-plaintext highlighter-rouge">dns1.maria.org</code>.</li>
    </ul>
  </li>
  <li>
    <p>Realizamos una consulta para averiguar el servidor de correo confgurado para <code class="language-plaintext highlighter-rouge">informatica.maria.org</code>.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>dig mx informatica.maria.org
</code></pre></div>    </div>

    <p><img src="/assets/images/dns/29.png" alt="29" /></p>
  </li>
  <li>
    <p><strong>EXTRA</strong> Crea un nuevo registro en la zona del subdominio.</p>
  </li>
</ol>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Talleres DNS Taller 1: Instalación y configuración del servidor bind9 en nuestra red local. Creamos una máquina en Proxmox configurada con cloud init e instalamos bind9. apt install bind9 Realizamos la siguiente configuración para que funcione como servidor. En el fichero /etc/default/named/ modificamos el fichero con la siguiente línea: OPTIONS="-4 -f -u bind" Además, debemos tener en cuenta que solo se permitirán consultas desde la red local. En caso de realizarlo con una VPNm debemos modificar el fichero /etc/bind/named.conf.options allow-query {172.29.0.0/16; 172.22.0.0/16;}; Reiniciamos el servidor y realizamos la siguiente consulta desde nuestro pc: dig @172.22.7.159 www.josedomingo.org ¿Cuánto ha tardado en realizar la consulta? 367 msec ¿Qué consultas se han realizado para averiguar la dirección IP? La consulta es de tipo A y se ha realizado a la zona directa de josedomingo.org. Realizamos de nuevo la consulta. ¿Cuánto ha tardado ahora? 0 msec ¿Por qué ha tardado menos? Porque ya se ha realizado la consulta anteriormente y se ha guardado en el caché. ¿Qué consultas se han realizado para averiguar la dirección IP? La consulta es de tipo A y se ha realizado a la zona directa de josedomingo.org. Creamos una zona directa para nuestro dominio maria.org, añadiendo al fichero /etc/bind/named.conf.local: zone "maria.org" { type master; file "db.maria.org"; }; Creamos el fichero de la zona /var/cache/bind/db.maria.org y el fichero quedaría de la siguiente manera: $TTL 86400 @ IN SOA dns1.maria.org. root.maria.org. ( 1 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 86400 ) ; Negative Cache TTL ; @ IN NS dns1.maria.org. @ IN MX 10 correo.maria.org. $ORIGIN maria.org. dns1 IN A 172.22.7.159 correo IN A 172.22.200.101 asterix IN A 172.22.200.102 obelix IN A 172.22.200.103 www IN CNAME asterix informatica IN CNAME asterix ftp IN CNAME obelix Creamos una zona inversa: zone "22.172.in-addr.arpa" { type master; file "db.172.22.0.0"; }; Y descomentamos la línea include "/etc/bind/zones.rfc1918"; para así incluir todas las zonas correspondientes a las redes privadas para que no se pregunten por ellas al servidor DNS raíz. ... zone "21.172.in-addr.arpa" { type master; file "/etc/bind/db.empty"; }; //zone "22.172.in-addr.arpa" { type master; file "/etc/bind/db.empty"; }; zone "23.172.in-addr.arpa" { type master; file "/etc/bind/db.empty"; }; ... Creamos el fichero /var/cache/bind/db.172.22.0.0: $TTL 86400 @ IN SOA dns1.maria.org. root.maria.org. ( 1 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 86400 ) ; Negative Cache TTL ; @ IN NS dns1.maria.org. $ORIGIN 22.172.in-addr.arpa. 159.7 IN PTR dns1.maria.org. 101.200 IN PTR correo.maria.org. 102.200 IN PTR asterix.maria.org. 103.200 IN PTR obelix.maria.org. Reiniciamos el servicio. Y configuramos el nuevo DNS en otra máquina, desde la que vamos a realizar las siguentes consultas con dig. Incluimos en el fichero /etc/resolv.conf la IP del servidor DNS: Dirección IP de una máquina o servicio. dig www.maria.org Servidor DNS con autoridad de dominio: dig ns www.maria.org Servidor de correo del dominio. dig mx maria.org Una resolución inversa. dig -x 172.22.200.103 Taller 2: Instalación y configuración de un servidor DNS esclavo. Un servidor DNS esclavo contiene una réplica de las zonas del servidor maestro. Se debe producir una transferencia de zona (el esclavo hace una solicitud de la zona completa al maestro) para que se sincronicen los servidores. Antes que nada, cabe decir que el número de serie de la zona de transferencia tiene como función decirle al esclavo si la zona ha cambiado o no. Si el número de serie del esclavo es menor que el del maestro, el esclavo solicitará la zona al maestro. Si el número de serie del esclavo es mayor que el del maestro, el esclavo no solicitará la zona al maestro. Los diferentes tiempos que se configuran enel registro SOA son: Refresh: Tiempo que debe pasar antes de que el esclavo vuelva a consultar al maestro si la zona ha cambiado. Retry: Tiempo que debe pasar antes de que el esclavo vuelva a consultar al maestro si la zona no ha cambiado. Expire: Tiempo que debe pasar antes de que el esclavo considere que la zona ha expirado y la borre. Negative Cache TTL: Tiempo que debe pasar antes de que el esclavo considere que la zona ha expirado. Creamos otra máquina en Proxmox cuyo rol será de Servidor DNS esclavo, al que le instalaremos bind9 y lo nombraremos con el nombre dns2.maria.org. La transferencia de zona entre maestro y esclavo usará el puerto 53/tcp, que abriremos en el grupo de seguridad. $ sudo ufw allow 53/tcp Solo deberemos aceptar las transferencias de zonas hacia los esclavos autorizados, que lo haremos en el fichero /etc/bind/named.conf.options: options { ... allow-transfer { none; }; ... } Modificamos el fichero /etc/bind/named.conf.local para definir la zona del DNS maestro: include "/etc/bind/zones.rfc1918"; zone "maria.org" { type master; file "db.maria.org"; allow-transfer { 172.22.6.208; }; notify yes; }; zone "22.172.in-addr.arpa" { type master; file "db.172.22.0.0"; allow-transfer { 172.22.6.208; }; notify yes; }; Modificamos el fichero /etc/bind/named.conf.local para definir la zona del DNS esclavo: include "/etc/bind/zones.rfc1918"; zone "maria.org" { type slave; file "db.maria.org"; masters { 172.22.6.208; }; }; zone "22.172.in-addr.arpa" { type slave; file "db.172.22.0.0"; masters { 172.22.6.208; }; }; Añadimos la información del DNS esclavo en las zonas. Añadimos un nuevo registro NS y su correspondiente registro A en el fichero /var/cache/bind/db.maria.org: $TTL 86400 @ IN SOA dns1.maria.org. root.maria.org. ( 1 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 86400 ) ; Negative Cache TTL ; @ IN NS dns1.maria.org. @ IN NS dns2.maria.org. @ IN MX 10 correo.maria.org. $ORIGIN maria.org. dns1 IN A 172.22.7.159 dns2 IN A 10 172.22.6.208 ... Y modificamos el fichero /var/cache/bind/db.172.22.0.0: $TTL 86400 @ IN SOA dns1.maria.org. root.maria.org. ( 1 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 86400 ) ; Negative Cache TTL ; @ IN NS dns1.maria.org. @ IN NS dns2.maria.org. $ORIGIN 22.172.in-addr.arpa. 159.7 IN PTR dns1.maria.org. 208.6 IN PTR dns2.maria.org. ... Reiniciamos los servidores DNS, tanto el maestro como el esclavo. En caso de que nos salga algún error, probamos con los siguientes comandos: named-checkzone maria.org /var/cache/bind/db.maria.org named-checkzone 22.172.in-addr.arpa /var/cache/bind/db.172.22.0.0 #Para detectar errores de configuración en `named.conf`, podemos usar: named-checkconf Configuramos el cliente con los dos servidores DNS. En el fichero /etc/resolv.conf utiliza dos directivas nameserver. Si hacemos una consulta desde un cliente, y el dns maestro no responde, responderá el esclavo. Prueba a realizar una consulta. ¿Quién ha respondido?. Al realizar dig www.maria.org el servdor que responde es el maestro. Apagamos el servidor maestro, y volvemos a hacer la misma consulta. ---Apagamos el servicio de la máquina dns1 $ sudo systemctl stop bind9 ---Hacemos la consulta $ dig www.maria.org ¿Ha respondido el servidor DNS esclavo? Al apagar el servidor maestro y realizar la consulta, el servidor que responde es el esclavo. Modificamos la zona, y para ello lo modificamos en el servidor maestro en el fichero /var/cache/bind/db.maria.org añadiendo: ... prueba IN A 172.22.6.208 ... Desde el cliente realizaremos una consulta para preguntar por la dirección IP de prueba.maria.org. ¿Quién ha respondido?. Al realizar dig prueba.maria.org el servdor que responde es el maestro. Apagamos el servidor maestro, y volvemos a hacer la misma consulta. ---Apagamos el servicio de la máquina dns1 $ sudo systemctl stop bind9 ---Hacemos la consulta $ dig www.maria.org ¿Ha respondido el servidor DNS esclavo? Al apagar el servidor maestro y realizar la consulta, el servidor que responde es el esclavo. Comprobamos en el esclavo que se ha producido la transferencia. EXTRA. Crea un registro nuevo en el maestro y regístrarlo en el esclavo. En el maestro añadimos el registro prueba2 con la IP 172.22.7.169 en el fichero /var/cache/bind/db.maria.org: ... prueba2 IN A 172.22.7.169 ... Modificamos el fichero /etc/resolv.conf del host para realizar las pruebas. ... nameserver 172.22.7.159 nameserver 172.22.6.208 ... Hacemos la consulta desde el cliente para comprobar que se ha registrado correctamente y comprobamos que responde el servidor maestro. $ dig prueba2.maria.org Apagamos el servidor maestro y volvemos a hacer la consulta. En este caso, el servidor que responde es el esclavo. $ sudo systemctl stop bind9 #Hacemos la consulta en el host $ dig prueba2.maria.org Taller 3: Delegación de subdominios con bind9 Crea una nueva máquina e instala un servidor DNS bind9, será el servidor DNS con autoridad para la zona delegada que será informatica.maria.org. Nombra de manera adecuada esta máquina para que tenga el nombre dns.informatica.maria.org. Tendremos el servidor dns1.maria.org (y el esclavo dns2.maria.org) con autoridad para la zona maria.org. En esta zona, por ejemplo, puede existir el nombre www.maria.org. Tendremos el servidor dns.informatica.maria.org con autoridad sobre el subdominio delegado, es decir tendrá autoridad para la zona informatica.maria.org. En esta zona, por ejemplo, puede existir el nombre www.informatica.maria.org. Vamos a realizar la delegación de autoridad para el subdominio en el servidor DNS principal (en dns1.maria.org) para ello modificamos el fichero /var/cache/bind/db.maria.org añadiendo las siguientes líneas donde realizamos la delegación: ... $ORIGIN informatica.maria.org. @ IN NS dns dns IN A 172.22.2.218 ... Ahora vamos a configurar el servidor DNS delegado. Por lo tanto en el servidor dns.informatica.maria.org creamos una nueva zona en el fichero /etc/bind/named.conf.local: zone "informatica.maria.org" { type master; file "db.informatica.maria.org"; }; Y creamos la zona en el fichero /var/cache/bind/db.informatica.maria.org: $TTL 86400 @ IN SOA dns.informatica.maria.org. root.informatica.maria.org. ( 1 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 86400 ) ; Negative Cache TTL ; @ IN NS dns.informatica.maria.org. @ IN MX 10 mail.informatica.maria.org. $ORIGIN informatica.maria.org. dns IN A 172.22.2.218 mail IN A 172.22.200.121 web IN A 172.22.200.122 www IN CNAME web ... No modifiques el fichero /etc/resolv.conf del cliente, es decir, las consultas se hacen al servidor DNS principal, cuando preguntemos por un nombre en la zona delegada el servidor DNS principal, preguntará al servidor DNS delegado y guardara la respuesta en su caché. Pregunta por la dirección ip del nombre www.informatica.maria.org. ¿Quién ha respondido? El servidor DNS que ha respondido es el servidor maestro dns1.maria.org ya que es el que tiene la autoridad sobre la zona maria.org. Comprobaciones de funcionamiento Vamos a realizar una consulta para averiguar la dirección IP de www.informatica.maria.org desde el cliente sin modificar el fichero /etc/resolv.conf del cliente. $ dig www.informatica.maria.org Realizamos una consulta para averiguar el servidor DNS con autoridad para la zona del dominio informatica.maria.org. ¿Es el mimso que el servidor DNS con autoridad para la zona del dominio maria.org? $ dig ns wwwinformatica.maria.org El servidor DNS con autoridad para la zona del dominio informatica.maria.org es el servidor dns.informatica.maria.org y el servidor DNS con autoridad para la zona del dominio maria.org es el servidor dns1.maria.org. Realizamos una consulta para averiguar el servidor de correo confgurado para informatica.maria.org. $ dig mx informatica.maria.org EXTRA Crea un nuevo registro en la zona del subdominio.]]></summary></entry><entry><title type="html">Escenario en OpenStack</title><link href="/hlc+sri/2022/12/05/escenario.html" rel="alternate" type="text/html" title="Escenario en OpenStack" /><published>2022-12-05T08:17:50+01:00</published><updated>2022-12-05T08:17:50+01:00</updated><id>/hlc+sri/2022/12/05/escenario</id><content type="html" xml:base="/hlc+sri/2022/12/05/escenario.html"><![CDATA[<h2 id="descripción">Descripción</h2>
<p>En esta tarea se va a crear el escenario de trabajo que se va a usar durante todo el curso, que va a constar inicialmente de 4 máquinas: 2 instancias en OpenStack y dos contenedores LXC que se ejecutarán en una de las instancias.</p>

<p>Para nombrar las máquinas se va a utilizar <strong>alfa, bravo, charlie y delta</strong>, que son las primeras letras de un alfabeto que nació antes de la Primera Guerra Mundial en respuesta a los avances en la radio bidireccional compatible con la voz, para mejorar la comunicación en circuitos telefónicos de baja calidad y de larga distancia.</p>

<p>Además el dominio será un subdominio de la forma tunombre.gonzalonazareno.org. De esta forma tendremos:</p>

<ul>
  <li>Máquina 1: Instancia en OpenStack con Debian 11 Bullseye que se llama <code class="language-plaintext highlighter-rouge">alfa.tunombre.gonzalonazareno.org</code>.</li>
  <li>Máquina 2: Instancia en OpenStack con Rocky Linux 9 que se llama <code class="language-plaintext highlighter-rouge">bravo.tunombre.gonzalonazareno.org</code>.</li>
  <li>Máquina 3: Contenedor LXC con Ubuntu 20.04 que se llama <code class="language-plaintext highlighter-rouge">charlie.tunombre.gonzalonazareno.org</code>.</li>
  <li>Máquina 4: Contenedor LXC con Ubuntu 20.04 que se llama <code class="language-plaintext highlighter-rouge">delta.tunombre.gonzalonazareno.org</code>.</li>
</ul>

<p>La creación y configuración (conexión a las redes, creación de volumen, quitarle la seguridad alos puertos, …) de la <strong>máquina1 (alfa)</strong> la debes hacer con OSC. Lo demás lo puedes hacer con horizon.</p>

<h2 id="escenario">Escenario</h2>

<p><img src="/assets/images/escenario/escenario.png" alt="Escenario" /></p>

<h2 id="instalación-de-las-instancias-en-openstack">Instalación de las instancias en OpenStack</h2>

<ol>
  <li>Creamos una red interna que se llame <strong>Red DMZ de tu_usuario</strong>, con las siguientes características:
    <ul>
      <li>Direccionamiento: <code class="language-plaintext highlighter-rouge">172.16.0.0/16</code>.</li>
      <li>Con DHCP y DNS: <code class="language-plaintext highlighter-rouge">192.168.202.2</code>.</li>
      <li>La puerta de enlace de los dispositivos conectados a esta red será el <code class="language-plaintext highlighter-rouge">172.16.0.1</code>.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openstack network create Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus
 openstack subnet create <span class="nt">--network</span> Red DMZ de mariajesus <span class="nt">--subnet-range</span> 172.16.0.0/16 <span class="nt">--dhcp</span> <span class="nt">--gateway</span> 172.16.0.0 <span class="nt">--dns-nameserver</span> 192.168.202.2 Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus
</code></pre></div>    </div>
  </li>
  <li>Las dos instancias que vamos a crear se van a configurar con cloud-init de la siguiente manera:
    <ul>
      <li>Deben actualizar los paquetes de la distribución de la instancia.</li>
      <li>El dominio utilizado será del tipo <code class="language-plaintext highlighter-rouge">tunombre.gonzalonazareno.org</code>. Por lo tanto en la configuración con cloud-init habrá que indicar el hostname y el FQDN.</li>
      <li>Se crearán dos usuarios:
        <ul>
          <li>Un usuario sin privilegios. Se puede llamar como quieras (pero el nombre será el mismo en todas las máquinas) y accederás a las máquinas usando tu clave ssh privada.</li>
          <li>Un usuario <code class="language-plaintext highlighter-rouge">profesor</code>, que puede utilizar sudo sin contraseña. Copia de las claves públicas de todos los profesores en las instancias para que puedan acceder con el usuario <code class="language-plaintext highlighter-rouge">profesor</code>.</li>
        </ul>
      </li>
      <li>Cambia la contraseña al usuario root.</li>
    </ul>
  </li>
  <li>Creación de la <strong>máquina1</strong> (alfa):
    <ul>
      <li>Crea una instancia sobre un volumen de 30Gb, usando una imagen de <strong>Debian 11 Bullseye</strong>. Elige el sabor <code class="language-plaintext highlighter-rouge">vol.medium</code>. Y configuralá con <code class="language-plaintext highlighter-rouge">cloud-init</code> como se ha indicado anteriormente.</li>
      <li>
        <p>Está instancia estará conectada a tu red interna. Asigna a la instancia una IP flotante.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack volume create <span class="nt">--image</span> <span class="s2">"Debian 11 Bullseye"</span> <span class="nt">--size</span> 30 vol.alfa
  <span class="nt">----</span>
  openstack server create <span class="nt">--flavor</span> vol.medium <span class="se">\</span>
      <span class="nt">--volume</span> vol.alfa <span class="se">\</span>
      <span class="nt">--security-group</span> default <span class="se">\</span>
      <span class="nt">--key-name</span> pass <span class="se">\</span>
      <span class="nt">--network</span> <span class="s2">"red de mariajesus.alloza"</span> <span class="se">\</span>
      <span class="nt">--user-data</span> config-alfa.yaml <span class="se">\</span>
      alfa
  <span class="nt">----</span>
  openstack floating ip create ext-net
  openstack server add floating ip alfa 172.22.201.46
</code></pre></div>        </div>
      </li>
      <li>
        <p>Fichero config-alfa.yaml</p>

        <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">#cloud-config</span>
  <span class="na">package_update</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">package_upgrade</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">preserve_hostname</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">fqdn</span><span class="pi">:</span> <span class="s">alfa.mariajesus.gonzalonazareno.org</span>
  <span class="na">hostname</span><span class="pi">:</span> <span class="s">alfa</span>
  <span class="c1"># Crear un usuario y añadir clave pública ssh</span>
  <span class="na">users</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">profesor</span>
      <span class="na">sudo</span><span class="pi">:</span> <span class="s">ALL=(ALL) NOPASSWD:ALL</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">/bin/bash</span>
      <span class="na">passwd</span><span class="pi">:</span> 
      <span class="na">ssh_authorized_keys</span><span class="pi">:</span>
        <span class="s">ssh-rsa AAAA************** jose@debian</span>
        <span class="s">ssh-rsa AAAA************** rafa@eco</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maria</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">/bin/bash</span>
      <span class="na">passwd</span><span class="pi">:</span> <span class="s">debian</span>
      <span class="na">ssh_authorized_keys</span><span class="pi">:</span>
        <span class="s">ssh-rsa *************************************************** maria@debian</span>
  <span class="na">chpasswd</span><span class="pi">:</span>
    <span class="na">list</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">root:AkfJE64jFke82</span>
    <span class="na">expire</span><span class="pi">:</span> <span class="s">False</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Configuración de la máquina1 (alfa):
    <ul>
      <li>
        <p>Conecta la instancia a tu Red DMZ, asígnale la dirección 172.16.0.1 para que sea la puerta de enlace las máquinas conectadas a esta red.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack port create <span class="nt">--network</span> Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus <span class="nt">--fixed-ip</span> ip-address<span class="o">=</span>172.16.0.1 alfa-port
  openstack server add port alfa alfa-port
</code></pre></div>        </div>
      </li>
      <li>
        <p>Deshabilita la seguridad de los puertos en las dos interfaces de red para que funcione de manera adecuada el NAT.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack server remove security group alfa
  openstack port <span class="nb">set</span> <span class="nt">--disable-port-security</span> alfa-port
  openstack port <span class="nb">set</span> <span class="nt">--disable-port-security</span> 
</code></pre></div>        </div>
      </li>
      <li>
        <p>Configura de forma permanente la regla SNAT para que las máquinas de la Red DMZ tengan acceso a internet.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-s</span> 172.16.0.0/16 <span class="nt">-o</span> ens3 <span class="nt">-j</span> MASQUERADE
  iptables-save <span class="o">&gt;</span> /etc/iptables/rules.v4
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Creación de la máquina2 (bravo):
    <ul>
      <li>Está instancia se conectará a la red DMZ. Usando un puerto asigna a esta máquina la dirección 172.16.0.200.</li>
      <li>
        <p>Crea una instancia sobre un volumen de 30Gb, usando una imagen de Rocky Linux 9. Elige el sabor vol.normal. Y configurala con cloud-init como se ha indicado anteriormente.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  openstack volume create <span class="nt">--image</span> <span class="s2">"Rocky Linux 9"</span> <span class="nt">--size</span> 30 vol.bravo
  openstack port create <span class="nt">--network</span> Red<span class="se">\ </span>DMZ<span class="se">\ </span>de<span class="se">\ </span>mariajesus <span class="nt">--fixed-ip</span> ip-address<span class="o">=</span>172.16.0.200 bravo-port 
  <span class="nt">----</span>
  openstack server create <span class="nt">--flavor</span> vol.normal <span class="se">\</span>
  <span class="nt">--volume</span> vol.bravo <span class="se">\</span>
  <span class="nt">--security-group</span> default <span class="se">\</span>
  <span class="nt">--key-name</span> pass <span class="se">\</span>
  <span class="nt">--port</span> bravo-port <span class="se">\</span>
  <span class="nt">--user-data</span> config-bravo.yaml <span class="se">\</span>
  bravo
</code></pre></div>        </div>
      </li>
      <li>
        <p>Fichero config-bravo.yaml</p>

        <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">#cloud-config</span>
  <span class="na">package_update</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">package_upgrade</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">preserve_hostname</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">fqdn</span><span class="pi">:</span> <span class="s">bravo.mariajesus.gonzalonazareno.org</span>
  <span class="na">hostname</span><span class="pi">:</span> <span class="s">bravo</span>
  <span class="c1"># Crear un usuario y añadir clave pública ssh</span>
  <span class="na">users</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">profesor</span>
      <span class="na">sudo</span><span class="pi">:</span> <span class="s">ALL=(ALL) NOPASSWD:ALL</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">/bin/bash</span>
      <span class="na">passwd</span><span class="pi">:</span> 
      <span class="na">ssh_authorized_keys</span><span class="pi">:</span>
        <span class="s">ssh-rsa AAAA************** jose@debian</span>
        <span class="s">ssh-rsa AAAA************** rafa@eco</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maria</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">/bin/bash</span>
      <span class="na">passwd</span><span class="pi">:</span> <span class="s">debian</span>
      <span class="na">ssh_authorized_keys</span><span class="pi">:</span>
        <span class="s">ssh-rsa *************************************************** maria@debian</span>
  <span class="na">chpasswd</span><span class="pi">:</span>
    <span class="na">list</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">root:AkfJE64jFke82</span>
    <span class="na">expire</span><span class="pi">:</span> <span class="s">False</span>
</code></pre></div>        </div>
      </li>
      <li>Deshabilita la seguridad de los puertos en la interfaz de red para que funcione de manera adecuada el NAT.</li>
      <li>Comprueba que tiene acceso a internet. Si no tiene acceso a internet, no se han actualizado los paquetes con cloud-init, hazlo posteriormente.</li>
    </ul>
  </li>
</ol>

<h3 id="instalación-de-los-contenedores-lxc">Instalación de los contenedores LXC</h3>
<p>En <strong>maquina1</strong> vamos a crear dos contenedores en un red interna, para ello:</p>

<ol>
  <li>
    <p>Crea en <strong>máquina1 (alfa)</strong> un linux bridge llamado <code class="language-plaintext highlighter-rouge">br-intra</code> y asigna una dirección IP estática <code class="language-plaintext highlighter-rouge">192.168.0.1</code>. Esta será la IP de <strong>máquina1</strong> (alfa) conectada a este switch virtual y será la puerta de enlace de los contenedores.</p>

    <ul>
      <li>
        <p>Instalamos el paquete <code class="language-plaintext highlighter-rouge">bridge-utils</code> y <code class="language-plaintext highlighter-rouge">qemu-kvm</code> para crear el bridge.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt <span class="nb">install </span>qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virtinst
  apt <span class="nb">install </span>bridge-utils
</code></pre></div>        </div>
      </li>
      <li>
        <p>Definimos el archivo br-intra.xml</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;network&gt;</span>
  <span class="nt">&lt;name&gt;</span>br-intra<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;bridge</span> <span class="na">name=</span><span class="s">'br-intra'</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;forward/&gt;</span>
  <span class="nt">&lt;ip</span> <span class="na">address=</span><span class="s">'192.168.0.1'</span> <span class="na">netmask=</span><span class="s">'255.255.255.0'</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/ip&gt;</span>
  <span class="nt">&lt;/network&gt;</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Creamos el bridge</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  virsh net-define br-intra.xml
  virsh net-start br-intra
  virsh net-autostart br-intra
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Instala LXC y crea dos contenedores con la distribución <strong>Ubuntu 20.04</strong>. Estos contenedores serán la <strong>máquina3</strong> (charlie) y la <strong>máquina4</strong> (delta).</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt <span class="nb">install </span>lxc
</code></pre></div>    </div>

    <ul>
      <li>creamos los contenedores</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> lxc-create <span class="nt">-n</span> charlie <span class="nt">-t</span> ubuntu <span class="nt">--</span> <span class="nt">-r</span> focal
 lxc-create <span class="nt">-n</span> delta <span class="nt">-t</span> ubuntu <span class="nt">--</span> <span class="nt">-r</span> focal
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configura de forma permanente la regla SNAT para que los contenedores tengan acceso a internet.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-s</span> 192.168.0.0/24 <span class="nt">-o</span> ens3 <span class="nt">-j</span> MASQUERADE
 iptables-save <span class="o">&gt;</span> /etc/iptables/rules.v4
</code></pre></div>    </div>
  </li>
  <li>
    <p>Conecta los contenedores al bridge <code class="language-plaintext highlighter-rouge">br-intra</code> y configúralo de forma estática con las siguientes direcciones: <strong>máquina3</strong> (charlie) la <code class="language-plaintext highlighter-rouge">192.168.0.2</code> y <strong>máquina4</strong> (delta) la <code class="language-plaintext highlighter-rouge">192.168.0.3</code>.</p>

    <ul>
      <li>CHARLIE
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lxc-start <span class="nt">-n</span> charlie
  nano /var/lib/lxc/charlie/config

  <span class="nt">----</span>
  lxc.net.0.type <span class="o">=</span> veth
  lxc.net.0.link <span class="o">=</span> br-intra
  lxc.net.0.flags <span class="o">=</span> up
  <span class="nt">---</span>

  lxc-stop <span class="nt">-n</span> charlie
  lxc-start <span class="nt">-n</span> charlie
  lxc-attach <span class="nt">-n</span> charlie
  vim /etc/netplan/10-lxc.yaml
</code></pre></div>        </div>

        <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">network</span><span class="pi">:</span>
      <span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
      <span class="na">renderer</span><span class="pi">:</span> <span class="s">networkd</span>
      <span class="na">ethernets</span><span class="pi">:</span>
          <span class="na">eth0</span><span class="pi">:</span>
              <span class="na">dhcp4</span><span class="pi">:</span> <span class="s">no</span>
              <span class="na">addresses</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">192.168.0.2/24</span><span class="pi">]</span>
              <span class="na">gateway4</span><span class="pi">:</span> <span class="s">192.168.0.1</span>
</code></pre></div>        </div>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  netplan apply
</code></pre></div>        </div>
      </li>
      <li>DELTA
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lxc-start <span class="nt">-n</span> delta
  nano /var/lib/lxc/delta/config

  <span class="nt">----</span>
  lxc.net.0.type <span class="o">=</span> veth
  lxc.net.0.link <span class="o">=</span> br-intra
  lxc.net.0.flags <span class="o">=</span> up
  <span class="nt">---</span>

  lxc-stop <span class="nt">-n</span> delta
  lxc-start <span class="nt">-n</span> delta
  lxc-attach <span class="nt">-n</span> delta
  vim /etc/netplan/10-lxc.yaml
</code></pre></div>        </div>

        <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">network</span><span class="pi">:</span>
      <span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
      <span class="na">renderer</span><span class="pi">:</span> <span class="s">networkd</span>
      <span class="na">ethernets</span><span class="pi">:</span>
          <span class="na">eth0</span><span class="pi">:</span>
              <span class="na">dhcp4</span><span class="pi">:</span> <span class="s">no</span>
              <span class="na">addresses</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">192.168.0.3/24</span><span class="pi">]</span>
              <span class="na">gateway4</span><span class="pi">:</span> <span class="s">192.168.0.1</span>
</code></pre></div>        </div>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  netplan apply
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Para que la red de OpenStack funcione de forma adecuada las imágenes que usamos tienen configurado la mtu (Unidad máxima de transferencia) a 1450 bytes. Tenemos que adecuar los contenedores a este tamaño de trama. Para ello introduce en la configuración de los contenedores la línea: <code class="language-plaintext highlighter-rouge">lxc.net.0.mtu = 1450</code>.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">echo</span> <span class="s2">"lxc.net.0.mtu = 1450"</span> <span class="o">&gt;&gt;</span> /var/lib/lxc/charlie/config
 <span class="nb">echo</span> <span class="s2">"lxc.net.0.mtu = 1450"</span> <span class="o">&gt;&gt;</span> /var/lib/lxc/delta/config
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configura los contenedores para que se auto inicien al reiniciar la instancia.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```bash  echo "lxc.start.auto = 1" &gt;&gt; /var/lib/lxc/charlie/config  echo "lxc.start.auto = 1" &gt;&gt; /var/lib/lxc/delta/config  ```
</code></pre></div>    </div>
  </li>
  <li>
    <p>Los contenedores tendrán características parecidas a las instancias anteriormente:</p>
    <ul>
      <li>
        <p>Debes actualizar los paquetes de la distribución instalada.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lxc-attach <span class="nt">-n</span> charlie <span class="nt">--</span> apt <span class="nb">install </span>openssh-server
  lxc-attach <span class="nt">-n</span> delta <span class="nt">--</span> apt <span class="nb">install </span>openssh-server
</code></pre></div>        </div>
      </li>
      <li>
        <p>El dominio utilizado será del tipo <code class="language-plaintext highlighter-rouge">tunombre.gonzalonazareno.org</code>. Por lo tanto configura de manera adecuda el hostname y el FQDN.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lxc-attach <span class="nt">-n</span> charlie <span class="nt">--</span> hostnamectl set-hostname
  charlie.maria.gonzalonazareno.org
  lxc-attach <span class="nt">-n</span> delta <span class="nt">--</span> hostnamectl set-hostname
  delta.maria.gonzalonazareno.org
  lxc-attach <span class="nt">-n</span> charlie <span class="nt">--</span> hostnamectl
  lxc-attach <span class="nt">-n</span> delta <span class="nt">--</span> hostnamectl
</code></pre></div>        </div>
      </li>
      <li>
        <p>Para acceder a los contenedores vamos a usar ssh.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ssh ubuntu@192.168.0.2
  ssh ubuntu@192.168.0.3
</code></pre></div>        </div>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ssh-copy-id <span class="nt">-i</span> ~/.ssh/pass <span class="nt">-o</span> <span class="nv">ProxyJump</span><span class="o">=</span>maria@172.22.201.46 maria@192.168.0.2
  ssh-copy-id <span class="nt">-i</span> ~/.ssh/pass <span class="nt">-o</span> <span class="nv">ProxyJump</span><span class="o">=</span>maria@172.22.201.46 maria@192.168.0.3
</code></pre></div>        </div>
      </li>
      <li>
        <p>Crea dos usuarios:</p>
        <ul>
          <li>
            <p>Un usuario sin privilegios. Se puede llamar como quieras (el nombre de usuario que usaste en las instancias) y accederás a los contenedores usando tu clave ssh privada.</p>

            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lxc-attach <span class="nt">-n</span> charlie <span class="nt">--</span> adduser maria
  lxc-attach <span class="nt">-n</span> delta <span class="nt">--</span> adduser maria
</code></pre></div>            </div>
          </li>
          <li>
            <p>Un usuario <code class="language-plaintext highlighter-rouge">profesor</code>, que puede utilizar sudo sin contraseña. Copia de las claves públicas de todos los profesores en los contenedores para que puedan acceder con el usuario <code class="language-plaintext highlighter-rouge">profesor</code>.</p>

            <ul>
              <li>
                <p>Añadimos el usuario <code class="language-plaintext highlighter-rouge">profesor</code> a los contenedores.</p>

                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lxc-attach <span class="nt">-n</span> charlie <span class="nt">--</span> adduser profesor
  lxc-attach <span class="nt">-n</span> delta <span class="nt">--</span> adduser profesor  
</code></pre></div>                </div>
              </li>
              <li>
                <p>Modificamos el ficher /etc/sudoers para que el usuario <code class="language-plaintext highlighter-rouge">profesor</code> pueda utilizar sudo sin contraseña.</p>

                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">#CHARLIE</span>
  ssh <span class="nt">-J</span> maria@172.22.201.46 ubuntu@192.168.0.2
  <span class="nb">sudo </span>visudo
  <span class="nt">---</span>
  profesor <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD:ALL
  <span class="nt">-----</span>

  <span class="c">#DELTA</span>
  ssh <span class="nt">-J</span> maria@172.22.201.46 ubuntu@192.168.0.3
  <span class="nb">sudo </span>visudo
  <span class="nt">---</span>
  profesor <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD:ALL
  <span class="nt">-----</span>
</code></pre></div>                </div>
              </li>
              <li>
                <p>Copiamos las claves públicas de los profesores en los contenedores.</p>

                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">#CHARLIE</span>
  ssh <span class="nt">-J</span> maria@172.22.201.46 ubunto@192.168.0.2
  <span class="nb">mkdir</span> /home/profesor/.ssh
  vim /home/profesor/.ssh/authorized_keys

  <span class="c">#DELTA</span>
  sh <span class="nt">-J</span> maria@172.22.201.46 ubunto@192.168.0.3
  <span class="nb">mkdir</span> /home/profesor/.ssh
  vim /home/profesor/.ssh/authorized_keys
</code></pre></div>                </div>
              </li>
              <li>
                <p>Cambia la contraseña al usuario <code class="language-plaintext highlighter-rouge">root</code>.</p>

                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lxc-attach <span class="nt">-n</span> charlie <span class="nt">--</span> passwd
  <span class="c">#root</span>
  lxc-attach <span class="nt">-n</span> delta <span class="nt">--</span> passwd
  <span class="c">#root</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="pruebas">Pruebas</h3>

<ol>
  <li>
    <p>Comprobación de los FQDN y acceso por ssh</p>

    <ul>
      <li>ALFA</li>
    </ul>

    <p><img src="/assets/images/escenario/1.png" alt="1" /></p>

    <ul>
      <li>BRAVO</li>
    </ul>

    <p><img src="/assets/images/escenario/2.png" alt="2" /></p>

    <ul>
      <li>CHARLIE</li>
    </ul>

    <p><img src="/assets/images/escenario/3.png" alt="3" /></p>

    <ul>
      <li>DELTA</li>
    </ul>

    <p><img src="/assets/images/escenario/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Comprobación de acceso a internet</p>

    <ul>
      <li>ALFA</li>
    </ul>

    <p><img src="/assets/images/escenario/5.png" alt="5" /></p>

    <ul>
      <li>BRAVO</li>
    </ul>

    <p><img src="/assets/images/escenario/6.png" alt="6" /></p>

    <ul>
      <li>CHARLIE</li>
    </ul>

    <p><img src="/assets/images/escenario/7.png" alt="7" /></p>

    <ul>
      <li>DELTA</li>
    </ul>

    <p><img src="/assets/images/escenario/8.png" alt="8" /></p>
  </li>
</ol>]]></content><author><name></name></author><category term="HLC+SRI" /><summary type="html"><![CDATA[Descripción En esta tarea se va a crear el escenario de trabajo que se va a usar durante todo el curso, que va a constar inicialmente de 4 máquinas: 2 instancias en OpenStack y dos contenedores LXC que se ejecutarán en una de las instancias.]]></summary></entry><entry><title type="html">Cifrado asimétrico con gpg y openssl</title><link href="/seguridad/2022/12/02/cripto.html" rel="alternate" type="text/html" title="Cifrado asimétrico con gpg y openssl" /><published>2022-12-02T08:17:50+01:00</published><updated>2022-12-02T08:17:50+01:00</updated><id>/seguridad/2022/12/02/cripto</id><content type="html" xml:base="/seguridad/2022/12/02/cripto.html"><![CDATA[<h2 id="tarea-1-generación-de-claves">Tarea 1: Generación de claves</h2>

<ol>
  <li>Genera un par de claves (pública y privada). ¿En que directorio se guarda las claves de un usuario?
    <ul>
      <li>Al generar las claves nos pedirá:
        <ul>
          <li>Nombre.</li>
          <li>Apellidos.</li>
          <li>Correo electrónico.</li>
        </ul>
      </li>
      <li>El comando con el que generaremos la clave es:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--gen-key</span>
</code></pre></div>        </div>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.2.27<span class="p">;</span> Copyright <span class="o">(</span>C<span class="o">)</span> 2021 Free Software Foundation, Inc.
  This is free software: you are free to change and redistribute it.
  There is NO WARRANTY, to the extent permitted by law.

  Nota: Usa <span class="s2">"gpg --full-generate-key"</span> para el diálogo completo de generación de clave.

  GnuPG debe construir un ID de usuario para identificar su clave.

  Nombre y apellidos: Maria Jesus Alloza
  Dirección de correo electrónico: mariajesus.alloza@outlook.es
  Ha seleccionado este ID de usuario:
      <span class="s2">"Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;"</span>

  ¿Cambia <span class="o">(</span>N<span class="o">)</span>ombre, <span class="o">(</span>D<span class="o">)</span>irección o <span class="o">(</span>V<span class="o">)</span>ale/<span class="o">(</span>S<span class="o">)</span>alir? V
  Es necesario generar muchos bytes aleatorios. Es una buena idea realizar
  alguna otra tarea <span class="o">(</span>trabajar en otra ventana/consola, mover el ratón, usar
  la red y los discos<span class="o">)</span> durante la generación de números primos. Esto da al
  generador de números aleatorios mayor oportunidad de recoger suficiente
  entropía.
  Es necesario generar muchos bytes aleatorios. Es una buena idea realizar
  alguna otra tarea <span class="o">(</span>trabajar en otra ventana/consola, mover el ratón, usar
  la red y los discos<span class="o">)</span> durante la generación de números primos. Esto da al
  generador de números aleatorios mayor oportunidad de recoger suficiente
  entropía.
  gpg: clave 75F8A403F54FF4B4 marcada como de confianza absoluta
  gpg: creado el directorio <span class="s1">'/home/maria/.gnupg/openpgp-revocs.d'</span>
  gpg: certificado de revocación guardado como <span class="s1">'/home/maria/.gnupg/openpgp-revocs.d/D7D76217F9DA9045296C1EBC75F8A403F54FF4B4.rev'</span>
  claves pública y secreta creadas y firmadas.

  pub   rsa3072 2022-11-29 <span class="o">[</span>SC] <span class="o">[</span>caduca: 2024-11-28]
        D7D76217F9DA9045296C1EBC75F8A403F54FF4B4
  uid                      Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;
  sub   rsa3072 2022-11-29 <span class="o">[</span>E] <span class="o">[</span>caduca: 2024-11-28]

</code></pre></div>        </div>
      </li>
      <li>El directorio donde se guardan las claves es:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ~/.gnupg
  maria@maria-debian:~/.gnupg<span class="nv">$ </span><span class="nb">ls
  </span>openpgp-revocs.d  private-keys-v1.d  pubring.kbx  pubring.kbx~  trustdb.gpg
  maria@maria-debian:~/.gnupg<span class="nv">$ </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Lista las claves públicas que tienes en tu almacén de claves. Explica los distintos datos que nos muestra. ¿Cómo deberías haber generado las claves para indicar, por ejemplo, que tenga un 1 mes de validez?
    <ul>
      <li>El comando que vamos a usar para listar las claves públicas es:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--list-keys</span>
</code></pre></div>        </div>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@maria-debian:~/.gnupg<span class="nv">$ </span>gpg <span class="nt">--list-keys</span>
  /home/maria/.gnupg/pubring.kbx
  <span class="nt">------------------------------</span>
  pub   rsa3072 2022-11-29 <span class="o">[</span>SC] <span class="o">[</span>caduca: 2024-11-28]
  D7D76217F9DA9045296C1EBC75F8A403F54FF4B4
  uid        <span class="o">[</span>  absoluta <span class="o">]</span> Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;
  sub   rsa3072 2022-11-29 <span class="o">[</span>E] <span class="o">[</span>caduca: 2024-11-28]

  maria@maria-debian:~/.gnupg<span class="nv">$ </span>
</code></pre></div>        </div>
      </li>
      <li>Los datos que nos muestra son:
        <ul>
          <li><strong>pub</strong>: Indica que es una clave pública.</li>
          <li><strong>uid</strong>: Identificador único de la clave.</li>
          <li><strong>sub</strong>: Indica que es una clave pública secundaria.</li>
        </ul>
      </li>
      <li>Para genetar las claves con un mes de validez, deberíamos haber usado el comando:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gpg <span class="nt">--full-gen-key</span>
</code></pre></div>        </div>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@maria-debian:~/.gnupg<span class="nv">$ </span>gpg <span class="nt">--full-generate-key</span>
  gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.2.27<span class="p">;</span> Copyright <span class="o">(</span>C<span class="o">)</span> 2021 Free Software Foundation, Inc.
  This is free software: you are free to change and redistribute it.
  There is NO WARRANTY, to the extent permitted by law.

  Por favor seleccione tipo de clave deseado:
     <span class="o">(</span>1<span class="o">)</span> RSA y RSA <span class="o">(</span>por defecto<span class="o">)</span>
     <span class="o">(</span>2<span class="o">)</span> DSA y ElGamal
     <span class="o">(</span>3<span class="o">)</span> DSA <span class="o">(</span>sólo firmar<span class="o">)</span>
     <span class="o">(</span>4<span class="o">)</span> RSA <span class="o">(</span>sólo firmar<span class="o">)</span>
    <span class="o">(</span>14<span class="o">)</span> Existing key from card
  Su elección:
  las claves RSA pueden tener entre 1024 y 4096 bits de longitud.
  ¿De qué tamaño quiere la clave? <span class="o">(</span>3072<span class="o">)</span> 
  El tamaño requerido es de 3072 bits
  Por favor, especifique el período de validez de la clave.
           0 <span class="o">=</span> la clave nunca caduca
        &lt;n&gt;  <span class="o">=</span> la clave caduca en n días
        &lt;n&gt;w <span class="o">=</span> la clave caduca en n semanas
        &lt;n&gt;m <span class="o">=</span> la clave caduca en n meses
        &lt;n&gt;y <span class="o">=</span> la clave caduca en n años
  ¿Validez de la clave <span class="o">(</span>0<span class="o">)</span>? 1m
  La clave caduca jue 29 dic 2022 10:49:56 CET
  ¿Es correcto? <span class="o">(</span>s/n<span class="o">)</span> s

  GnuPG debe construir un ID de usuario para identificar su clave.

  Nombre y apellidos: Maria Jesus Alloza
  Dirección de correo electrónico: mariajesus.alloza@outlook.es
  Comentario: 
  Ha seleccionado este ID de usuario:
      <span class="s2">"Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;"</span>

  ¿Cambia <span class="o">(</span>N<span class="o">)</span>ombre, <span class="o">(</span>C<span class="o">)</span>omentario, <span class="o">(</span>D<span class="o">)</span>irección o <span class="o">(</span>V<span class="o">)</span>ale/<span class="o">(</span>S<span class="o">)</span>alir? v
  Es necesario generar muchos bytes aleatorios. Es una buena idea realizar
  alguna otra tarea <span class="o">(</span>trabajar en otra ventana/consola, mover el ratón, usar
  la red y los discos<span class="o">)</span> durante la generación de números primos. Esto da al
  generador de números aleatorios mayor oportunidad de recoger suficiente
  entropía.
  Es necesario generar muchos bytes aleatorios. Es una buena idea realizar
  alguna otra tarea <span class="o">(</span>trabajar en otra ventana/consola, mover el ratón, usar
  la red y los discos<span class="o">)</span> durante la generación de números primos. Esto da al
  generador de números aleatorios mayor oportunidad de recoger suficiente
  entropía.
  gpg: clave CA1C968B84D4B041 marcada como de confianza absoluta
  gpg: certificado de revocación guardado como <span class="s1">'/home/maria/.gnupg/openpgp-revocs.d/57F9092579AC46D5B93972F7CA1C968B84D4B041.rev'</span>
  claves pública y secreta creadas y firmadas.

  pub   rsa3072 2022-11-29 <span class="o">[</span>SC] <span class="o">[</span>caduca: 2022-12-29]
        57F9092579AC46D5B93972F7CA1C968B84D4B041
  uid                      Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;
  sub   rsa3072 2022-11-29 <span class="o">[</span>E] <span class="o">[</span>caduca: 2022-12-29]

</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Lista las claves privadas de tu almacén de claves.</p>

    <ul>
      <li>
        <p>Si listamos las claves, podremos ver la fecha de caducidad que tiene:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ```bash
  maria@maria-debian:~/.gnupg$ gpg --list-key
  /home/maria/.gnupg/pubring.kbx
  ------------------------------
  pub   rsa3072 2022-11-29 [SC] [caduca: 2024-11-28]
        D7D76217F9DA9045296C1EBC75F8A403F54FF4B4
  uid        [  absoluta ] Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;
  sub   rsa3072 2022-11-29 [E] [caduca: 2024-11-28]

  pub   rsa3072 2022-11-29 [SC] [caduca: 2022-12-29]
        57F9092579AC46D5B93972F7CA1C968B84D4B041
  uid        [  absoluta ] Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;
  sub   rsa3072 2022-11-29 [E] [caduca: 2022-12-29]

  ```
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h2 id="tarea-2-importar--exportar-clave-pública">Tarea 2: Importar / exportar clave pública</h2>

<ol>
  <li>
    <p>Exporta tu clave pública en formato ASCII y guardalo en un archivo nombre_apellido.asc y envíalo al compañero con el que vas a hacer esta práctica.</p>

    <ul>
      <li>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian gpg <span class="nt">--armor</span> <span class="nt">--export</span> <span class="nt">-a</span> <span class="s2">"Maria Jesus Alloza"</span> <span class="o">&gt;</span> mjar.asc
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Importa las claves públicas recibidas de vuestro compañero.</p>

    <ul>
      <li>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian gpg <span class="nt">--import</span> juan_jesus.asc
</code></pre></div>        </div>
        <p><img src="/assets/images/criptografia/1.png" alt="1" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Comprueba que las claves se han incluido correctamente en vuestro keyring.</p>

    <ul>
      <li>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian gpg <span class="nt">--list-key</span>
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/criptografia/2.png" alt="2" /></p>
  </li>
</ol>

<h2 id="tarea-3-cifrado-asimétrico-con-claves-públicas">Tarea 3: Cifrado asimétrico con claves públicas</h2>

<ol>
  <li>
    <p>Cifraremos un archivo cualquiera y lo remitiremos por email a uno de nuestros compañeros que nos proporcionó su clave pública.</p>

    <ul>
      <li>Creamos el fichero que vamos a cifrar:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian nano cifrar-mjar.txt
  maria@debian <span class="nb">cat </span>cifrar-mjar.txt
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/criptografia/3.png" alt="3" /></p>

    <ul>
      <li>Ciframos el fichero:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian gpg <span class="nt">--encrypt</span> <span class="nt">--recipient</span> githubemail1asir@gmail.com cifrar-mjar.txt
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/criptografia/4.png" alt="4" /></p>
  </li>
  <li>
    <p>Nuestro compañero, a su vez, nos remitirá un archivo cifrado para que nosotros lo descifremos.</p>

    <ul>
      <li>Nos descargamos el fichero ya cifrado de nuestro compañero y procedemos a descifrarlo:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@maria-debian:~/Descargas<span class="nv">$ </span>gpg <span class="nt">--output</span> descifrado.txt <span class="nt">-d</span> criptoarchivo.txt.gpg
  gpg: cifrado con clave de 3072 bits RSA, ID AB63968A54C787E9, creada el 2022-11-29
      <span class="s2">"Maria Jesus Alloza &lt;mariajesus.alloza@outlook.es&gt;"</span>
  maria@maria-debian:~/Descargas<span class="nv">$ </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Tanto nosotros como nuestro compañero comprobaremos que hemos podido descifrar los mensajes recibidos respectivamente.</p>

    <ul>
      <li>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian <span class="nb">cat </span>descifrado-ipc.txt
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/criptografia/5.png" alt="5" /></p>
  </li>
  <li>
    <p>Por último, enviaremos el documento cifrado a alguien que no estaba en la lista de destinatarios y comprobaremos que este usuario no podrá descifrar este archivo.</p>

    <ul>
      <li>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian gpg <span class="nt">--encrypt</span> <span class="nt">--recipient</span> &lt;correo jjas&gt; cifrar.txt
  maria@debian gpg <span class="nt">--output</span> descifrado.txt <span class="nt">-d</span> cifrar-mjar.gpg
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Para terminar, indica los comandos necesarios para borrar las claves públicas y privadas que posees.</p>

    <ul>
      <li>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> maria@debian gpg <span class="nt">--delete-key</span> <span class="s2">"maria"</span>
 Se ha eliminado la clave pública <span class="k">*****************</span>
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/criptografia/6.png" alt="6" /></p>
  </li>
</ol>

<h2 id="tarea-4-exportar-clave-a-un-servidor-público-de-claves-pgp">Tarea 4: Exportar clave a un servidor público de claves PGP</h2>

<ol>
  <li>
    <p>Genera la clave de revocación de tu clave pública para utilizarla en caso de que haya problemas.</p>

    <ul>
      <li>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  maria@debian gpg <span class="nt">--gen-revoke</span> 57F9092579AC46D5B93972F7CA1C968B84D4B041
</code></pre></div>        </div>
      </li>
    </ul>

    <p><img src="/assets/images/criptografia/7.png" alt="7" /></p>
  </li>
  <li>
    <p>Exporta tu clave pública al servidor pgp.rediris.es</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gpg <span class="nt">--keyserver</span> pgp.rediris.es <span class="nt">--send-key</span> 57F9092579AC46D5B93972F7CA1C968B84D4B041
</code></pre></div>    </div>

    <p><img src="/assets/images/criptografia/8.png" alt="8" /></p>
  </li>
  <li>
    <p>Borra la clave pública de alguno de tus compañeros de clase e impórtala ahora del servidor público de rediris.</p>

    <ul>
      <li>gpg –delete-key “Ivan”</li>
      <li>gpg –keyserver pgp.rediris.es –recv-keys 278C14EB1CE76FEF397C83058A550974B7DF5CB8</li>
    </ul>

    <p><img src="/assets/images/criptografia/9.png" alt="9" /></p>
  </li>
</ol>

<h2 id="tarea-5-cifrado-asimétrico-con-openssl">Tarea 5: Cifrado asimétrico con openssl</h2>

<ol>
  <li>
    <p>Genera un par de claves (pública y privada).</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl genrsa <span class="nt">-aes128</span> <span class="nt">-out</span> maria_jesus_ssl_key.pem 2048
 openssl rsa <span class="nt">-in</span> maria-ssl.pem <span class="nt">-outform</span> PEM <span class="nt">-pubout</span> <span class="nt">-out</span> public-maria-ssl.pem
</code></pre></div>    </div>
    <p><img src="/assets/images/criptografia/10.png" alt="10" /></p>
  </li>
  <li>
    <p>Envía tu clave pública a un compañero.</p>
  </li>
  <li>
    <p>Utilizando la clave pública cifra un fichero de texto y envíalo a tu compañero.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">echo</span> <span class="s2">"Hola, soy María Jesús, esto es mi archivo cifrado ssl"</span> <span class="o">&gt;</span> maria_jesus_criptoarchivossl.txt
 openssl rsautl <span class="nt">-encrypt</span> <span class="nt">-inkey</span> juanje-ssl.pub.pem <span class="nt">-pubin</span> <span class="nt">-in</span> maria_jesus_criptoarchivossl.txt <span class="nt">-out</span> maria_jesus_criptoarchivossl.txt.enc
</code></pre></div>    </div>

    <p><img src="/assets/images/criptografia/11.png" alt="11" /></p>
  </li>
  <li>
    <p>Tu compañero te ha mandado un fichero cifrado, muestra el proceso para el descifrado.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl rsautl <span class="nt">-decrypt</span> <span class="nt">-inkey</span> maria-ssl.pem <span class="nt">-in</span> criptoarchivossl-juanje.txt.enc <span class="nt">-out</span> prueba.txt
 <span class="nb">cat </span>prueba.txt
</code></pre></div>    </div>

    <p><img src="/assets/images/criptografia/12.png" alt="12" /></p>
  </li>
</ol>]]></content><author><name></name></author><category term="SEGURIDAD" /><summary type="html"><![CDATA[Tarea 1: Generación de claves]]></summary></entry><entry><title type="html">Configuración de HTTPS en nuestro VPS</title><link href="/iaw/2022/11/27/https.html" rel="alternate" type="text/html" title="Configuración de HTTPS en nuestro VPS" /><published>2022-11-27T10:25:52+01:00</published><updated>2022-11-27T10:25:52+01:00</updated><id>/iaw/2022/11/27/https</id><content type="html" xml:base="/iaw/2022/11/27/https.html"><![CDATA[<h2 id="qué-es-un-certificado-ssl">¿Qué es un certificado SSL?</h2>

<p>Un certificado ssl es un documento que se utiliza para encriptar la información que se envía entre un servidor y un cliente. Este certificado se utiliza para que la información que se envía entre el servidor y el cliente no pueda ser leída por terceros.</p>

<h2 id="cómo-funciona">¿Cómo funciona?</h2>

<p>A grandes rasgos los pasos de una conexión a una web con certificado SSL serían los siguientes.</p>

<ol>
  <li>Un usuario, mediante su navegador se conecta al sitio web</li>
  <li>El navegador solicita al servidor web una identificación.</li>
  <li>El servidor web envía al navegador una copia de su certificado SSL.</li>
  <li>El navegador comprueba si el certificado SSL es confiable. Si el certificado es correcto se envía un mensaje al servidor web.</li>
  <li>El servidor web devuelve un acuse de recibo firmado digitalmente y se inicia una conexión cifrada con SSL.</li>
</ol>

<h2 id="pruebas-de-demostración">Pruebas de demostración</h2>

<ol>
  <li>
    <p>Primero debemos cercionarnos de que nuestro navegador tiene el certificado SSL instalado.</p>

    <p><img src="/assets/images/https/1.png" alt="1" /></p>
  </li>
  <li>¿Qué opción has elegido? ¿Qué pruebas realiza Let’s Encrypt para asegurar que somos los administrados del sitio web al elegir esa opción?
    <ul>
      <li>
        <p>La opción que he elegido enmi caso es la de Wildcard. Esta opción es la que permite que el certificado sea válido para todos los subdominios de un dominio.</p>
      </li>
      <li>
        <p>Valida mediante una string generada de forma aleatoria por Let’s Encrypt y que se debe introducir como registro TXT en el dominio DNS bajo <code class="language-plaintext highlighter-rouge">_acme-challenge.mariatec.es</code>.
Let’s Encrypt hará una petición DNS para que se devuelva dicha string y si coindice, valida la propiedad del dominio.</p>
      </li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> maria@asir:~<span class="nv">$ </span><span class="nb">sudo </span>certbot <span class="nt">--server</span> https://acme-v02.api.letsencrypt.org/directory <span class="nt">-d</span> <span class="k">*</span>.mariatec.es <span class="nt">--manual</span> <span class="nt">--preferred-challenges</span> dns-01 certonly
 Saving debug log to /var/log/letsencrypt/letsencrypt.log
 Plugins selected: Authenticator manual, Installer None
 Requesting a certificate <span class="k">for</span> <span class="k">*</span>.mariatec.es
 Performing the following challenges:
 dns-01 challenge <span class="k">for </span>mariatec.es

 <span class="nt">-------------------------------------------------------------------------------</span>
 Please deploy a DNS TXT record under the name
 _acme-challenge.mariatec.es with the following value:

 <span class="k">*********************************************************</span>

 Before continuing, verify the record is deployed.
 <span class="nt">-------------------------------------------------------------------------------</span>
 Press Enter to Continue
</code></pre></div>    </div>
  </li>
  <li>
    <p>El fichero de configuración de nuestro sitio web debe tener la siguiente configuración:</p>

    <p><img src="/assets/images/https/2.png" alt="2" /></p>
  </li>
  <li>
    <p>Vamos a configurar un crontab para que se renueve el certificado automáticamente cada tres meses. Para ello, debemos ejecutar el siguiente comando:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> maria@asir:~<span class="nv">$ </span><span class="nb">sudo </span>crontab <span class="nt">-e</span>
</code></pre></div>    </div>

    <p>Y al final del fichero añadimos la siguiente línea:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 0 0 27 <span class="k">*</span>/3 <span class="k">*</span> /etc/letsencrypt/certrenew.sh
</code></pre></div>    </div>

    <p><img src="/assets/images/https/3.png" alt="3" /></p>

    <p>Con este cron, que se ejecutará cada 27 de cada 3 meses, se ejecutará el script que hemos creado para renovar el certificado. El script es el siguiente:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">#!/bin/bash</span>
 certbot renew <span class="nt">--non-interactive</span> <span class="nt">--no-random-sleep-on-renew</span> <span class="nt">--cert-name</span> mariatec.es
</code></pre></div>    </div>

    <p>Las opciones que están implementadas en el script son las siguientes:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--non-interactive</code>: Se realiza de formaautomática sin intervención del usuario, ya que es una tarea programada.</li>
      <li><code class="language-plaintext highlighter-rouge">--no-random-sleep-on-renew</code>: Se evita que se produzca un retardo aleatorio entre 0 y 30 segundos antes de la renovación. Esto se debe a que let’s encrypt incluye un random wait entre renovaciones para evitar que, en caso de que un usuario se equivoque, se realicen muchas renovaciones en un corto periodo de tiempo. Por ello, con esta opción lo desabilitamos para que la renovación se realice de forma inmediata.</li>
      <li><code class="language-plaintext highlighter-rouge">--cert-name mariatec.es</code>: Especifica el nombre del certificado que se va a renovar. Aunque hayamos pedido un wildcard, si nos dirigimos al directorio <code class="language-plaintext highlighter-rouge">/etc/letsencrypt/live/</code> veremos que se ha creado un directorio por cada subdominio que hemos solicitado. Por ello, debemos especificar el nombre del certificado que queremos renovar.</li>
    </ul>
  </li>
</ol>

<h2 id="comprobación-de-la-configuración">Comprobación de la configuración</h2>

<p>Como podemos ver en las siguientes capturas, la configuración se ha realizado correctamente y nuestro virtualhost esta configurado correctamente para que se pueda acceder a él mediante https.</p>

<p><img src="/assets/images/https/4.png" alt="4" /></p>

<p><img src="/assets/images/https/5.png" alt="5" /></p>]]></content><author><name></name></author><category term="IAW" /><summary type="html"><![CDATA[¿Qué es un certificado SSL?]]></summary></entry></feed>